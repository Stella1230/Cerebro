chown_files ( char * * files , int bit_flags , uid_t uid , gid_t gid , uid_t required_uid , gid_t required_gid , struct Chown_option const * chopt ) { bool ok = true ; MST[STMT!TRAPSTMT]MSP[]
chown_files ( char * * files , int bit_flags , uid_t uid , gid_t gid , uid_t required_uid , gid_t required_gid , struct Chown_option const * chopt ) { bool ok = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[]
chown_files ( char * * files , int bit_flags , uid_t uid , gid_t gid , uid_t required_uid , gid_t required_gid , struct Chown_option const * chopt ) { bool ok = true ; MST[C!CONSTVAL$0$]MSP[]
chown_files ( char * * files , int bit_flags , uid_t uid , gid_t gid , uid_t required_uid , gid_t required_gid , struct Chown_option const * chopt ) { bool ok = true ; MST[C!ADD$C$1$]MSP[]
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ABS$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!NEG$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!OPERAND$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!AND$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!OPERAND$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!CONSTVAL$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!CONSTVAL$0$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ABS$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!NEG$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!OPERAND$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!AND$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!CONSTVAL$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[OR$@1$@2$!CONSTVAL$0$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!DELSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ABS$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!NEG$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!OPERAND$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[ASSIGN$V1$@2$!ABS$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[@!ABS$@$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[STMT!TRAPSTMT]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!CONSTVAL$0$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$-1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
int stat_flags = ( ( required_uid != ( uid_t ) - 1 || required_gid != ( gid_t ) - 1 MST[C!ADD$C$1$]MSP[] || chopt -> affect_symlink_referent || chopt -> verbosity != V_off ) ? 0 : FTS_NOSTAT ) ;
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[STMT!TRAPSTMT]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[STMT!DELSTMT]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$V1$@2$!ASSIGN$V1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHL$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!ABS$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!CONSTVAL$0$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITNOT$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!MUL$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHL$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!CONSTVAL$1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!NEG$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!NEG$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!EQ$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!ABS$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!NEQ$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!ADD$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!SUB$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!SUB$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!OPERAND$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITNOT$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITXOR$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITAND$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[BITOR$@1$V2$!ASSIGN$V2$@1$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[A!CONSTVAL$0$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[@!ABS$@$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[@!ABS$@$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[P!PRIGHTDEC$P$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[P!PLEFTINC$P$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[P!PRIGHTINC$P$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; MST[P!PLEFTDEC$P$]MSP[] while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) MST[STMT!TRAPSTMT]MSP[] { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; MST[STMT!DELSTMT]MSP[] if ( ent == NULL ) { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) MST[STMT!TRAPSTMT]MSP[] { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) MST[@!ABS$@$]MSP[] { if ( errno != 0 ) {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[STMT!TRAPSTMT]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[@!ABS$@$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[C!ADD$C$-1$]MSP[] {
FTS * fts = xfts_open ( files , bit_flags | stat_flags , NULL ) ; while ( 1 ) { FTSENT * ent ; ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[C!ADD$C$1$]MSP[] {
if ( ! chopt -> force_silent ) MST[STMT!TRAPSTMT]MSP[] error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) MST[@!ABS$@$]MSP[] error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) MST[@!ABS$@$]MSP[] error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) MST[C!ADD$C$-1$]MSP[] error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) MST[C!ADD$C$1$]MSP[] error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; MST[STMT!TRAPSTMT]MSP[] ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; MST[STMT!DELSTMT]MSP[] ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; MST[@!ABS$@$]MSP[] ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; MST[STMT!TRAPSTMT]MSP[] ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; MST[STMT!TRAPSTMT]MSP[] } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; MST[STMT!DELSTMT]MSP[] } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; MST[C!ADD$C$-1$]MSP[] } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; MST[C!ADD$C$1$]MSP[] } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } MST[STMT!TRAPSTMT]MSP[] break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; MST[STMT!TRAPSTMT]MSP[] } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; MST[STMT!DELSTMT]MSP[] } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[STMT!TRAPSTMT]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[STMT!DELSTMT]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!NEG$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!NEG$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!ABS$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[@!ABS$@$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[@!ABS$@$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[@!ABS$@$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[@!ABS$@$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[@!ABS$@$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[C!ADD$C$-1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[C!ADD$C$1$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , MST[CALL!SHUFFLEARGS$2$]MSP[] required_uid , required_gid , chopt ) ; }
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; } MST[STMT!TRAPSTMT]MSP[]
if ( ! chopt -> force_silent ) error ( 0 , errno , _ ( lr_20 ) ) ; ok = false ; } break; } ok &= change_file_owner ( fts , ent , uid , gid , required_uid , required_gid , chopt ) ; } MST[STMT!DELSTMT]MSP[]
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; MST[STMT!TRAPSTMT]MSP[] ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; MST[STMT!DELSTMT]MSP[] ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; MST[@!ABS$@$]MSP[] ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] ok = false ; } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; MST[STMT!TRAPSTMT]MSP[] } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; MST[C!ADD$C$-1$]MSP[] } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; MST[C!ADD$C$1$]MSP[] } return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } MST[STMT!TRAPSTMT]MSP[] return ok ; }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; MST[STMT!TRAPSTMT]MSP[] }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; MST[STMT!DELSTMT]MSP[] }
if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_21 ) ) ; ok = false ; } return ok ; MST[@!ABS$@$]MSP[] }
