int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[CALL!SHUFFLEARGS$2$]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
quote ( dir ) ) ; } return ret ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ;
quote ( dir ) ) ; } return ret ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ;
quote ( dir ) ) ; } return ret ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; MST[STMT!TRAPSTMT]MSP[N] options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
struct mkdir_options const * o = options ; MST[STMT!DELSTMT]MSP[N] if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) MST[STMT!TRAPSTMT]MSP[N] prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) MST[A!CONSTVAL$0$]MSP[N] prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) MST[@!ABS$@$]MSP[N] prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) MST[C!ADD$C$-1$]MSP[N] prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) MST[C!ADD$C$1$]MSP[N] prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[STMT!TRAPSTMT]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[STMT!DELSTMT]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[A!CONSTVAL$0$]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; MST[STMT!DELSTMT]MSP[S] options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[C!ADD$C$-1$]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[C!ADD$C$1$]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
struct mkdir_options const * o = options ; if ( o -> created_directory_format ) prog_fprintf ( stdout , o -> created_directory_format , quote ( dir ) ) ; MST[STMT!TRAPSTMT]MSP[S] } static int make_ancestor ( char const * dir , char const * component , void * options ) {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] announce_mkdir ( char const * dir , void * options ) {
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; MST[STMT!TRAPSTMT]MSP[N] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; MST[C!ADD$C$-1$]MSP[N] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; MST[C!ADD$C$1$]MSP[S] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_7 ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ; MST[STMT!TRAPSTMT]MSP[N]
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ; MST[STMT!DELSTMT]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( optc ) { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'p' :
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( ( optc = getopt_long ( argc , argv , lr_8 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[N] { case 'p' :
options . make_ancestor_function = make_ancestor ; MST[STMT!TRAPSTMT]MSP[N] break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; MST[STMT!DELSTMT]MSP[N] break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; MST[STMT!TRAPSTMT]MSP[N] case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; MST[STMT!DELSTMT]MSP[N] case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; MST[STMT!TRAPSTMT]MSP[N] break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; MST[STMT!DELSTMT]MSP[N] break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; MST[STMT!TRAPSTMT]MSP[N] case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; MST[STMT!DELSTMT]MSP[N] case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; MST[STMT!TRAPSTMT]MSP[N] break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; MST[STMT!DELSTMT]MSP[S] break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; MST[STMT!TRAPSTMT]MSP[N] case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; MST[STMT!DELSTMT]MSP[N] case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) MST[STMT!TRAPSTMT]MSP[N] { scontext = optarg ; } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; MST[STMT!TRAPSTMT]MSP[N] } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; MST[STMT!DELSTMT]MSP[N] } else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } MST[STMT!TRAPSTMT]MSP[N] else if ( is_selinux_enabled () > 0 )
options . make_ancestor_function = make_ancestor ; break; case 'm' : specified_mode = optarg ; break; case 'v' : options . created_directory_format = _ ( lr_9 ) ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } MST[STMT!DELSTMT]MSP[N] else if ( is_selinux_enabled () > 0 )
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[S] _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , MST[STMT!DELSTMT]MSP[S] _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } MST[STMT!TRAPSTMT]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[S] default:
{ if ( optarg ) scontext = optarg ; else options . set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_10 lr_11 ) ) ; } break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default:
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[N] if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) MST[STMT!TRAPSTMT]MSP[N] { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) MST[@!ABS$@$]MSP[N] { int ret = 0 ; if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[C!ADD$C$-1$]MSP[N] if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[C!ADD$C$1$]MSP[N] if ( is_smack_enabled () )
usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_12 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; if ( is_smack_enabled () ) MST[STMT!TRAPSTMT]MSP[N]
ret = smack_set_label_for_self ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; MST[STMT!DELSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; MST[@!ABS$@$]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; MST[STMT!DELSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[STMT!DELSTMT]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[@!ABS$@$]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!DELSTMT]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[@!ABS$@$]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } MST[STMT!TRAPSTMT]MSP[N] if ( options . make_ancestor_function || specified_mode ) {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[STMT!TRAPSTMT]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[OR$@1$@2$!OPERAND$@2$]MSP[S] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[STMT!TRAPSTMT]MSP[N] {
ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_13 ) , quote ( scontext ) ) ; } if ( options . make_ancestor_function || specified_mode ) MST[@!ABS$@$]MSP[N] {
mode_t umask_value = umask ( 0 ) ; MST[STMT!TRAPSTMT]MSP[N] umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; MST[STMT!DELSTMT]MSP[N] umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; MST[@!ABS$@$]MSP[N] umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[STMT!TRAPSTMT]MSP[N] options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[STMT!DELSTMT]MSP[N] options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[@!ABS$@$]MSP[N] options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; MST[STMT!TRAPSTMT]MSP[N] if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[N] if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
quote ( dir ) ) ; } return ret ; } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; MST[STMT!DELSTMT]MSP[N] int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ;
quote ( dir ) ) ; } return ret ; } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; MST[STMT!TRAPSTMT]MSP[N] struct mkdir_options options ; options . make_ancestor_function = NULL ;
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; MST[@!ABS$@$]MSP[N] if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) MST[STMT!TRAPSTMT]MSP[N] { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) MST[@!ABS$@$]MSP[N] { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
quote ( dir ) ) ; } return ret ; } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; MST[STMT!DELSTMT]MSP[N] struct mkdir_options options ; options . make_ancestor_function = NULL ;
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; MST[STMT!DELSTMT]MSP[N] if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_14 ) ,
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) , MST[STMT!TRAPSTMT]MSP[S]
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) , MST[STMT!DELSTMT]MSP[S]
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S]
mode_t umask_value = umask ( 0 ) ; umask ( umask_value ) ; options . umask_value = umask_value ; if ( specified_mode ) { struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_14 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S]
quote ( dir ) ) ; } return ret ; } int MST[STMT!TRAPSTMT]MSP[N] main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ;
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[STMT!TRAPSTMT]MSP[N] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[STMT!DELSTMT]MSP[S] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( dir ) ) ; } return ret ; } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ; MST[STMT!TRAPSTMT]MSP[N]
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( dir ) ) ; } return ret ; } int main ( int argc , char * * argv ) { const char * specified_mode = NULL ; int optc ; security_context_t scontext = NULL ; struct mkdir_options options ; options . make_ancestor_function = NULL ; MST[STMT!DELSTMT]MSP[S]
options . mode = S_IRWXUGO ; MST[STMT!TRAPSTMT]MSP[N] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[@!ABS$@$]MSP[N] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[@!ABS$@$]MSP[N] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , MST[CALL!SHUFFLEARGS$2$]MSP[N] & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; MST[STMT!TRAPSTMT]MSP[N] } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; MST[STMT!DELSTMT]MSP[N] } else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } MST[STMT!TRAPSTMT]MSP[N] else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } MST[STMT!DELSTMT]MSP[N] else options . mode = S_IRWXUGO ; }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[STMT!TRAPSTMT]MSP[N] }
options . mode = S_IRWXUGO ; MST[STMT!DELSTMT]MSP[N] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[STMT!DELSTMT]MSP[N] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[C!CONSTVAL$0$]MSP[S] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[C!ADD$C$-1$]MSP[N] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; MST[C!ADD$C$1$]MSP[S] }
quote ( specified_mode ) ) ; options . mode = mode_adjust ( S_IRWXUGO , true , umask_value , change , & options . mode_bits ) ; free ( change ) ; } else options . mode = S_IRWXUGO ; } MST[STMT!TRAPSTMT]MSP[N]
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!NEG$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!OPERAND$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!DELSTMT]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!TRAPSTMT]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!NEG$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!ABS$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!ABS$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[A!CONSTVAL$0$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[A!CONSTVAL$0$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[@!ABS$@$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[P!PRIGHTDEC$P$]MSP[S] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[P!PLEFTINC$P$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[P!PRIGHTINC$P$]MSP[N] process_dir , & options ) ) ; }
exit ( savewd_process_files ( argc - optind , argv + optind , MST[P!PLEFTDEC$P$]MSP[N] process_dir , & options ) ) ; }
options . mode = S_IRWXUGO ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; MST[STMT!DELSTMT]MSP[N] bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; MST[STMT!TRAPSTMT]MSP[N] if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; MST[C!ADD$C$-1$]MSP[S] if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; MST[C!ADD$C$1$]MSP[S] if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) MST[STMT!TRAPSTMT]MSP[N] { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) MST[@!ABS$@$]MSP[N] { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) MST[@!ABS$@$]MSP[N] { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) MST[C!ADD$C$-1$]MSP[N] { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) MST[C!ADD$C$1$]MSP[N] { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) MST[STMT!TRAPSTMT]MSP[N] set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) MST[@!ABS$@$]MSP[N] set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) MST[C!ADD$C$-1$]MSP[N] set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) MST[C!ADD$C$1$]MSP[N] set_defaultcon = true ; else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[STMT!TRAPSTMT]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[STMT!DELSTMT]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[C!CONSTVAL$0$]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[C!ADD$C$1$]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[STMT!TRAPSTMT]MSP[N] else {
process_dir ( char * dir , struct savewd * wd , void * options ) { struct mkdir_options const * o = options ; bool set_defaultcon = false ; if ( o -> set_security_context ) { if ( ! o -> make_ancestor_function ) set_defaultcon = true ; MST[STMT!DELSTMT]MSP[N] else {
char * pdir = dir_name ( dir ) ; MST[STMT!TRAPSTMT]MSP[N] struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; MST[STMT!DELSTMT]MSP[N] struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[STMT!TRAPSTMT]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$-1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[CALL!SHUFFLEARGS$2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[STMT!TRAPSTMT]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$-1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[STMT!TRAPSTMT]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!NEG$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
options . mode = S_IRWXUGO ; MST[C!CONSTVAL$0$]MSP[N] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!ABS$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
options . mode = S_IRWXUGO ; MST[C!ADD$C$-1$]MSP[S] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
options . mode = S_IRWXUGO ; MST[C!ADD$C$1$]MSP[N] options . mode_bits = 0 ; options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[@!ABS$@$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; MST[STMT!TRAPSTMT]MSP[N] options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$-1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!CONSTVAL$0$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$-1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[C!ADD$C$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; MST[STMT!DELSTMT]MSP[S] options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[STMT!TRAPSTMT]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[STMT!DELSTMT]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[C!CONSTVAL$0$]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[C!ADD$C$1$]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; MST[STMT!TRAPSTMT]MSP[N] free ( pdir ) ;
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ; MST[STMT!TRAPSTMT]MSP[N]
char * pdir = dir_name ( dir ) ; struct stat st ; if ( STREQ ( pdir , lr_5 ) || ( stat ( pdir , & st ) == 0 && S_ISDIR ( st . st_mode ) ) ) set_defaultcon = true ; free ( pdir ) ; MST[STMT!DELSTMT]MSP[N]
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[STMT!TRAPSTMT]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[@!ABS$@$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[@!ABS$@$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[AND$@1$@2$!OPERAND$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[AND$@1$@2$!OPERAND$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[AND$@1$@2$!OR$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[STMT!TRAPSTMT]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[@!ABS$@$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[@!ABS$@$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[C!ADD$C$-1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[C!ADD$C$1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!BITNOT$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!ABS$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!LE$@2$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!GE$@2$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!LE$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!GE$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!GT$@2$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!BITNOT$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 MST[LT$@1$@2$!GT$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 && ! ignorable_ctx_err ( errno ) ) MST[STMT!TRAPSTMT]MSP[N] error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
} if ( set_defaultcon && defaultcon ( dir , S_IFDIR ) < 0 && ! ignorable_ctx_err ( errno ) ) MST[@!ABS$@$]MSP[N] error ( 0 , errno , _ ( lr_4 ) , quote ( dir ) ) ; }
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!DELSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[@!ABS$@$]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[CALL!SHUFFLEARGS$2$]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[CALL!SHUFFLEARGS$2$]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[STMT!TRAPSTMT]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[STMT!DELSTMT]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[@!ABS$@$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[@!ABS$@$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$-1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$-1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$-1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!CONSTVAL$0$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$-1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[C!ADD$C$1$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
int ret = ( make_dir_parents ( dir , wd , o -> make_ancestor_function , options , MST[CALL!SHUFFLEARGS$2$]MSP[N] o -> mode , announce_mkdir , o -> mode_bits , ( uid_t ) - 1 , ( gid_t ) - 1 , true ) ? EXIT_SUCCESS : EXIT_FAILURE ) ;
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[STMT!TRAPSTMT]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[C!ADD$C$-1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[C!ADD$C$1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[AND$@1$@2$!OR$@1$@2$]MSP[S] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[STMT!TRAPSTMT]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[@!ABS$@$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[@!ABS$@$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[C!ADD$C$-1$]MSP[S] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[C!ADD$C$1$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[STMT!TRAPSTMT]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[@!ABS$@$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) MST[@!ABS$@$]MSP[N] { if ( ! restorecon ( last_component ( dir ) , false , false ) && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[STMT!TRAPSTMT]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; MST[C!ADD$C$-1$]MSP[N] options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[OR$@1$@2$!OPERAND$@2$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[STMT!TRAPSTMT]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
if ( ret == EXIT_SUCCESS && o -> set_security_context && ! set_defaultcon ) { if ( ! restorecon ( last_component ( dir ) , false , false ) MST[@!ABS$@$]MSP[N] && ! ignorable_ctx_err ( errno ) ) error ( 0 , errno , _ ( lr_6 ) ,
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!TRAPSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[STMT!DELSTMT]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[@!ABS$@$]MSP[N]
int mkdir_errno = errno ; umask ( o -> umask_value ) ; errno = mkdir_errno ; } if ( r == 0 ) { r = ( o -> umask_value & S_IRUSR ) != 0 ; announce_mkdir ( dir , options ) ; } return r ; } static int MST[CALL!SHUFFLEARGS$2$]MSP[N]
options . mode = S_IRWXUGO ; options . mode_bits = 0 ; MST[C!ADD$C$1$]MSP[S] options . created_directory_format = NULL ; options . set_security_context = false ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_7 ) ;
