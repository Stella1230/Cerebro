fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[]
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!TRAPSTMT]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!DELSTMT]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[A!CONSTVAL$0$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[@!ABS$@$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTDEC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTINC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTINC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTDEC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[C!ADD$C$-1$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; MST[STMT!TRAPSTMT]MSP[] if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; MST[STMT!DELSTMT]MSP[] if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) MST[STMT!TRAPSTMT]MSP[] { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) MST[@!ABS$@$]MSP[] { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; MST[STMT!TRAPSTMT]MSP[] exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; MST[STMT!DELSTMT]MSP[] exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[] } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[] } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[] exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!DELSTMT]MSP[] exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!DELSTMT]MSP[] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!DELSTMT]MSP[] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[@!ABS$@$]MSP[] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[] } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[] } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
