fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[@!ABS$@$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[@!ABS$@$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[@!ABS$@$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[@!ABS$@$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[C!ADD$C$1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[C!ADD$C$1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[C!CONSTVAL$0$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[C!ADD$C$-1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[C!ADD$C$1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!ADD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITNOT$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!MOD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITNOT$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!ABS$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!DIV$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!SUB$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!SUB$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!NEG$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!MUL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!NEG$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!MOD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!DIV$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[STMT!TRAPSTMT]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[STMT!DELSTMT]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[@!ABS$@$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[@!ABS$@$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[@!ABS$@$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!ABS$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[STMT!TRAPSTMT]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[STMT!DELSTMT]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!ABS$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!CONSTVAL$1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!ABS$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITNOT$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[C!ADD$C$-1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ; MST[C!ADD$C$1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) MST[STMT!TRAPSTMT]MSP[N] { FILE * fp ; int checksum = 0 ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) MST[STMT!DELSTMT]MSP[N] { FILE * fp ; int checksum = 0 ;
} if ( ferror ( fp ) ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
} if ( ferror ( fp ) ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[N] if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N] if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) MST[STMT!TRAPSTMT]MSP[N] fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) MST[@!ABS$@$]MSP[N] fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) MST[@!ABS$@$]MSP[N] fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; MST[STMT!DELSTMT]MSP[S] return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[STMT!DELSTMT]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; MST[STMT!DELSTMT]MSP[N] } if ( ! is_stdin && fclose ( fp ) != 0 ) {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[C!ADD$C$-1$]MSP[N] {
} if ( ferror ( fp ) ) { error ( 0 , errno , lr_7 , file ) ; if ( ! is_stdin ) fclose ( fp ) ; return false ; } if ( ! is_stdin && fclose ( fp ) != 0 ) MST[C!ADD$C$1$]MSP[N] {
error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[N] return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N] return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!DELSTMT]MSP[N] } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[STMT!TRAPSTMT]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[STMT!DELSTMT]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[@!ABS$@$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[@!ABS$@$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[C!ADD$C$-1$]MSP[S] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[C!ADD$C$1$]MSP[S] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[S] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[STMT!TRAPSTMT]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[@!ABS$@$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[@!ABS$@$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[C!CONSTVAL$0$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[C!ADD$C$1$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$V1$@2$!ASSIGN$V1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITXOR$@1$@2$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!MUL$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITSHL$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!ADD$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITSHL$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!SUB$@1$@2$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!NEG$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITSHR$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITNOT$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!CONSTVAL$0$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITSHR$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!ABS$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!BITAND$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!EQ$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!SUB$@2$@1$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) MST[GT$@1$@2$!NEQ$@1$@2$]MSP[S] printf ( lr_9 , file ) ;
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ; MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ; MST[STMT!DELSTMT]MSP[S]
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S]
error ( 0 , errno , lr_7 , file ) ; return false ; } printf ( lr_8 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 1024 ) ) ; if ( print_name > 1 ) printf ( lr_9 , file ) ; MST[STMT!TRAPSTMT]MSP[N]
putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] return true ; } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N] return true ; } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; MST[STMT!DELSTMT]MSP[N] } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; MST[C!CONSTVAL$0$]MSP[N] } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool MST[STMT!TRAPSTMT]MSP[N] bsd_sum_file ( const char * file , int print_name ) { FILE * fp ; int checksum = 0 ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool MST[STMT!DELSTMT]MSP[N] bsd_sum_file ( const char * file , int print_name ) { FILE * fp ; int checksum = 0 ;
putchar ( '\n' ) ; return true ; } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
putchar ( '\n' ) ; return true ; } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; MST[C!ADD$C$-1$]MSP[N] char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; } static bool sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; MST[C!ADD$C$1$]MSP[N] char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
int checksum ; unsigned int s = 0 ; MST[STMT!TRAPSTMT]MSP[N] bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; MST[C!ADD$C$-1$]MSP[N] bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; MST[C!ADD$C$1$]MSP[N] bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[STMT!DELSTMT]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[@!ABS$@$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[@!ABS$@$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[C!ADD$C$-1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[C!ADD$C$1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!ABS$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) MST[STMT!TRAPSTMT]MSP[N] { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) MST[@!ABS$@$]MSP[N] { fd = STDIN_FILENO ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; MST[STMT!TRAPSTMT]MSP[N] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; MST[C!ADD$C$-1$]MSP[N] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; MST[C!ADD$C$1$]MSP[S] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; MST[STMT!TRAPSTMT]MSP[N] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; MST[C!CONSTVAL$0$]MSP[N] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
int checksum ; unsigned int s = 0 ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fd = STDIN_FILENO ; have_read_stdin = true ; MST[C!ADD$C$1$]MSP[N] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
putchar ( '\n' ) ; return true ; } static bool MST[STMT!TRAPSTMT]MSP[N] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; } static bool MST[STMT!DELSTMT]MSP[N] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; MST[STMT!DELSTMT]MSP[N] if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[N] if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[N] if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; MST[@!ABS$@$]MSP[N] if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fd = open ( file , O_RDONLY | O_BINARY ) ; if ( fd == - 1 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!DELSTMT]MSP[N] } }
while ( 1 ) MST[STMT!TRAPSTMT]MSP[N] { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[STMT!DELSTMT]MSP[N] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[@!ABS$@$]MSP[N] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[@!ABS$@$]MSP[S] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[C!ADD$C$-1$]MSP[N] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; MST[C!ADD$C$1$]MSP[N] if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[STMT!TRAPSTMT]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[@!ABS$@$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[@!ABS$@$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[C!ADD$C$-1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[C!ADD$C$1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[N] { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; MST[STMT!TRAPSTMT]MSP[N] break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; MST[STMT!TRAPSTMT]MSP[N] if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; MST[STMT!DELSTMT]MSP[N] if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[@!ABS$@$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[C!CONSTVAL$0$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[C!ADD$C$-1$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; MST[STMT!DELSTMT]MSP[N] break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; MST[STMT!TRAPSTMT]MSP[N] case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; MST[STMT!DELSTMT]MSP[S] case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ;
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[S]
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[S]
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N]
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S]
while ( 1 ) { size_t i ; size_t bytes_read = safe_read ( fd , buf , sizeof buf ) ; if ( bytes_read == 0 ) break; if ( bytes_read == SAFE_READ_ERROR ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
if ( ! is_stdin ) MST[STMT!TRAPSTMT]MSP[S] close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ;
if ( ! is_stdin ) MST[@!ABS$@$]MSP[N] close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) MST[@!ABS$@$]MSP[N] close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; MST[STMT!TRAPSTMT]MSP[S] return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; MST[STMT!DELSTMT]MSP[N] return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; MST[@!ABS$@$]MSP[N] return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; MST[STMT!TRAPSTMT]MSP[S] return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; MST[STMT!TRAPSTMT]MSP[S] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; MST[STMT!DELSTMT]MSP[N] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ;
if ( ! is_stdin ) close ( fd ) ; return false ; MST[C!ADD$C$-1$]MSP[S] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; MST[STMT!TRAPSTMT]MSP[S] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; MST[STMT!DELSTMT]MSP[S] } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] s += buf [ i ] ; total_bytes += bytes_read ; }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ;
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[S] s += buf [ i ] ; total_bytes += bytes_read ; }
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S]
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[C!ADD$C$-1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[C!ADD$C$1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[@!ABS$@$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[@!ABS$@$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[@!ABS$@$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[S] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[S] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[STMT!TRAPSTMT]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[@!ABS$@$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[@!ABS$@$]MSP[S] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[@!ABS$@$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[@!ABS$@$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; MST[STMT!TRAPSTMT]MSP[N] total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[@!ABS$@$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[@!ABS$@$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[C!ADD$C$1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) MST[STMT!DELSTMT]MSP[N] s += buf [ i ] ; total_bytes += bytes_read ; }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[STMT!TRAPSTMT]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[STMT!DELSTMT]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[@!ABS$@$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[@!ABS$@$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[@!ABS$@$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[S] files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!ABS$@2$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] }
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin ) close ( fd ) ; return false ; } for ( i = 0 ; i < bytes_read ; i ++ ) s += buf [ i ] ; total_bytes += bytes_read ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] }
putchar ( '\n' ) ; return true ; } static bool MST[STMT!TRAPSTMT]MSP[N] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; } static bool MST[STMT!DELSTMT]MSP[S] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[N] return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N] return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!DELSTMT]MSP[N] } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!DELSTMT]MSP[N] } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ;
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[STMT!DELSTMT]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!ABS$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!CONSTVAL$1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!ABS$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[S] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITNOT$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!DELSTMT]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[@!ABS$@$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[@!ABS$@$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[C!ADD$C$-1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[C!ADD$C$1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[C!ADD$C$-1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[C!ADD$C$1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
if ( ! is_stdin && close ( fd ) != 0 ) { error ( 0 , errno , lr_7 , file ) ; return false ; } r = ( s & 0xffff ) + ( ( s & 0xffffffff ) >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[STMT!TRAPSTMT]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[STMT!DELSTMT]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!ABS$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!CONSTVAL$1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!ABS$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITNOT$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!ABS$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[@!ABS$@$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[@!ABS$@$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[@!ABS$@$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[@!ABS$@$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[C!ADD$C$-1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[C!ADD$C$1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[C!ADD$C$-1$]MSP[S] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[C!ADD$C$1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!ABS$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[STMT!TRAPSTMT]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[STMT!DELSTMT]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[@!ABS$@$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[@!ABS$@$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[C!ADD$C$-1$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[C!ADD$C$1$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , MST[CALL!SHUFFLEARGS$2$]MSP[N] human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[STMT!TRAPSTMT]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[@!ABS$@$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[C!ADD$C$-1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) MST[C!ADD$C$1$]MSP[N] printf ( lr_9 , file ) ; putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ;
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N]
checksum = ( r & 0xffff ) + ( r >> 16 ) ; printf ( lr_10 , checksum , human_readable ( total_bytes , hbuf , human_ceiling , 1 , 512 ) ) ; if ( print_name ) printf ( lr_9 , file ) ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N]
return true ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int files_given ; bool (* sum_func) ( const char * , int ) = bsd_sum_file ; initialize_main ( & argc , & argv ) ;
return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int files_given ; bool (* sum_func) ( const char * , int ) = bsd_sum_file ; initialize_main ( & argc , & argv ) ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
return true ; MST[C!CONSTVAL$0$]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int files_given ; bool (* sum_func) ( const char * , int ) = bsd_sum_file ; initialize_main ( & argc , & argv ) ;
return true ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int files_given ; bool (* sum_func) ( const char * , int ) = bsd_sum_file ; initialize_main ( & argc , & argv ) ;
putchar ( '\n' ) ; return true ; } static bool MST[STMT!TRAPSTMT]MSP[N] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
putchar ( '\n' ) ; return true ; } static bool MST[STMT!DELSTMT]MSP[N] sysv_sum_file ( const char * file , int print_name ) { int fd ; unsigned char buf [ 8192 ] ; uintmax_t total_bytes = 0 ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; int r ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[@!ABS$@$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[@!ABS$@$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; MST[@!ABS$@$]MSP[N] if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[STMT!TRAPSTMT]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[@!ABS$@$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[@!ABS$@$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[C!ADD$C$-1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[C!ADD$C$1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!ABS$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!BITNOT$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!NEG$@1$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[STMT!TRAPSTMT]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[STMT!DELSTMT]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[@!ABS$@$]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[STMT!TRAPSTMT]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; MST[STMT!DELSTMT]MSP[N] else for ( ok = true ; optind < argc ; optind ++ )
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[C!CONSTVAL$0$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[C!ADD$C$1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[S]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N]
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[STMT!TRAPSTMT]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[STMT!DELSTMT]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[S] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
return true ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int files_given ; bool (* sum_func) ( const char * , int ) = bsd_sum_file ; MST[STMT!DELSTMT]MSP[N] initialize_main ( & argc , & argv ) ;
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[A!CONSTVAL$0$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[A!CONSTVAL$0$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[@!ABS$@$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[@!ABS$@$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[@!ABS$@$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[@!ABS$@$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[C!ADD$C$-1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[C!ADD$C$1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[P!PLEFTINC$P$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; MST[STMT!TRAPSTMT]MSP[N] if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[C!CONSTVAL$0$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[C!ADD$C$1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } files_given = argc - optind ; if ( files_given <= 0 ) ok = sum_func ( lr_4 , files_given ) ; else for ( ok = true ; optind < argc ; optind ++ ) MST[STMT!DELSTMT]MSP[N]
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OPERAND$@2$]MSP[S] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[C!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; MST[STMT!DELSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ;
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; MST[@!ABS$@$]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
ok &= sum_func ( argv [ optind ] , files_given ) ; if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , lr_4 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!TRAPSTMT]MSP[N] have_read_stdin = false ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!DELSTMT]MSP[N] have_read_stdin = false ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[@!ABS$@$]MSP[N] have_read_stdin = false ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) { FILE * fp ; int checksum = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ; MST[STMT!TRAPSTMT]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) { FILE * fp ; int checksum = 0 ; MST[C!ADD$C$-1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) { FILE * fp ; int checksum = 0 ; MST[C!ADD$C$1$]MSP[N]
uintmax_t total_bytes = 0 ; MST[STMT!TRAPSTMT]MSP[N] int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; MST[C!ADD$C$-1$]MSP[N] int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; MST[C!ADD$C$1$]MSP[N] int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[STMT!DELSTMT]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[@!ABS$@$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[@!ABS$@$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[C!ADD$C$-1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[C!ADD$C$1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N]
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!ABS$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) MST[STMT!TRAPSTMT]MSP[N] { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) MST[@!ABS$@$]MSP[N] { fp = stdin ; have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; MST[STMT!TRAPSTMT]MSP[N] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; MST[STMT!DELSTMT]MSP[N] have_read_stdin = true ; if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; MST[STMT!TRAPSTMT]MSP[N] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; MST[C!CONSTVAL$0$]MSP[S] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
uintmax_t total_bytes = 0 ; int ch ; char hbuf [ LONGEST_HUMAN_READABLE + 1 ] ; bool is_stdin = STREQ ( file , lr_4 ) ; if ( is_stdin ) { fp = stdin ; have_read_stdin = true ; MST[C!ADD$C$1$]MSP[S] if ( O_BINARY && ! isatty ( STDIN_FILENO ) )
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) MST[STMT!TRAPSTMT]MSP[N] { FILE * fp ; int checksum = 0 ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool bsd_sum_file ( const char * file , int print_name ) MST[STMT!DELSTMT]MSP[N] { FILE * fp ; int checksum = 0 ;
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; MST[STMT!DELSTMT]MSP[N] if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_7 , file ) ; return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; MST[STMT!DELSTMT]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; MST[@!ABS$@$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } }
xfreopen ( NULL , lr_5 , stdin ) ; } else { fp = fopen ( file , ( O_BINARY ? lr_5 : lr_6 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_7 , file ) ; return false ; MST[STMT!DELSTMT]MSP[N] } }
fadvise ( fp , FADVISE_SEQUENTIAL ) ; MST[STMT!TRAPSTMT]MSP[N] while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; MST[STMT!DELSTMT]MSP[S] while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[STMT!TRAPSTMT]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ; MST[C!ADD$C$-1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[@!ABS$@$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[@!ABS$@$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[@!ABS$@$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_11 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; have_read_stdin = false ; MST[C!ADD$C$1$]MSP[N]
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) MST[C!ADD$C$-1$]MSP[N] { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[STMT!TRAPSTMT]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[@!ABS$@$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[@!ABS$@$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[C!CONSTVAL$0$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[C!ADD$C$1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[STMT!TRAPSTMT]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[STMT!DELSTMT]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!ABS$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!ABS$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!BITNOT$@2$]MSP[N] checksum += ch ; checksum &= 0xffff ;
fadvise ( fp , FADVISE_SEQUENTIAL ) ; while ( ( ch = getc ( fp ) ) != EOF ) { total_bytes ++ ; checksum = ( checksum >> 1 ) + ( ( checksum & 1 ) << 15 ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] checksum += ch ; checksum &= 0xffff ;
while ( ( optc = getopt_long ( argc , argv , lr_12 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( optc ) { case 'r' : sum_func = bsd_sum_file ; break; case 's' : sum_func = sysv_sum_file ; break; case_GETOPT_HELP_CHAR ;
