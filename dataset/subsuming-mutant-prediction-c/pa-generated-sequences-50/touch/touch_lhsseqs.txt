main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; MST[C!CONSTVAL$0$]MSP[] if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; MST[C!ADD$C$1$]MSP[] if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) MST[STMT!TRAPSTMT]MSP[] { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) MST[@!ABS$@$]MSP[] { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[STMT!TRAPSTMT]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
setlocale ( LC_ALL , lr_12 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
setlocale ( LC_ALL , lr_12 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!NEG$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] change_times = 0 ; no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!ABS$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] change_times = 0 ; no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[] change_times = 0 ; no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[@!ABS$@$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[@!ABS$@$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[C!ADD$C$1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) MST[C!ADD$C$1$]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[] if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; MST[STMT!DELSTMT]MSP[] if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[] if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[STMT!TRAPSTMT]MSP[]
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; MST[STMT!TRAPSTMT]MSP[] no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; MST[STMT!DELSTMT]MSP[] no_create = use_ref = false ;
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!NEG$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!ABS$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[@!ABS$@$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[@!ABS$@$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[C!ADD$C$1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME ) MST[C!ADD$C$1$]MSP[]
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[] } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; MST[STMT!DELSTMT]MSP[] } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[] } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } MST[STMT!TRAPSTMT]MSP[] } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } MST[STMT!TRAPSTMT]MSP[] else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } MST[STMT!DELSTMT]MSP[] else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) MST[STMT!TRAPSTMT]MSP[] { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) MST[@!ABS$@$]MSP[] { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; MST[STMT!TRAPSTMT]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; MST[STMT!DELSTMT]MSP[] get_reldate ( & newtime [ 0 ] , flex_date , & now ) ;
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ; MST[STMT!TRAPSTMT]MSP[]
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ; MST[STMT!DELSTMT]MSP[]
get_reldate ( & newtime [ 1 ] , flex_date , & newtime [ 1 ] ) ; } } else { if ( flex_date ) { struct timespec now ; gettime ( & now ) ; get_reldate ( & newtime [ 0 ] , flex_date , & now ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
newtime [ 1 ] = newtime [ 0 ] ; MST[STMT!TRAPSTMT]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; MST[C!CONSTVAL$0$]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$1$]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; MST[CALL!SHUFFLEARGS$2$]MSP[] date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[STMT!TRAPSTMT]MSP[] if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!CONSTVAL$0$]MSP[] if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!ADD$C$1$]MSP[] if ( change_times == ( CH_ATIME | CH_MTIME ) && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[STMT!TRAPSTMT]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[C!CONSTVAL$0$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[C!ADD$C$-1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[C!ADD$C$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEG$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ABS$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[STMT!TRAPSTMT]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; MST[C!ADD$C$-1$]MSP[] no_create = use_ref = false ;
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ABS$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; MST[C!ADD$C$1$]MSP[] no_create = use_ref = false ;
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEG$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEG$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ABS$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[STMT!TRAPSTMT]MSP[]
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[]
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[STMT!TRAPSTMT]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[@!ABS$@$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ABS$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEG$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!NEG$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!ABS$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( change_times == ( CH_ATIME | CH_MTIME ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] && newtime [ 0 ] . tv_sec == now . tv_sec && newtime [ 0 ] . tv_nsec == now . tv_nsec ) {
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[STMT!TRAPSTMT]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[STMT!DELSTMT]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$V1$@2$!ASSIGN$V1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!DIV$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHR$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GE$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITAND$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!NEG$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHL$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITNOT$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHR$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!EQ$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHL$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!MOD$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!ABS$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!ABS$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!NEQ$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!DIV$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!SUB$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITOR$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITNOT$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!ADD$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!SUB$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!CONSTVAL$0$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GT$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GT$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GE$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LT$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LT$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!NEG$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LE$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LE$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHR$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GE$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!BITSHR$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!MOD$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!DIV$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GT$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GT$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!GE$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LT$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LT$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LE$@2$@1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[BITXOR$@1$@2$!LE$@1$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[@!ABS$@$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[@!ABS$@$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; MST[C!ADD$C$1$]MSP[] notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[STMT!TRAPSTMT]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[STMT!DELSTMT]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; MST[@!ABS$@$]MSP[] get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; MST[STMT!TRAPSTMT]MSP[] if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; MST[STMT!DELSTMT]MSP[] if ( notnow1 . tv_sec == notnow . tv_sec
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[C!ADD$C$-1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( notnow1 . tv_sec == notnow . tv_sec
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[STMT!TRAPSTMT]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITNOT$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MUL$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[]
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[C!ADD$C$1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!CONSTVAL$1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ADD$@1$@2$]MSP[]
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[STMT!TRAPSTMT]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!SUB$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ABS$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!OPERAND$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEG$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!OPERAND$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITNOT$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEG$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ABS$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!SUB$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!CONSTVAL$0$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[AND$@1$@2$!CONSTVAL$0$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[AND$@1$@2$!CONSTVAL$1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[AND$@1$@2$!OPERAND$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[AND$@1$@2$!OPERAND$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[AND$@1$@2$!OR$@1$@2$]MSP[]
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[STMT!TRAPSTMT]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[@!ABS$@$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITNOT$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MUL$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!CONSTVAL$1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ADD$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!SUB$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ABS$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!OPERAND$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEG$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!OPERAND$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITNOT$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!NEG$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!ABS$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!SUB$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!CONSTVAL$0$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
struct timespec notnow , notnow1 ; notnow . tv_sec = now . tv_sec ^ 1 ; notnow . tv_nsec = now . tv_nsec ; get_reldate ( & notnow1 , flex_date , & notnow ) ; if ( notnow1 . tv_sec == notnow . tv_sec MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[STMT!TRAPSTMT]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[C!ADD$C$-1$]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[C!ADD$C$1$]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; MST[STMT!TRAPSTMT]MSP[] } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } MST[STMT!TRAPSTMT]MSP[] } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } MST[STMT!TRAPSTMT]MSP[] } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[STMT!TRAPSTMT]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!OPERAND$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITNOT$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!NEG$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!OPERAND$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!TRAPSTMT]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!NEG$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!ABS$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!ABS$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITNOT$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!CONSTVAL$0$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!ADD$C$-1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!ADD$C$1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!CONSTVAL$1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!ADD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[C!ADD$C$-1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!MOD$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!MUL$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!EQ$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!DIV$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!SUB$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!GT$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!DIV$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; change_times = 0 ; no_create = use_ref = false ; MST[C!ADD$C$1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!NEG$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!LT$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!GE$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!ABS$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!GT$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!LT$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!OPERAND$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!BITNOT$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!GE$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!SUB$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LE$@1$@2$!MOD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!CONSTVAL$0$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!CONSTVAL$1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OPERAND$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OPERAND$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[STMT!TRAPSTMT]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[@!ABS$@$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!CONSTVAL$0$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!ADD$C$-1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[C!ADD$C$1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!CONSTVAL$0$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!CONSTVAL$1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OPERAND$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OPERAND$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[AND$@1$@2$!OR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!MOD$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!NEG$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!DIV$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!SUB$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!NEG$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!EQ$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!ADD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!OPERAND$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!MUL$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!ABS$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!MOD$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!LE$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!GE$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!CONSTVAL$0$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!SUB$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!LE$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!DIV$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!GE$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!GT$@2$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!BITNOT$@1$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 MST[LT$@1$@2$!GT$@1$@2$]MSP[] && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[STMT!TRAPSTMT]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[A!CONSTVAL$0$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[A!CONSTVAL$0$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[@!ABS$@$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[@!ABS$@$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$A1$@2$!OPERAND$@2$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$A1$@2$!OPERAND$A1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[P!PRIGHTDEC$P$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[P!PLEFTINC$P$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[P!PRIGHTINC$P$]MSP[]
&& notnow1 . tv_nsec == notnow . tv_nsec ) date_set = false ; } } } if ( ! date_set && 2 <= argc - optind && posix2_version () < 200112 && posixtime ( & newtime [ 0 ] . tv_sec , argv [ optind ] , MST[P!PLEFTDEC$P$]MSP[]
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; MST[STMT!TRAPSTMT]MSP[] newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; MST[C!ADD$C$-1$]MSP[] newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; MST[C!ADD$C$1$]MSP[] newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[STMT!TRAPSTMT]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[STMT!DELSTMT]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$1$]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; MST[CALL!SHUFFLEARGS$2$]MSP[] date_set = true ; if ( ! getenv ( lr_17 ) ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[STMT!TRAPSTMT]MSP[] if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] if ( ! getenv ( lr_17 ) ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!CONSTVAL$0$]MSP[] if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!ADD$C$1$]MSP[] if ( ! getenv ( lr_17 ) ) {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) MST[STMT!TRAPSTMT]MSP[] {
PDS_TRAILING_YEAR | PDS_PRE_2000 ) ) { newtime [ 0 ] . tv_nsec = 0 ; newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; if ( ! getenv ( lr_17 ) ) MST[@!ABS$@$]MSP[] {
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; MST[STMT!TRAPSTMT]MSP[] if ( tm ) error ( 0 , 0 , _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; MST[STMT!DELSTMT]MSP[] if ( tm ) error ( 0 , 0 , _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) MST[STMT!TRAPSTMT]MSP[] error ( 0 , 0 , _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[A!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[A!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$-1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[C!ADD$C$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$A1$@2$!OPERAND$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$A1$@2$!OPERAND$A1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[P!PRIGHTDEC$P$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[P!PLEFTINC$P$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[P!PRIGHTINC$P$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[P!PLEFTDEC$P$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!OPERAND$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!ABS$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEG$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITNOT$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEG$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITNOT$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!CONSTVAL$1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!OPERAND$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!ABS$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEG$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITNOT$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEG$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITNOT$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!LT$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GT$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!GE$@2$@1$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
struct tm const * tm = localtime ( & newtime [ 0 ] . tv_sec ) ; if ( tm ) error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_18 lr_19 ) , argv [ optind ] ,
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } MST[STMT!TRAPSTMT]MSP[] optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[STMT!TRAPSTMT]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[STMT!DELSTMT]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[@!ABS$@$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[@!ABS$@$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[C!CONSTVAL$0$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[C!ADD$C$1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } MST[STMT!TRAPSTMT]MSP[] if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) MST[STMT!TRAPSTMT]MSP[] { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) MST[@!ABS$@$]MSP[] { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) MST[@!ABS$@$]MSP[] { if ( change_times == ( CH_ATIME | CH_MTIME ) )
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[STMT!TRAPSTMT]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[@!ABS$@$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[@!ABS$@$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[C!CONSTVAL$0$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[C!ADD$C$-1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[C!ADD$C$1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
tm -> tm_year + 1900L , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec ) ; } optind ++ ; } if ( ! date_set ) { if ( change_times == ( CH_ATIME | CH_MTIME ) ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
amtime_now = true ; MST[STMT!TRAPSTMT]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[STMT!DELSTMT]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[C!CONSTVAL$0$]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[C!ADD$C$1$]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[STMT!TRAPSTMT]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; MST[STMT!DELSTMT]MSP[] else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[STMT!TRAPSTMT]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!CONSTVAL$0$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!ADD$C$-1$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!ADD$C$1$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[STMT!TRAPSTMT]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[STMT!DELSTMT]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!CONSTVAL$0$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!ADD$C$-1$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; MST[C!ADD$C$1$]MSP[] } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } MST[STMT!TRAPSTMT]MSP[] if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; MST[STMT!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
amtime_now = true ; else newtime [ 1 ] . tv_nsec = newtime [ 0 ] . tv_nsec = UTIME_NOW ; } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_20 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[STMT!TRAPSTMT]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[C!ADD$C$-1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[C!ADD$C$1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[C!CONSTVAL$0$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[C!ADD$C$1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!ABS$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[] ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[] }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[] }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[] }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
for (; optind < argc ; ++ optind ) ok &= touch ( argv [ optind ] ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ;
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) MST[CALL!SHUFFLEARGS$2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ;
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ; MST[STMT!TRAPSTMT]MSP[]
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ; MST[STMT!DELSTMT]MSP[]
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
static void get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ; MST[STMT!TRAPSTMT]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
static void MST[STMT!TRAPSTMT]MSP[] get_reldate ( struct timespec * result , char const * flex_date , struct timespec const * now ) { if ( ! parse_datetime ( result , flex_date , now ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( flex_date ) ) ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; MST[@!ABS$@$]MSP[] int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; MST[C!CONSTVAL$0$]MSP[] int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; MST[C!ADD$C$-1$]MSP[] int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; MST[STMT!TRAPSTMT]MSP[] struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[] struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; MST[C!ADD$C$-1$]MSP[] struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; MST[C!ADD$C$1$]MSP[] struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; MST[STMT!TRAPSTMT]MSP[] if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; MST[STMT!DELSTMT]MSP[] if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[STMT!TRAPSTMT]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[@!ABS$@$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[@!ABS$@$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[C!ADD$C$-1$]MSP[] fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[C!ADD$C$1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[] fd = STDOUT_FILENO ;
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[STMT!TRAPSTMT]MSP[]
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[STMT!DELSTMT]MSP[]
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[C!CONSTVAL$0$]MSP[]
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[C!ADD$C$1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[STMT!TRAPSTMT]MSP[]
} static bool touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ; MST[STMT!DELSTMT]MSP[]
else if ( ! ( no_create || no_dereference ) ) MST[STMT!TRAPSTMT]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[@!ABS$@$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[@!ABS$@$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[OR$@1$@2$!OPERAND$@1$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[OR$@1$@2$!AND$@1$@2$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[OR$@1$@2$!OPERAND$@2$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) MST[STMT!TRAPSTMT]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[@!ABS$@$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) MST[@!ABS$@$]MSP[] { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[STMT!TRAPSTMT]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[STMT!DELSTMT]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[@!ABS$@$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[CALL!SHUFFLEARGS$2$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[CALL!SHUFFLEARGS$2$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , MST[CALL!SHUFFLEARGS$2$]MSP[] O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[STMT!TRAPSTMT]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!CONSTVAL$0$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$-1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!NEG$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!ABS$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OPERAND$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OPERAND$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[STMT!TRAPSTMT]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ABS$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!NEG$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$-1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OPERAND$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[STMT!TRAPSTMT]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ABS$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!NEG$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$-1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OPERAND$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[AND$@1$@2$!OR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[STMT!TRAPSTMT]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ABS$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!NEG$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[@!ABS$@$]MSP[]
else if ( ! ( no_create || no_dereference ) ) { fd = fd_reopen ( STDIN_FILENO , file , O_WRONLY | O_CREAT | O_NONBLOCK | O_NOCTTY , MODE_RW_UGO ) ; if ( fd == - 1 && errno != EISDIR && errno != EINVAL && errno != EPERM ) MST[C!ADD$C$1$]MSP[]
open_errno = errno ; MST[STMT!TRAPSTMT]MSP[] } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; MST[@!ABS$@$]MSP[] } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; MST[STMT!TRAPSTMT]MSP[] } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[STMT!TRAPSTMT]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[@!ABS$@$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[@!ABS$@$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[C!ADD$C$-1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) MST[C!ADD$C$1$]MSP[] { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[STMT!TRAPSTMT]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[@!ABS$@$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[@!ABS$@$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[C!CONSTVAL$0$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[C!ADD$C$-1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[C!ADD$C$1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!NEG$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!ABS$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[STMT!TRAPSTMT]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[STMT!DELSTMT]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[C!CONSTVAL$0$]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[C!ADD$C$-1$]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[C!ADD$C$1$]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[STMT!TRAPSTMT]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; MST[STMT!DELSTMT]MSP[] else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[STMT!TRAPSTMT]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[@!ABS$@$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[@!ABS$@$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[C!CONSTVAL$0$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[C!ADD$C$1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[STMT!TRAPSTMT]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[STMT!DELSTMT]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[STMT!TRAPSTMT]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[STMT!DELSTMT]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] newtime [ 1 ] . tv_nsec = UTIME_OMIT ; }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; MST[STMT!DELSTMT]MSP[] }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; MST[C!CONSTVAL$0$]MSP[] }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; MST[C!ADD$C$-1$]MSP[] }
open_errno = errno ; } if ( change_times != ( CH_ATIME | CH_MTIME ) ) { if ( change_times == CH_MTIME ) newtime [ 0 ] . tv_nsec = UTIME_OMIT ; else { assert ( change_times == CH_ATIME ) ; newtime [ 1 ] . tv_nsec = UTIME_OMIT ; MST[C!ADD$C$1$]MSP[] }
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} if ( amtime_now ) MST[STMT!TRAPSTMT]MSP[] { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) MST[@!ABS$@$]MSP[] { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) MST[@!ABS$@$]MSP[] { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; MST[STMT!TRAPSTMT]MSP[] } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; MST[STMT!DELSTMT]MSP[] } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!CONSTVAL$0$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITNOT$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!NEG$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!ABS$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) MST[@!ABS$@$]MSP[] { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[STMT!TRAPSTMT]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[ASSIGN$V1$@2$!NEG$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!CONSTVAL$0$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$-1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[STMT!DELSTMT]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITNOT$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$V1$@2$!ASSIGN$V1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITNOT$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!NEG$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHL$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!ABS$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!TRAPSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[STMT!DELSTMT]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!CONSTVAL$0$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[@!ABS$@$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITNOT$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!CONSTVAL$0$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$-1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$-1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$-1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[C!ADD$C$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!BITNOT$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!NEG$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!ABS$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LE$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GT$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!GE$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[EQ$@1$@2$!LT$@2$@1$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[CALL!SHUFFLEARGS$2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[CALL!SHUFFLEARGS$2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
} if ( amtime_now ) { t = NULL ; } ok = ( fdutimensat ( fd , AT_FDCWD , ( fd == STDOUT_FILENO ? NULL : file ) , t , MST[CALL!SHUFFLEARGS$2$]MSP[] ( no_dereference && fd == - 1 ) ? AT_SYMLINK_NOFOLLOW : 0 ) == 0 ) ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!MUL$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) MST[STMT!TRAPSTMT]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[@!ABS$@$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[@!ABS$@$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[C!ADD$C$-1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[C!ADD$C$1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!ABS$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHL$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!NEG$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!NEG$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!EQ$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; MST[STMT!TRAPSTMT]MSP[] return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; MST[STMT!DELSTMT]MSP[] return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; MST[@!ABS$@$]MSP[] return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } else if ( fd == STDOUT_FILENO ) {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!ABS$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; MST[C!ADD$C$-1$]MSP[] } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } else if ( fd == STDOUT_FILENO ) {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } } else if ( fd == STDOUT_FILENO ) {
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool MST[STMT!DELSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[STMT!TRAPSTMT]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[@!ABS$@$]MSP[] {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[@!ABS$@$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[C!CONSTVAL$0$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[C!ADD$C$1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!NEG$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!ABS$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!NEQ$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] {
if ( fd == STDIN_FILENO ) { if ( close ( STDIN_FILENO ) != 0 ) { error ( 0 , errno , _ ( lr_3 ) , quote ( file ) ) ; return false ; } } else if ( fd == STDOUT_FILENO ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] {
if ( ! ok && errno == EBADF && no_create ) MST[STMT!TRAPSTMT]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[STMT!TRAPSTMT]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[@!ABS$@$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[@!ABS$@$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[C!CONSTVAL$0$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!ADD$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[C!ADD$C$-1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[C!ADD$C$1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!SUB$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!SUB$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!NEG$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!ABS$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[STMT!TRAPSTMT]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[@!ABS$@$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) MST[@!ABS$@$]MSP[] return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; MST[STMT!TRAPSTMT]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; MST[STMT!DELSTMT]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITNOT$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) return true ; MST[C!CONSTVAL$0$]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; MST[STMT!TRAPSTMT]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; MST[STMT!DELSTMT]MSP[] } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) MST[STMT!TRAPSTMT]MSP[] { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) MST[@!ABS$@$]MSP[] { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) MST[@!ABS$@$]MSP[] { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITXOR$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITAND$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[@!ABS$@$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) MST[C!ADD$C$1$]MSP[] { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; MST[STMT!TRAPSTMT]MSP[] } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; MST[STMT!DELSTMT]MSP[] } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; MST[@!ABS$@$]MSP[] } else {
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] } else {
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( ! ok && errno == EBADF && no_create ) return true ; } if ( ! ok ) { if ( open_errno ) { error ( 0 , open_errno , _ ( lr_4 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] } else {
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool MST[STMT!DELSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
if ( no_create && errno == ENOENT ) MST[STMT!TRAPSTMT]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[@!ABS$@$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[@!ABS$@$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[STMT!TRAPSTMT]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[@!ABS$@$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[@!ABS$@$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[C!CONSTVAL$0$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[C!ADD$C$-1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[C!ADD$C$1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!NEG$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!ABS$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[STMT!TRAPSTMT]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[STMT!DELSTMT]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[C!CONSTVAL$0$]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[STMT!TRAPSTMT]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; MST[STMT!DELSTMT]MSP[] error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; MST[STMT!TRAPSTMT]MSP[] } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; MST[STMT!DELSTMT]MSP[] } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; MST[@!ABS$@$]MSP[] } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] } return false ; } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[STMT!DELSTMT]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[C!ADD$C$-1$]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; MST[STMT!DELSTMT]MSP[] } return true ; } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[STMT!DELSTMT]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[C!CONSTVAL$0$]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
if ( no_create && errno == ENOENT ) return true ; error ( 0 , errno , _ ( lr_5 ) , quote ( file ) ) ; } return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } void usage ( int status ) { if ( status != EXIT_SUCCESS )
} static bool MST[STMT!TRAPSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
} static bool MST[STMT!DELSTMT]MSP[] touch ( const char * file ) { bool ok ; int fd = - 1 ; int open_errno = 0 ; struct timespec const * t = newtime ; if ( STREQ ( file , lr_2 ) ) fd = STDOUT_FILENO ;
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[@!ABS$@$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[@!ABS$@$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; MST[C!ADD$C$1$]MSP[] break; case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; MST[STMT!TRAPSTMT]MSP[] case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; MST[STMT!DELSTMT]MSP[] case 'c' : no_create = true ; break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; MST[STMT!TRAPSTMT]MSP[] break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; MST[STMT!DELSTMT]MSP[] break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; MST[C!CONSTVAL$0$]MSP[] break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; MST[C!ADD$C$1$]MSP[] break; case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; MST[STMT!TRAPSTMT]MSP[] case 'd' :
while ( ( c = getopt_long ( argc , argv , lr_13 , longopts , NULL ) ) != - 1 ) { switch ( c ) { case 'a' : change_times |= CH_ATIME ; break; case 'c' : no_create = true ; break; MST[STMT!DELSTMT]MSP[] case 'd' :
flex_date = optarg ; MST[STMT!TRAPSTMT]MSP[] break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; MST[STMT!DELSTMT]MSP[] break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; MST[STMT!TRAPSTMT]MSP[] case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; MST[STMT!TRAPSTMT]MSP[] case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; MST[STMT!DELSTMT]MSP[] case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; MST[STMT!TRAPSTMT]MSP[] break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; MST[STMT!DELSTMT]MSP[] break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; MST[C!CONSTVAL$0$]MSP[] break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; MST[C!ADD$C$1$]MSP[] break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; MST[STMT!TRAPSTMT]MSP[] case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; MST[STMT!DELSTMT]MSP[] case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[STMT!TRAPSTMT]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[STMT!DELSTMT]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$V1$@2$!ASSIGN$V1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHL$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!CONSTVAL$0$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITNOT$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!MUL$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHL$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!CONSTVAL$1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!NEG$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!NEG$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!EQ$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!ABS$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!NEQ$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!ADD$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!SUB$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!SUB$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!OPERAND$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITNOT$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITXOR$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITAND$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[@!ABS$@$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[@!ABS$@$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[C!ADD$C$-1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; MST[C!ADD$C$1$]MSP[] break; case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; MST[STMT!TRAPSTMT]MSP[] case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
main ( int argc , char * * argv ) { int c ; bool date_set = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; MST[STMT!DELSTMT]MSP[] case 'r' : use_ref = true ; ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; MST[STMT!TRAPSTMT]MSP[] ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; MST[C!CONSTVAL$0$]MSP[] ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; MST[C!ADD$C$1$]MSP[] ref_file = optarg ; break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; MST[STMT!TRAPSTMT]MSP[] break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; MST[STMT!DELSTMT]MSP[] break; case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; MST[STMT!TRAPSTMT]MSP[] case 't' :
flex_date = optarg ; break; case 'f' : break; case 'h' : no_dereference = true ; break; case 'm' : change_times |= CH_MTIME ; break; case 'r' : use_ref = true ; ref_file = optarg ; break; MST[STMT!DELSTMT]MSP[] case 't' :
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , MST[STMT!TRAPSTMT]MSP[] PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ;
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , MST[STMT!TRAPSTMT]MSP[] quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ;
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , MST[STMT!DELSTMT]MSP[] quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ;
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ;
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ;
fputs ( _ ( lr_10 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_11 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!TRAPSTMT]MSP[]
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ; MST[STMT!TRAPSTMT]MSP[]
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ; MST[STMT!DELSTMT]MSP[]
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ; MST[C!ADD$C$-1$]MSP[]
if ( ! posixtime ( & newtime [ 0 ] . tv_sec , optarg , PDS_LEADING_YEAR | PDS_CENTURY | PDS_SECONDS ) ) error ( EXIT_FAILURE , 0 , _ ( lr_1 ) , quote ( optarg ) ) ; newtime [ 0 ] . tv_nsec = 0 ; MST[C!ADD$C$1$]MSP[]
newtime [ 1 ] = newtime [ 0 ] ; MST[STMT!TRAPSTMT]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; MST[C!CONSTVAL$0$]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$-1$]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; MST[C!ADD$C$1$]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; MST[CALL!SHUFFLEARGS$2$]MSP[] date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[STMT!TRAPSTMT]MSP[] break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[STMT!DELSTMT]MSP[] break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!CONSTVAL$0$]MSP[] break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; MST[C!ADD$C$1$]MSP[] break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; MST[STMT!TRAPSTMT]MSP[] case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; MST[STMT!DELSTMT]MSP[] case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[STMT!TRAPSTMT]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[STMT!DELSTMT]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$V1$@2$!ASSIGN$V1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHL$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!ABS$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!CONSTVAL$0$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITNOT$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!MUL$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHL$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!CONSTVAL$1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!NEG$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!NEG$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!EQ$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!ABS$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!NEQ$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!ADD$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!SUB$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!SUB$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!OPERAND$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITNOT$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITXOR$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITAND$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!BITSHR$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[BITOR$@1$V2$!ASSIGN$V2$@1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
main ( int argc , char * * argv ) { int c ; bool date_set = false ; MST[C!ADD$C$-1$]MSP[] bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
main ( int argc , char * * argv ) { int c ; bool date_set = false ; MST[C!ADD$C$1$]MSP[] bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; MST[STMT!TRAPSTMT]MSP[] char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[@!ABS$@$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[@!ABS$@$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[@!ABS$@$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[@!ABS$@$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[PADD$A1$@2$!OPERAND$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[PADD$A1$@2$!OPERAND$A1$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[CALL!SHUFFLEARGS$2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[CALL!SHUFFLEARGS$2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , MST[CALL!SHUFFLEARGS$2$]MSP[] time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; MST[STMT!DELSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } }
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[]
newtime [ 1 ] = newtime [ 0 ] ; date_set = true ; break; case TIME_OPTION : change_times |= XARGMATCH ( lr_14 , optarg , time_args , time_masks ) ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[]
if ( change_times == 0 ) MST[STMT!TRAPSTMT]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[@!ABS$@$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[@!ABS$@$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[C!ADD$C$-1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[C!ADD$C$1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[STMT!TRAPSTMT]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[STMT!DELSTMT]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[C!CONSTVAL$0$]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[C!ADD$C$-1$]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[C!ADD$C$1$]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; MST[STMT!TRAPSTMT]MSP[] if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[OR$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[OR$@1$@2$!AND$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[OR$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; MST[STMT!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( use_ref ) { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) MST[STMT!TRAPSTMT]MSP[] { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) MST[@!ABS$@$]MSP[] { struct stat ref_stats ;
if ( change_times == 0 ) change_times = CH_ATIME | CH_MTIME ; if ( date_set && ( use_ref || flex_date ) ) { error ( 0 , 0 , _ ( lr_15 ) ) ; usage ( EXIT_FAILURE ) ; } if ( use_ref ) MST[@!ABS$@$]MSP[] { struct stat ref_stats ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[STMT!TRAPSTMT]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[@!ABS$@$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[@!ABS$@$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[STMT!TRAPSTMT]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[@!ABS$@$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[C!ADD$C$-1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[C!ADD$C$1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[STMT!TRAPSTMT]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[@!ABS$@$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[C!ADD$C$-1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) MST[C!ADD$C$1$]MSP[] : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[STMT!DELSTMT]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[@!ABS$@$]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[] _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[STMT!TRAPSTMT]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[STMT!DELSTMT]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[]
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; MST[C!CONSTVAL$0$]MSP[] char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; MST[C!ADD$C$1$]MSP[] char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; MST[STMT!TRAPSTMT]MSP[] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[@!ABS$@$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[@!ABS$@$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[STMT!TRAPSTMT]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[C!CONSTVAL$0$]MSP[]
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; MST[STMT!DELSTMT]MSP[] initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[C!ADD$C$-1$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[C!ADD$C$-1$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[C!ADD$C$1$]MSP[]
if ( no_dereference ? lstat ( ref_file , & ref_stats ) : stat ( ref_file , & ref_stats ) ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( ref_file ) ) ; newtime [ 0 ] = get_stat_atime ( & ref_stats ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[STMT!TRAPSTMT]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[STMT!DELSTMT]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[]
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[@!ABS$@$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[@!ABS$@$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[STMT!TRAPSTMT]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[STMT!DELSTMT]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[]
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[C!ADD$C$-1$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[C!ADD$C$1$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] date_set = true ; if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; MST[STMT!TRAPSTMT]MSP[] if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
newtime [ 1 ] = get_stat_mtime ( & ref_stats ) ; date_set = true ; MST[STMT!DELSTMT]MSP[] if ( flex_date ) { if ( change_times & CH_ATIME ) get_reldate ( & newtime [ 0 ] , flex_date , & newtime [ 0 ] ) ; if ( change_times & CH_MTIME )
main ( int argc , char * * argv ) { int c ; bool date_set = false ; bool ok = true ; char const * flex_date = NULL ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[]
