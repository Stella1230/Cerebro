printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[S] } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!TRAPSTMT]MSP[N] }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!DELSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } }
if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[STMT!TRAPSTMT]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[@!ABS$@$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[C!CONSTVAL$0$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[C!ADD$C$-1$]MSP[S] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[STMT!DELSTMT]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[@!ABS$@$]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[C!CONSTVAL$0$]MSP[S] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[C!ADD$C$-1$]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[STMT!DELSTMT]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[C!ADD$C$-1$]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[C!ADD$C$1$]MSP[S] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[STMT!TRAPSTMT]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[STMT!DELSTMT]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[@!ABS$@$]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[S] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[@!ABS$@$]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[C!ADD$C$-1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[C!ADD$C$1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[STMT!TRAPSTMT]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[STMT!DELSTMT]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[@!ABS$@$]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[@!ABS$@$]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[C!ADD$C$-1$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[C!ADD$C$1$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[STMT!TRAPSTMT]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[STMT!DELSTMT]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[@!ABS$@$]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[C!ADD$C$-1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[C!ADD$C$1$]MSP[N]
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[C!CONSTVAL$0$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[C!ADD$C$1$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N] } else { while ( optind < argc ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!TRAPSTMT]MSP[N] else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!DELSTMT]MSP[N] else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] {
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[S] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[STMT!TRAPSTMT]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[@!ABS$@$]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[C!ADD$C$-1$]MSP[S] rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[C!ADD$C$1$]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[STMT!TRAPSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[STMT!DELSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[@!ABS$@$]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[C!ADD$C$-1$]MSP[S]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[C!ADD$C$1$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[C!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[C!ADD$C$1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PRIGHTDEC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PLEFTINC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PRIGHTINC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PLEFTDEC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
