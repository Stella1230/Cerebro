} if ( check_basic_portability MST[LE$@1$@2$!MUL$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!EQ$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!DIV$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!SUB$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!GT$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!DIV$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!CONSTVAL$0$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!NEG$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!LT$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!GE$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!ABS$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!GT$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!LT$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!OPERAND$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITNOT$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!GE$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!SUB$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!MOD$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) MST[STMT!TRAPSTMT]MSP[] maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) MST[@!ABS$@$]MSP[] maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) MST[@!ABS$@$]MSP[] maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[STMT!TRAPSTMT]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[STMT!DELSTMT]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[C!CONSTVAL$0$]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[C!ADD$C$-1$]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[C!ADD$C$1$]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[STMT!TRAPSTMT]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; MST[STMT!DELSTMT]MSP[] else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[STMT!TRAPSTMT]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[STMT!DELSTMT]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[@!ABS$@$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[@!ABS$@$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[C!CONSTVAL$0$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[C!ADD$C$-1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[C!ADD$C$1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!ADD$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!SUB$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!OPERAND$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!SUB$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!CONSTVAL$0$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; MST[C!ADD$C$-1$]MSP[] int optc ;
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[]
} if ( check_basic_portability || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[]
errno = 0 ; MST[STMT!TRAPSTMT]MSP[] size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; MST[STMT!DELSTMT]MSP[] size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; MST[C!ADD$C$1$]MSP[] int optc ;
errno = 0 ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; MST[C!ADD$C$-1$]MSP[] size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; MST[C!ADD$C$1$]MSP[] size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; MST[STMT!TRAPSTMT]MSP[] if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; MST[STMT!DELSTMT]MSP[] if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; MST[@!ABS$@$]MSP[] if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , MST[STMT!TRAPSTMT]MSP[] _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , MST[STMT!DELSTMT]MSP[] _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , MST[@!ABS$@$]MSP[] _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_15 ) , dir ) ; return false ; }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; MST[C!ADD$C$-1$]MSP[] }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
errno = 0 ; size = pathconf ( dir , _PC_PATH_MAX ) ; if ( size < 0 && errno != 0 ) { error ( 0 , errno , _ ( lr_15 ) , dir ) ; return false ; MST[STMT!DELSTMT]MSP[] }
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[C!CONSTVAL$0$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[C!ADD$C$-1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[C!ADD$C$1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!NEG$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!NEG$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!OPERAND$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!ABS$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!LE$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!CONSTVAL$0$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!GE$@1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!GT$@2$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[LT$@1$@2$!BITNOT$@1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[STMT!TRAPSTMT]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[@!ABS$@$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[@!ABS$@$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[@!ABS$@$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!ABS$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITNOT$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITOR$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!NEG$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!ABS$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!OPERAND$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!BITNOT$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!OPERAND$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!NEG$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[] { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; MST[STMT!TRAPSTMT]MSP[] unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; MST[STMT!DELSTMT]MSP[] unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; MST[@!ABS$@$]MSP[] unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!NEG$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!DELSTMT]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!TRAPSTMT]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!NEG$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!ABS$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; MST[C!ADD$C$1$]MSP[] error ( 0 , 0 , _ ( lr_16 ) ,
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[STMT!TRAPSTMT]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[STMT!DELSTMT]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[@!ABS$@$]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[@!ABS$@$]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
maxsize = MIN ( size , SSIZE_MAX ) ; } if ( maxsize <= filelen ) { unsigned long int len = filelen ; unsigned long int maxlen = maxsize - 1 ; error ( 0 , 0 , _ ( lr_16 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
maxlen , len , quote ( file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; MST[C!ADD$C$-1$]MSP[] } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } MST[STMT!TRAPSTMT]MSP[] check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; MST[STMT!TRAPSTMT]MSP[] if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; MST[@!ABS$@$]MSP[] if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[STMT!TRAPSTMT]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[OR$@1$@2$!OPERAND$@1$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[OR$@1$@2$!AND$@1$@2$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[OR$@1$@2$!OPERAND$@2$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[STMT!TRAPSTMT]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[@!ABS$@$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) MST[@!ABS$@$]MSP[] { for ( start = file ; * ( start = component_start ( start ) ) ; ) {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!TRAPSTMT]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!DELSTMT]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!TRAPSTMT]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[@!ABS$@$]MSP[] {
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[C!ADD$C$-1$]MSP[] {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( file ) ) ; return false ; } } check_component_lengths = check_basic_portability ; if ( ! check_component_lengths && ! file_exists ) { for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[C!ADD$C$1$]MSP[] {
size_t length = component_len ( start ) ; MST[STMT!TRAPSTMT]MSP[] if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; MST[@!ABS$@$]MSP[] if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[STMT!TRAPSTMT]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[@!ABS$@$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[@!ABS$@$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[C!CONSTVAL$0$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[C!ADD$C$-1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[C!ADD$C$1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!NEG$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!NEG$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!ABS$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; MST[STMT!TRAPSTMT]MSP[] break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; MST[STMT!DELSTMT]MSP[] break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; MST[C!CONSTVAL$0$]MSP[] break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; MST[C!ADD$C$1$]MSP[] break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; MST[STMT!TRAPSTMT]MSP[] } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; MST[STMT!DELSTMT]MSP[] } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[STMT!TRAPSTMT]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[STMT!DELSTMT]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[@!ABS$@$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } MST[STMT!TRAPSTMT]MSP[] } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } MST[STMT!DELSTMT]MSP[] } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } MST[STMT!TRAPSTMT]MSP[] if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) MST[STMT!TRAPSTMT]MSP[] { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) MST[@!ABS$@$]MSP[] { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) MST[@!ABS$@$]MSP[] { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; MST[STMT!TRAPSTMT]MSP[] size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; MST[C!CONSTVAL$0$]MSP[] size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; MST[C!ADD$C$-1$]MSP[] size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; MST[C!ADD$C$1$]MSP[] size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ;
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[STMT!TRAPSTMT]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[@!ABS$@$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[C!CONSTVAL$0$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[C!ADD$C$-1$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[C!ADD$C$-1$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[C!ADD$C$1$]MSP[]
size_t length = component_len ( start ) ; if ( NAME_MAX_MINIMUM < length ) { check_component_lengths = true ; break; } start += length ; } } if ( check_component_lengths ) { size_t name_max = NAME_MAX_MINIMUM ; size_t known_name_max = ( check_basic_portability ? _POSIX_NAME_MAX : 0 ) ; MST[C!ADD$C$1$]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!TRAPSTMT]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!DELSTMT]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[STMT!TRAPSTMT]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[@!ABS$@$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[C!ADD$C$-1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) MST[C!ADD$C$1$]MSP[] { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[STMT!TRAPSTMT]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[@!ABS$@$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[C!ADD$C$-1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) MST[C!ADD$C$1$]MSP[] name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[STMT!TRAPSTMT]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[STMT!DELSTMT]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[@!ABS$@$]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[STMT!TRAPSTMT]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; MST[STMT!DELSTMT]MSP[] else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ;
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!TRAPSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[@!ABS$@$]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!TRAPSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!DELSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!TRAPSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!DELSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!TRAPSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!TRAPSTMT]MSP[]
for ( start = file ; * ( start = component_start ( start ) ) ; ) { size_t length ; if ( known_name_max ) name_max = known_name_max ; else { long int len ; char const * dir = ( start == file ? lr_14 : file ) ; MST[STMT!DELSTMT]MSP[]
char c = * start ; MST[STMT!TRAPSTMT]MSP[] errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; MST[@!ABS$@$]MSP[] errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; MST[STMT!TRAPSTMT]MSP[] * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; MST[STMT!DELSTMT]MSP[] * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; MST[C!ADD$C$-1$]MSP[] * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; MST[C!ADD$C$1$]MSP[] * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; MST[STMT!TRAPSTMT]MSP[] len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; MST[C!ADD$C$-1$]MSP[] len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; MST[C!ADD$C$1$]MSP[] len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; MST[STMT!TRAPSTMT]MSP[] * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; MST[STMT!DELSTMT]MSP[] * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; MST[@!ABS$@$]MSP[] * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; MST[STMT!TRAPSTMT]MSP[] if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; MST[STMT!DELSTMT]MSP[] if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[] if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; MST[@!ABS$@$]MSP[] if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[STMT!TRAPSTMT]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[@!ABS$@$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[@!ABS$@$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[C!ADD$C$-1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[C!ADD$C$1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!ABS$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!BITNOT$@2$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[C!CONSTVAL$0$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[C!ADD$C$-1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[C!ADD$C$1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!NEG$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!OPERAND$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!ABS$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!LE$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!GE$@1$@2$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!GT$@2$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[LT$@1$@2$!BITNOT$@1$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] else switch ( errno ) {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[@!ABS$@$]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!TRAPSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; MST[STMT!DELSTMT]MSP[] else switch ( errno ) {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[STMT!TRAPSTMT]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[SWITCH!REMOVECASES$1$]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[SWITCH!REMOVECASES$1$]MSP[] {
char c = * start ; errno = 0 ; * start = '\0' ; len = pathconf ( dir , _PC_NAME_MAX ) ; * start = c ; if ( 0 <= len ) name_max = MIN ( len , SSIZE_MAX ) ; else switch ( errno ) MST[@!ABS$@$]MSP[] {
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; MST[STMT!TRAPSTMT]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; MST[STMT!DELSTMT]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; MST[@!ABS$@$]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; MST[C!CONSTVAL$0$]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; MST[C!ADD$C$-1$]MSP[] break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; MST[STMT!TRAPSTMT]MSP[] case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; MST[STMT!DELSTMT]MSP[] case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; MST[STMT!TRAPSTMT]MSP[] break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; MST[STMT!DELSTMT]MSP[] break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; MST[@!ABS$@$]MSP[] break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; MST[STMT!TRAPSTMT]MSP[] default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; MST[STMT!DELSTMT]MSP[] default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; MST[STMT!TRAPSTMT]MSP[] error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; MST[C!ADD$C$-1$]MSP[] error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; MST[C!ADD$C$1$]MSP[] error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; MST[STMT!TRAPSTMT]MSP[] * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; MST[STMT!DELSTMT]MSP[] * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; MST[@!ABS$@$]MSP[] * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] * start = c ; return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; MST[STMT!TRAPSTMT]MSP[] return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[] { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] return false ; } } length = component_len ( start ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; MST[STMT!TRAPSTMT]MSP[] check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; MST[@!ABS$@$]MSP[] return false ; } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; MST[STMT!TRAPSTMT]MSP[] } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; MST[STMT!DELSTMT]MSP[] } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; MST[C!ADD$C$-1$]MSP[] } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; MST[STMT!TRAPSTMT]MSP[] } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; MST[STMT!DELSTMT]MSP[] } } length = component_len ( start ) ;
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ; MST[STMT!TRAPSTMT]MSP[]
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ; MST[STMT!DELSTMT]MSP[]
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[]
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[]
case 0 : name_max = SIZE_MAX ; break; case ENOENT : known_name_max = name_max ; break; default: * start = '\0' ; error ( 0 , errno , lr_13 , dir ) ; * start = c ; return false ; } } length = component_len ( start ) ; MST[@!ABS$@$]MSP[]
if ( name_max < length ) MST[STMT!TRAPSTMT]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[@!ABS$@$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[@!ABS$@$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[@!ABS$@$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!NEG$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!NEG$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!ABS$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!ABS$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
if ( name_max < length ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; MST[STMT!TRAPSTMT]MSP[] unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; MST[@!ABS$@$]MSP[] unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; MST[STMT!TRAPSTMT]MSP[] char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; MST[@!ABS$@$]MSP[] char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[STMT!TRAPSTMT]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[STMT!DELSTMT]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[@!ABS$@$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[@!ABS$@$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] start [ len ] = '\0' ; error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[STMT!TRAPSTMT]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[STMT!DELSTMT]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[C!ADD$C$-1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[C!ADD$C$1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] error ( 0 , 0 , _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[@!ABS$@$]MSP[] _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_17 lr_18 ) ,
if ( name_max < length ) { unsigned long int len = length ; unsigned long int maxlen = name_max ; char c = start [ len ] ; start [ len ] = '\0' ; error ( 0 , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_17 lr_18 ) ,
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[STMT!TRAPSTMT]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[STMT!DELSTMT]MSP[] return false ; } start += length ; } } return true ; }
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; MST[C!CONSTVAL$0$]MSP[] check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; MST[C!ADD$C$1$]MSP[] check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[@!ABS$@$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[@!ABS$@$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] return false ; } start += length ; } } return true ; }
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; MST[STMT!TRAPSTMT]MSP[] break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] return false ; } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; MST[STMT!TRAPSTMT]MSP[] } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; MST[C!ADD$C$-1$]MSP[] } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; MST[STMT!TRAPSTMT]MSP[] } start += length ; } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; MST[STMT!DELSTMT]MSP[] } start += length ; } } return true ; }
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; MST[STMT!DELSTMT]MSP[] break; case 'p' : check_basic_portability = true ; break;
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[STMT!TRAPSTMT]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[STMT!DELSTMT]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[@!ABS$@$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] } } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } MST[STMT!TRAPSTMT]MSP[] } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } MST[STMT!DELSTMT]MSP[] } return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } MST[STMT!TRAPSTMT]MSP[] return true ; }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; MST[STMT!TRAPSTMT]MSP[] }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; MST[STMT!DELSTMT]MSP[] }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; MST[C!CONSTVAL$0$]MSP[] }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; MST[STMT!TRAPSTMT]MSP[] }
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; } MST[STMT!TRAPSTMT]MSP[]
maxlen , len , quote ( start ) ) ; start [ len ] = c ; return false ; } start += length ; } } return true ; } MST[STMT!DELSTMT]MSP[]
quote ( file ) ) ; return false ; } return true ; } static bool portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] ( lr_7 lr_8 lr_9 lr_10 ) ) ;
quote ( file ) ) ; return false ; } return true ; } static bool portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , MST[@!ABS$@$]MSP[] ( lr_7 lr_8 lr_9 lr_10 ) ) ;
quote ( file ) ) ; return false ; } return true ; } static bool portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , MST[CALL!SHUFFLEARGS$2$]MSP[] ( lr_7 lr_8 lr_9 lr_10 ) ) ;
char const * invalid = file + validlen ; MST[STMT!TRAPSTMT]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[STMT!DELSTMT]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[@!ABS$@$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[STMT!TRAPSTMT]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[@!ABS$@$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[C!ADD$C$-1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) MST[C!ADD$C$1$]MSP[] { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[STMT!TRAPSTMT]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[STMT!DELSTMT]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[C!CONSTVAL$0$]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[C!ADD$C$-1$]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[C!ADD$C$-1$]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; MST[C!ADD$C$1$]MSP[] size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!DELSTMT]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!ABS$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_11 ) ,
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!DELSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[@!ABS$@$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[@!ABS$@$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[C!CONSTVAL$0$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[C!ADD$C$-1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[C!ADD$C$1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!CONSTVAL$1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!ABS$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!ADD$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!NEQ$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!MOD$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!MUL$@1$@2$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; MST[C!CONSTVAL$0$]MSP[] break; case 'p' : check_basic_portability = true ; break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!EQ$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!DIV$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!SUB$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!GT$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!DIV$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITNOT$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!CONSTVAL$0$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITOR$@1$@2$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; MST[C!ADD$C$1$]MSP[] break; case 'p' : check_basic_portability = true ; break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!LT$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!GE$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!GT$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!LT$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!BITAND$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!OPERAND$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!GE$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!NEG$@1$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; MST[STMT!TRAPSTMT]MSP[] case 'p' : check_basic_portability = true ; break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!SUB$@2$@1$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[LE$@1$@2$!MOD$@1$@2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!DELSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; MST[STMT!DELSTMT]MSP[] case 'p' : check_basic_portability = true ; break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; MST[STMT!TRAPSTMT]MSP[] break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[@!ABS$@$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!DELSTMT]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; MST[STMT!DELSTMT]MSP[] break;
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!TRAPSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[STMT!DELSTMT]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[@!ABS$@$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
char const * invalid = file + validlen ; if ( * invalid ) { mbstate_t mbstate = { 0 , } ; size_t charlen = mbrlen ( invalid , filelen - validlen , & mbstate ) ; error ( 0 , 0 , _ ( lr_11 ) , MST[CALL!SHUFFLEARGS$2$]MSP[]
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] } return true ; } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; MST[C!ADD$C$-1$]MSP[] } return true ; } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } return true ; } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[STMT!DELSTMT]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[C!CONSTVAL$0$]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quotearg_n_style_mem ( 1 , locale_quoting_style , invalid , ( charlen <= MB_LEN_MAX ? charlen : 1 ) ) , quote_n ( 0 , file ) ) ; return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } static char * _GL_ATTRIBUTE_PURE component_start ( char * f ) {
quote ( file ) ) ; return false ; } return true ; } static bool MST[STMT!TRAPSTMT]MSP[] portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , ( lr_7 lr_8 lr_9 lr_10 ) ) ;
quote ( file ) ) ; return false ; } return true ; } static bool MST[STMT!DELSTMT]MSP[] portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , ( lr_7 lr_8 lr_9 lr_10 ) ) ;
quote ( file ) ) ; return false ; } return true ; } static bool MST[@!ABS$@$]MSP[] portable_chars_only ( char const * file , size_t filelen ) { size_t validlen = strspn ( file , ( lr_7 lr_8 lr_9 lr_10 ) ) ;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; MST[C!CONSTVAL$0$]MSP[] break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; MST[C!ADD$C$1$]MSP[] break;
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break; MST[STMT!TRAPSTMT]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_4 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case PORTABILITY_OPTION : check_basic_portability = true ; check_extra_portability = true ; break; case 'p' : check_basic_portability = true ; break; MST[STMT!DELSTMT]MSP[]
case 'P' : check_extra_portability = true ; MST[STMT!TRAPSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; MST[STMT!DELSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; MST[C!CONSTVAL$0$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; MST[C!ADD$C$1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; MST[STMT!DELSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!TRAPSTMT]MSP[] main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; int optc ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!DELSTMT]MSP[] main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; int optc ;
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
case 'P' : check_extra_portability = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_5 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[STMT!DELSTMT]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!NEG$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!ABS$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!NEG$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!ABS$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] bool check_basic_portability = false ; bool check_extra_portability = false ; int optc ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[@!ABS$@$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[C!ADD$C$-1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[C!ADD$C$1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$A1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[P!PRIGHTDEC$P$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[P!PLEFTINC$P$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[P!PRIGHTINC$P$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[P!PLEFTDEC$P$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[CALL!SHUFFLEARGS$2$]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[] check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[C!CONSTVAL$0$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[C!ADD$C$1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!ABS$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[] ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
for (; optind < argc ; ++ optind ) ok &= validate_file_name ( argv [ optind ] , check_basic_portability , check_extra_portability ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] } static bool no_leading_hyphen ( char const * file ) { char const * p ;
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; MST[STMT!TRAPSTMT]MSP[] char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) )
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; MST[C!CONSTVAL$0$]MSP[] bool check_basic_portability = false ; bool check_extra_portability = false ; int optc ;
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) )
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; MST[C!ADD$C$1$]MSP[] bool check_basic_portability = false ; bool check_extra_portability = false ; int optc ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; MST[STMT!TRAPSTMT]MSP[] bool check_extra_portability = false ; int optc ;
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; MST[@!ABS$@$]MSP[] char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) )
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; MST[STMT!TRAPSTMT]MSP[] if ( check_extra_portability && ! no_leading_hyphen ( file ) )
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] if ( check_extra_portability && ! no_leading_hyphen ( file ) )
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; MST[C!ADD$C$-1$]MSP[] if ( check_extra_portability && ! no_leading_hyphen ( file ) )
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; MST[C!ADD$C$1$]MSP[] if ( check_extra_portability && ! no_leading_hyphen ( file ) )
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) ) MST[STMT!TRAPSTMT]MSP[]
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) ) MST[@!ABS$@$]MSP[]
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) ) MST[@!ABS$@$]MSP[]
return len ; } static bool validate_file_name ( char * file , bool check_basic_portability , bool check_extra_portability ) { size_t filelen = strlen ( file ) ; char * start ; bool check_component_lengths ; bool file_exists = false ; if ( check_extra_portability && ! no_leading_hyphen ( file ) ) MST[STMT!TRAPSTMT]MSP[]
return false ; MST[STMT!TRAPSTMT]MSP[] if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; MST[STMT!DELSTMT]MSP[] if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; MST[C!ADD$C$-1$]MSP[] if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; MST[STMT!TRAPSTMT]MSP[] if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; MST[STMT!DELSTMT]MSP[] if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[STMT!TRAPSTMT]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[@!ABS$@$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[@!ABS$@$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[OR$@1$@2$!OPERAND$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[OR$@1$@2$!AND$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[OR$@1$@2$!OPERAND$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[STMT!TRAPSTMT]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[@!ABS$@$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[STMT!TRAPSTMT]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[@!ABS$@$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[@!ABS$@$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[C!ADD$C$-1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[C!ADD$C$1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!NEG$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!ABS$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; MST[STMT!TRAPSTMT]MSP[] return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; MST[STMT!DELSTMT]MSP[] return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[] bool check_extra_portability = false ; int optc ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; MST[C!ADD$C$-1$]MSP[] } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) MST[STMT!TRAPSTMT]MSP[] { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) MST[@!ABS$@$]MSP[] { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) MST[@!ABS$@$]MSP[] { if ( ! portable_chars_only ( file , filelen ) ) return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) MST[STMT!TRAPSTMT]MSP[] return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) MST[@!ABS$@$]MSP[] return false ;
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ; MST[STMT!TRAPSTMT]MSP[]
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ; MST[STMT!DELSTMT]MSP[]
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ; MST[C!ADD$C$-1$]MSP[]
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ; MST[STMT!TRAPSTMT]MSP[]
return false ; if ( ( check_basic_portability || check_extra_portability ) && filelen == 0 ) { error ( 0 , 0 , _ ( lr_12 ) ) ; return false ; } if ( check_basic_portability ) { if ( ! portable_chars_only ( file , filelen ) ) return false ; MST[STMT!DELSTMT]MSP[]
} MST[STMT!TRAPSTMT]MSP[] else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} MST[STMT!DELSTMT]MSP[] else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[STMT!TRAPSTMT]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[@!ABS$@$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[@!ABS$@$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[C!ADD$C$-1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[C!ADD$C$1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[STMT!TRAPSTMT]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[STMT!DELSTMT]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[C!CONSTVAL$0$]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[C!ADD$C$1$]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[STMT!TRAPSTMT]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; MST[STMT!DELSTMT]MSP[] else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; MST[C!ADD$C$-1$]MSP[] bool check_extra_portability = false ; int optc ;
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; MST[C!ADD$C$1$]MSP[] bool check_extra_portability = false ; int optc ;
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; MST[STMT!TRAPSTMT]MSP[] int optc ;
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[OR$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[OR$@1$@2$!AND$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[OR$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , errno , lr_13 , file ) ; return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; MST[STMT!TRAPSTMT]MSP[] return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; MST[STMT!DELSTMT]MSP[] return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; MST[@!ABS$@$]MSP[] return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; MST[STMT!DELSTMT]MSP[] }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; MST[C!ADD$C$-1$]MSP[] }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
} else { struct stat st ; if ( lstat ( file , & st ) == 0 ) file_exists = true ; else if ( errno != ENOENT || filelen == 0 ) { error ( 0 , errno , lr_13 , file ) ; return false ; MST[STMT!DELSTMT]MSP[] }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool ok = true ; bool check_basic_portability = false ; bool check_extra_portability = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] int optc ;
} if ( check_basic_portability MST[STMT!TRAPSTMT]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[@!ABS$@$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[@!ABS$@$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[STMT!TRAPSTMT]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[@!ABS$@$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[STMT!TRAPSTMT]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[@!ABS$@$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[@!ABS$@$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[C!CONSTVAL$0$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[C!ADD$C$-1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[C!ADD$C$1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!CONSTVAL$1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!ADD$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!MOD$@2$@1$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
} if ( check_basic_portability MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] || ( ! file_exists && PATH_MAX_MINIMUM <= filelen ) ) { size_t maxsize ; if ( check_basic_portability ) maxsize = _POSIX_PATH_MAX ; else { long int size ; char const * dir = ( * file == '/' ? lr_7 : lr_14 ) ;
