bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[@!ABS$@$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[@!ABS$@$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[@!ABS$@$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[@!ABS$@$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[C!CONSTVAL$0$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[C!CONSTVAL$0$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[C!ADD$C$-1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[C!ADD$C$1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[C!ADD$C$1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!NEG$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!NEG$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!ABS$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[STMT!TRAPSTMT]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[@!ABS$@$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!ABS$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
gid_t gid = - 1 ; MST[@!ABS$@$]MSP[] uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITOR$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!NEG$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
gid_t gid = - 1 ; MST[C!CONSTVAL$0$]MSP[] uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!ABS$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
gid_t gid = - 1 ; MST[C!ADD$C$-1$]MSP[] uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!NEG$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[] error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; MST[STMT!TRAPSTMT]MSP[] else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; MST[STMT!DELSTMT]MSP[] else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; MST[STMT!TRAPSTMT]MSP[] else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; MST[STMT!DELSTMT]MSP[] else
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
gid_t gid = - 1 ; uid_t required_uid = - 1 ; MST[STMT!TRAPSTMT]MSP[] gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
gid_t gid = - 1 ; uid_t required_uid = - 1 ; MST[STMT!DELSTMT]MSP[] gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[C!ADD$C$1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) MST[STMT!TRAPSTMT]MSP[] { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) )
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[STMT!TRAPSTMT]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[@!ABS$@$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[C!ADD$C$-1$]MSP[]
error ( 0 , 0 , _ ( lr_18 ) , quote ( argv [ argc - 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( reference_file ) { struct stat ref_stats ; if ( stat ( reference_file , & ref_stats ) ) MST[C!ADD$C$1$]MSP[]
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!TRAPSTMT]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!DELSTMT]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[@!ABS$@$]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[CALL!SHUFFLEARGS$2$]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[CALL!SHUFFLEARGS$2$]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!TRAPSTMT]MSP[] main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; MST[STMT!TRAPSTMT]MSP[] gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; MST[@!ABS$@$]MSP[] gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; MST[STMT!TRAPSTMT]MSP[] chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; MST[STMT!DELSTMT]MSP[] chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; MST[@!ABS$@$]MSP[] chopt . user_name = uid_to_name ( ref_stats . st_uid ) ;
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ; MST[STMT!TRAPSTMT]MSP[]
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ; MST[STMT!DELSTMT]MSP[]
error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( reference_file ) ) ; uid = ref_stats . st_uid ; gid = ref_stats . st_gid ; chopt . user_name = uid_to_name ( ref_stats . st_uid ) ; MST[@!ABS$@$]MSP[]
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; MST[STMT!TRAPSTMT]MSP[] } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; MST[STMT!DELSTMT]MSP[] } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; MST[A!CONSTVAL$0$]MSP[] } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; MST[@!ABS$@$]MSP[] } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } MST[STMT!TRAPSTMT]MSP[] else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } MST[STMT!DELSTMT]MSP[] else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[STMT!TRAPSTMT]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[STMT!DELSTMT]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[A!CONSTVAL$0$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[A!CONSTVAL$0$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[A!CONSTVAL$0$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[A!CONSTVAL$0$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[@!ABS$@$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[@!ABS$@$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$A1$@2$!OPERAND$@2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$A1$@2$!OPERAND$A1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
gid_t gid = - 1 ; uid_t required_uid = - 1 ; MST[@!ABS$@$]MSP[] gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[P!PRIGHTDEC$P$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[P!PLEFTINC$P$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[P!PRIGHTINC$P$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[P!PLEFTDEC$P$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[CALL!SHUFFLEARGS$2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , MST[CALL!SHUFFLEARGS$2$]MSP[] & chopt . user_name , & chopt . group_name ) ; if ( e )
gid_t gid = - 1 ; uid_t required_uid = - 1 ; MST[C!CONSTVAL$0$]MSP[] gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e ) MST[STMT!TRAPSTMT]MSP[]
chopt . group_name = gid_to_name ( ref_stats . st_gid ) ; } else { const char * e = parse_user_spec ( argv [ optind ] , & uid , & gid , & chopt . user_name , & chopt . group_name ) ; if ( e ) MST[@!ABS$@$]MSP[]
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; MST[C!ADD$C$-1$]MSP[] gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; MST[STMT!TRAPSTMT]MSP[] int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[] if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[STMT!TRAPSTMT]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[A!CONSTVAL$0$]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[@!ABS$@$]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[STMT!TRAPSTMT]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[A!CONSTVAL$0$]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) MST[@!ABS$@$]MSP[] chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; MST[STMT!TRAPSTMT]MSP[] optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; MST[STMT!DELSTMT]MSP[] optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; MST[A!CONSTVAL$0$]MSP[] optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; MST[STMT!TRAPSTMT]MSP[] optind ++ ; }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[STMT!TRAPSTMT]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[@!ABS$@$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[@!ABS$@$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[C!CONSTVAL$0$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[C!ADD$C$1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] }
error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( argv [ optind ] ) ) ; if ( ! chopt . user_name && chopt . group_name ) chopt . user_name = bad_cast ( lr_13 ) ; optind ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] }
if ( chopt . recurse && preserve_root ) MST[STMT!TRAPSTMT]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[@!ABS$@$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[@!ABS$@$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[STMT!TRAPSTMT]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[@!ABS$@$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) MST[@!ABS$@$]MSP[] { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; MST[STMT!TRAPSTMT]MSP[] if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; MST[STMT!DELSTMT]MSP[] if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; MST[A!CONSTVAL$0$]MSP[] if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) MST[STMT!TRAPSTMT]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) MST[A!CONSTVAL$0$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[STMT!TRAPSTMT]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[STMT!DELSTMT]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[@!ABS$@$]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , MST[STMT!TRAPSTMT]MSP[] quote ( lr_20 ) ) ; }
if ( chopt . recurse && preserve_root ) { static struct dev_ino dev_ino_buf ; chopt . root_dev_ino = get_root_dev_ino ( & dev_ino_buf ) ; if ( chopt . root_dev_ino == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_19 ) , quote ( lr_20 ) ) ; } MST[STMT!TRAPSTMT]MSP[]
bit_flags |= FTS_DEFER_STAT ; MST[STMT!TRAPSTMT]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[STMT!DELSTMT]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$V1$@2$!ASSIGN$V1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITSHL$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!ABS$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!CONSTVAL$0$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITNOT$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!MUL$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITSHL$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!CONSTVAL$1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!NEG$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!NEG$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!EQ$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!ABS$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!NEQ$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!ADD$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!SUB$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!SUB$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!OPERAND$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITNOT$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITXOR$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITAND$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GE$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GT$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LE$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GT$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!MOD$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LE$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!BITSHR$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!MOD$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!DIV$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LT$@2$@1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!GE$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!LT$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[BITOR$@1$@2$!DIV$@1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[@!ABS$@$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[@!ABS$@$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[C!ADD$C$-1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; MST[C!ADD$C$1$]MSP[] ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; MST[@!ABS$@$]MSP[] int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[STMT!TRAPSTMT]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[STMT!DELSTMT]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; MST[C!CONSTVAL$0$]MSP[] int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; MST[C!ADD$C$-1$]MSP[] int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[A!CONSTVAL$0$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[A!CONSTVAL$0$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; MST[STMT!TRAPSTMT]MSP[] int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[@!ABS$@$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$A1$@2$!OPERAND$@2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$A1$@2$!OPERAND$A1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[P!PRIGHTDEC$P$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[P!PLEFTINC$P$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[P!PRIGHTINC$P$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[P!PLEFTDEC$P$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , MST[CALL!SHUFFLEARGS$2$]MSP[] uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; MST[STMT!TRAPSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[] }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[] }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
bit_flags |= FTS_DEFER_STAT ; ok = chown_files ( argv + optind , bit_flags , uid , gid , required_uid , required_gid , & chopt ) ; chopt_free ( & chopt ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[] int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; MST[C!CONSTVAL$0$]MSP[] int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$-1$]MSP[] int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$1$]MSP[] int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; MST[STMT!TRAPSTMT]MSP[] struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; MST[@!ABS$@$]MSP[] struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; MST[C!CONSTVAL$0$]MSP[] struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
gid_t gid = - 1 ; uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; MST[C!ADD$C$-1$]MSP[] struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[] setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[] chopt_init ( & chopt ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ; MST[STMT!TRAPSTMT]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_13 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; chopt_init ( & chopt ) ; MST[STMT!DELSTMT]MSP[]
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[STMT!TRAPSTMT]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[A!CONSTVAL$0$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[@!ABS$@$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[@!ABS$@$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[@!ABS$@$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[@!ABS$@$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[C!ADD$C$-1$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[P!PRIGHTDEC$P$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[P!PLEFTINC$P$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[P!PRIGHTINC$P$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) MST[P!PLEFTDEC$P$]MSP[] != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[] { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[STMT!TRAPSTMT]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[STMT!DELSTMT]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[C!CONSTVAL$0$]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[C!ADD$C$-1$]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; MST[C!ADD$C$1$]MSP[] break; case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; MST[STMT!TRAPSTMT]MSP[] case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; MST[STMT!DELSTMT]MSP[] case 'L' : bit_flags = FTS_LOGICAL ; break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[STMT!TRAPSTMT]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[STMT!DELSTMT]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[C!CONSTVAL$0$]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[C!ADD$C$-1$]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; MST[C!ADD$C$1$]MSP[] break; case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; MST[STMT!TRAPSTMT]MSP[] case 'P' :
while ( ( optc = getopt_long ( argc , argv , lr_14 , long_options , NULL ) ) != - 1 ) { switch ( optc ) { case 'H' : bit_flags = FTS_COMFOLLOW | FTS_PHYSICAL ; break; case 'L' : bit_flags = FTS_LOGICAL ; break; MST[STMT!DELSTMT]MSP[] case 'P' :
bit_flags = FTS_PHYSICAL ; MST[STMT!TRAPSTMT]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; MST[STMT!DELSTMT]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; MST[C!CONSTVAL$0$]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$-1$]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$1$]MSP[] break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; MST[STMT!TRAPSTMT]MSP[] case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; MST[STMT!DELSTMT]MSP[] case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; MST[STMT!TRAPSTMT]MSP[] break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; MST[STMT!DELSTMT]MSP[] break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] uid_t uid = - 1 ;
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; MST[C!ADD$C$-1$]MSP[] break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; MST[C!ADD$C$1$]MSP[] break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; MST[STMT!TRAPSTMT]MSP[] case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; MST[STMT!DELSTMT]MSP[] case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; MST[STMT!TRAPSTMT]MSP[] break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; MST[STMT!DELSTMT]MSP[] break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; MST[C!CONSTVAL$0$]MSP[] break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; MST[C!ADD$C$1$]MSP[] break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; MST[STMT!TRAPSTMT]MSP[] case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; MST[STMT!DELSTMT]MSP[] case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; MST[STMT!TRAPSTMT]MSP[] break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; MST[STMT!DELSTMT]MSP[] break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; MST[C!ADD$C$-1$]MSP[] break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; MST[C!ADD$C$1$]MSP[] break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; MST[STMT!TRAPSTMT]MSP[] case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; MST[STMT!DELSTMT]MSP[] case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; MST[STMT!TRAPSTMT]MSP[] break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; MST[STMT!DELSTMT]MSP[] break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[] break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; MST[C!CONSTVAL$0$]MSP[] break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; MST[C!ADD$C$1$]MSP[] break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; MST[STMT!TRAPSTMT]MSP[] case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; MST[STMT!DELSTMT]MSP[] case REFERENCE_FILE_OPTION : reference_file = optarg ; break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; MST[STMT!TRAPSTMT]MSP[] break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; MST[STMT!DELSTMT]MSP[] break; case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; MST[STMT!TRAPSTMT]MSP[] case FROM_OPTION : {
bit_flags = FTS_PHYSICAL ; break; case 'h' : dereference = 0 ; break; case DEREFERENCE_OPTION : dereference = 1 ; break; case NO_PRESERVE_ROOT : preserve_root = false ; break; case PRESERVE_ROOT : preserve_root = true ; break; case REFERENCE_FILE_OPTION : reference_file = optarg ; break; MST[STMT!DELSTMT]MSP[] case FROM_OPTION : {
const char * e = parse_user_spec ( optarg , MST[STMT!TRAPSTMT]MSP[] & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; } case 'R' :
const char * e = parse_user_spec ( optarg , MST[STMT!DELSTMT]MSP[] & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; } case 'R' :
const char * e = parse_user_spec ( optarg , MST[CALL!SHUFFLEARGS$2$]MSP[] & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) MST[STMT!TRAPSTMT]MSP[] error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[STMT!DELSTMT]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[] break; } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; MST[STMT!TRAPSTMT]MSP[] } case 'R' :
const char * e = parse_user_spec ( optarg , & required_uid , & required_gid , NULL , NULL ) ; if ( e ) error ( EXIT_FAILURE , 0 , lr_15 , e , quote ( optarg ) ) ; break; MST[STMT!DELSTMT]MSP[] } case 'R' :
chopt . recurse = true ; MST[STMT!TRAPSTMT]MSP[] break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; MST[STMT!DELSTMT]MSP[] break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; MST[C!CONSTVAL$0$]MSP[] break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; MST[C!ADD$C$1$]MSP[] break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; MST[STMT!TRAPSTMT]MSP[] case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; MST[STMT!DELSTMT]MSP[] case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; MST[STMT!TRAPSTMT]MSP[] break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; MST[STMT!DELSTMT]MSP[] break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; MST[C!ADD$C$-1$]MSP[] uid_t uid = - 1 ;
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; MST[C!ADD$C$1$]MSP[] uid_t uid = - 1 ;
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; MST[C!CONSTVAL$0$]MSP[] break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; MST[C!ADD$C$1$]MSP[] break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; MST[STMT!TRAPSTMT]MSP[] case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; MST[STMT!DELSTMT]MSP[] case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; MST[STMT!TRAPSTMT]MSP[] break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; MST[STMT!DELSTMT]MSP[] break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ; MST[STMT!TRAPSTMT]MSP[]
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[] break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[]
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; MST[C!CONSTVAL$0$]MSP[] break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; MST[C!ADD$C$1$]MSP[] break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; MST[STMT!TRAPSTMT]MSP[] case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; MST[STMT!DELSTMT]MSP[] case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; MST[STMT!TRAPSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; MST[STMT!DELSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; MST[C!ADD$C$-1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; MST[C!ADD$C$1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; MST[STMT!DELSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default:
chopt . recurse = true ; break; case 'c' : chopt . verbosity = V_changes_only ; break; case 'f' : chopt . force_silent = true ; break; case 'v' : chopt . verbosity = V_high ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default:
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[] if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[] if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) MST[STMT!TRAPSTMT]MSP[] { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) MST[@!ABS$@$]MSP[] { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) MST[@!ABS$@$]MSP[] { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[STMT!TRAPSTMT]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[@!ABS$@$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[@!ABS$@$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[C!CONSTVAL$0$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[C!ADD$C$-1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[C!ADD$C$1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[STMT!TRAPSTMT]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[C!CONSTVAL$0$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[C!ADD$C$1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[] _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_16 ) ) ; dereference = 0 ; } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; MST[STMT!TRAPSTMT]MSP[] } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; MST[STMT!DELSTMT]MSP[] } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } } else {
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ; MST[@!ABS$@$]MSP[]
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ; MST[C!CONSTVAL$0$]MSP[]
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; MST[C!ADD$C$-1$]MSP[] } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; MST[C!ADD$C$1$]MSP[] } } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } MST[STMT!TRAPSTMT]MSP[] } else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } MST[STMT!TRAPSTMT]MSP[] else {
usage ( EXIT_FAILURE ) ; } } if ( chopt . recurse ) { if ( bit_flags == FTS_PHYSICAL ) { if ( dereference == 1 ) error ( EXIT_FAILURE , 0 , _ ( lr_16 ) ) ; dereference = 0 ; } } MST[STMT!DELSTMT]MSP[] else {
printf ( _ ( lr_12 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { bool preserve_root = false ; uid_t uid = - 1 ; MST[C!ADD$C$-1$]MSP[]
bit_flags = FTS_PHYSICAL ; MST[STMT!TRAPSTMT]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[STMT!DELSTMT]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
gid_t gid = - 1 ; MST[STMT!TRAPSTMT]MSP[] uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags = FTS_PHYSICAL ; MST[C!CONSTVAL$0$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$-1$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; MST[C!ADD$C$1$]MSP[] } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[STMT!TRAPSTMT]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[STMT!DELSTMT]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!ABS$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
gid_t gid = - 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] uid_t required_uid = - 1 ; gid_t required_gid = - 1 ; int bit_flags = FTS_PHYSICAL ; int dereference = - 1 ; struct Chown_option chopt ; bool ok ; int optc ; initialize_main ( & argc , & argv ) ;
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[C!ADD$C$-1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; MST[C!ADD$C$1$]MSP[] if ( argc - optind < ( reference_file ? 1 : 2 ) ) { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!NEG$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!OPERAND$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!TRAPSTMT]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!NEG$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!ABS$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!ABS$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
bit_flags = FTS_PHYSICAL ; } chopt . affect_symlink_referent = ( dereference != 0 ) ; if ( argc - optind < ( reference_file ? 1 : 2 ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { if ( argc <= optind ) error ( 0 , 0 , _ ( lr_17 ) ) ; else
