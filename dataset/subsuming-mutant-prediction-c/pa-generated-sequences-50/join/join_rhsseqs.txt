case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[A!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[A!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PRIGHTDEC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PLEFTINC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
setlocale ( LC_ALL , lr_10 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PRIGHTINC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PLEFTDEC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[STMT!TRAPSTMT]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[STMT!TRAPSTMT]MSP[N] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[@!ABS$@$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[@!ABS$@$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[STMT!DELSTMT]MSP[N] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$-1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!CONSTVAL$0$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$-1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[STMT!TRAPSTMT]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[STMT!DELSTMT]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[@!ABS$@$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[@!ABS$@$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[C!CONSTVAL$0$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[C!ADD$C$1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[STMT!TRAPSTMT]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[STMT!DELSTMT]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[@!ABS$@$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[C!CONSTVAL$0$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[C!ADD$C$1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } MST[STMT!TRAPSTMT]MSP[N] else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } MST[STMT!DELSTMT]MSP[N] else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[STMT!TRAPSTMT]MSP[N] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[STMT!DELSTMT]MSP[S] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[@!ABS$@$]MSP[N] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break; MST[STMT!TRAPSTMT]MSP[N]
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break; MST[STMT!DELSTMT]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[STMT!TRAPSTMT]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[@!ABS$@$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[@!ABS$@$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[C!ADD$C$-1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[C!ADD$C$1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!TRAPSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!DELSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[C!CONSTVAL$0$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[C!ADD$C$1$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!TRAPSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!DELSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; MST[STMT!DELSTMT]MSP[N] optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[N] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[STMT!DELSTMT]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!CONSTVAL$0$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$-1$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$1$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; MST[STMT!TRAPSTMT]MSP[N] case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; MST[STMT!DELSTMT]MSP[N] case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[STMT!TRAPSTMT]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[STMT!DELSTMT]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[S] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; MST[STMT!TRAPSTMT]MSP[N] print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[@!ABS$@$]MSP[S] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[C!ADD$C$-1$]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[C!ADD$C$1$]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[STMT!TRAPSTMT]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; MST[STMT!DELSTMT]MSP[S] print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[@!ABS$@$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[C!ADD$C$-1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[C!ADD$C$1$]MSP[N]
newtab = '\n' ; MST[STMT!TRAPSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[STMT!TRAPSTMT]MSP[N] seen_unpairable = false ;
newtab = '\n' ; MST[STMT!DELSTMT]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!CONSTVAL$0$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!ADD$C$-1$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!ADD$C$1$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[STMT!TRAPSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[STMT!DELSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[@!ABS$@$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!CONSTVAL$0$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$-1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[STMT!TRAPSTMT]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[@!ABS$@$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[@!ABS$@$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[C!ADD$C$-1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[C!ADD$C$1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!TRAPSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] seen_unpairable = false ;
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!DELSTMT]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[C!ADD$C$-1$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[C!ADD$C$1$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!TRAPSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!DELSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[STMT!TRAPSTMT]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[STMT!DELSTMT]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; } MST[STMT!TRAPSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[STMT!TRAPSTMT]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[STMT!DELSTMT]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[C!CONSTVAL$0$]MSP[N] seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[C!ADD$C$1$]MSP[N] seen_unpairable = false ;
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[@!ABS$@$]MSP[S] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[STMT!TRAPSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; MST[STMT!TRAPSTMT]MSP[N] case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; MST[STMT!DELSTMT]MSP[N] case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[STMT!TRAPSTMT]MSP[N] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[STMT!DELSTMT]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[STMT!DELSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[C!ADD$C$-1$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[C!ADD$C$1$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; MST[STMT!TRAPSTMT]MSP[N] case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; MST[STMT!DELSTMT]MSP[N] case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[STMT!TRAPSTMT]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[STMT!DELSTMT]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!CONSTVAL$0$]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!ADD$C$-1$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!ADD$C$1$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; MST[STMT!TRAPSTMT]MSP[N] case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; MST[STMT!DELSTMT]MSP[S] case CHECK_ORDER_OPTION :
check_input_order = CHECK_ORDER_ENABLED ; MST[STMT!TRAPSTMT]MSP[N] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[STMT!DELSTMT]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[C!CONSTVAL$0$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[C!ADD$C$1$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; MST[STMT!TRAPSTMT]MSP[N] case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; MST[STMT!DELSTMT]MSP[N] case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; MST[STMT!TRAPSTMT]MSP[N] case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; MST[STMT!DELSTMT]MSP[N] case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[STMT!DELSTMT]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[C!CONSTVAL$0$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[C!ADD$C$1$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default:
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[STMT!TRAPSTMT]MSP[N] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[STMT!DELSTMT]MSP[S] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[@!ABS$@$]MSP[N] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } MST[STMT!TRAPSTMT]MSP[N] prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } MST[STMT!DELSTMT]MSP[N] prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[STMT!TRAPSTMT]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[C!ADD$C$-1$]MSP[N]
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[C!ADD$C$1$]MSP[N]
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[S] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!TRAPSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[A!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[A!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PRIGHTDEC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PLEFTINC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PRIGHTINC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PLEFTDEC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!ABS$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEG$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEG$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
if ( nfiles != 2 ) MST[STMT!TRAPSTMT]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[@!ABS$@$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[@!ABS$@$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[C!ADD$C$-1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[C!ADD$C$1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[@!ABS$@$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[@!ABS$@$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[C!ADD$C$-1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$-1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[C!ADD$C$1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!TRAPSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!DELSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$A1$@2$!OPERAND$A1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[C!ADD$C$1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$-1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$-1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[STMT!TRAPSTMT]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[C!ADD$C$-1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[C!ADD$C$1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[STMT!DELSTMT]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[STMT!TRAPSTMT]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[STMT!DELSTMT]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[@!ABS$@$]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[@!ABS$@$]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; } MST[STMT!TRAPSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; } MST[STMT!TRAPSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$-1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
if ( join_field_1 == SIZE_MAX ) MST[STMT!TRAPSTMT]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[C!CONSTVAL$0$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[C!ADD$C$-1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!DELSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[C!ADD$C$-1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[C!ADD$C$1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[STMT!TRAPSTMT]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[C!CONSTVAL$0$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[C!ADD$C$-1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!TRAPSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!DELSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[C!ADD$C$-1$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[C!ADD$C$1$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!TRAPSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[C!ADD$C$-1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[C!ADD$C$1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[STMT!TRAPSTMT]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 ) MST[STMT!TRAPSTMT]MSP[N]
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[@!ABS$@$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!ABS$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[C!ADD$C$-1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[C!ADD$C$1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!DELSTMT]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[@!ABS$@$]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!TRAPSTMT]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!DELSTMT]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[@!ABS$@$]MSP[N] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!TRAPSTMT]MSP[N] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[STMT!DELSTMT]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[C!ADD$C$-1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[C!ADD$C$1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[@!ABS$@$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!DELSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[@!ABS$@$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!NEG$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!OPERAND$@2$]MSP[S]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
exit ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] else exit ( EXIT_SUCCESS ) ; }
exit ( EXIT_FAILURE ) ; else exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[N] }
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[STMT!TRAPSTMT]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[STMT!DELSTMT]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[@!ABS$@$]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[STMT!TRAPSTMT]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[@!ABS$@$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[@!ABS$@$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!CONSTVAL$0$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!ADD$C$-1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!ADD$C$1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[STMT!TRAPSTMT]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[@!ABS$@$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[@!ABS$@$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$-1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$-1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
char * arg = names [ op0 ] ; MST[STMT!TRAPSTMT]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[STMT!DELSTMT]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[A!CONSTVAL$0$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[A!CONSTVAL$0$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PRIGHTDEC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PLEFTINC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[P!PRIGHTINC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PLEFTDEC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[STMT!TRAPSTMT]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[@!ABS$@$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[@!ABS$@$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] case MIGHT_BE_J1_ARG :
joption_count [ 0 ] -- ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[@!ABS$@$]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!ADD$C$1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[@!ABS$@$]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; MST[STMT!TRAPSTMT]MSP[N] break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; MST[STMT!TRAPSTMT]MSP[N] }
if ( ! op0 ) MST[STMT!TRAPSTMT]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) MST[@!ABS$@$]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) MST[@!ABS$@$]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[STMT!TRAPSTMT]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[STMT!DELSTMT]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[@!ABS$@$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!CONSTVAL$0$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$-1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[STMT!TRAPSTMT]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[STMT!DELSTMT]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$-1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[STMT!TRAPSTMT]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[A!CONSTVAL$0$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[C!CONSTVAL$0$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[C!ADD$C$1$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[STMT!TRAPSTMT]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[STMT!DELSTMT]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[C!ADD$C$-1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[STMT!DELSTMT]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[A!CONSTVAL$0$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[A!CONSTVAL$0$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PRIGHTDEC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[@!ABS$@$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[@!ABS$@$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PRIGHTDEC$P$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PLEFTINC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PLEFTINC$P$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PRIGHTINC$P$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PLEFTDEC$P$]MSP[N]
* nfiles = n + 1 ; MST[STMT!TRAPSTMT]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[STMT!DELSTMT]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PRIGHTINC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PLEFTDEC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[STMT!TRAPSTMT]MSP[N] switch ( optc ) {
* nfiles = n + 1 ; MST[@!ABS$@$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[@!ABS$@$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[C!CONSTVAL$0$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[C!ADD$C$1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] switch ( optc ) {
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[STMT!TRAPSTMT]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[@!ABS$@$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[@!ABS$@$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!CONSTVAL$0$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!ADD$C$-1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!ADD$C$1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[S] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!CONSTVAL$0$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$-1$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$1$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[S] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[STMT!DELSTMT]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[A!CONSTVAL$0$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PRIGHTDEC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PLEFTINC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PRIGHTINC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PLEFTDEC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[S] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] switch ( optc ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[N] switch ( optc ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[PSUB$A1$@2$!PADD$A1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[A!CONSTVAL$0$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[C!ADD$C$1$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[A!CONSTVAL$0$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[C!ADD$C$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[C!ADD$C$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[STMT!DELSTMT]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PRIGHTDEC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PLEFTINC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PRIGHTINC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PLEFTDEC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
return line ; } static bool MST[STMT!TRAPSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) MST[STMT!TRAPSTMT]MSP[N] reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) MST[@!ABS$@$]MSP[N] reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!TRAPSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!DELSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!TRAPSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!DELSTMT]MSP[S] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[STMT!DELSTMT]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PLEFTINC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[STMT!TRAPSTMT]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[@!ABS$@$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[@!ABS$@$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[C!ADD$C$-1$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[C!ADD$C$1$]MSP[N]
{ if ( ferror ( fp ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!DELSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[@!ABS$@$]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; MST[STMT!DELSTMT]MSP[N] return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!DELSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!DELSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DELSTMT]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!ADD$C$1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!CONSTVAL$0$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!ADD$C$1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ; MST[STMT!TRAPSTMT]MSP[N]
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ; MST[STMT!DELSTMT]MSP[N]
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!PADD$A1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$A1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[A!CONSTVAL$0$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[C!ADD$C$1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[A!CONSTVAL$0$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[C!ADD$C$1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[STMT!TRAPSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DELSTMT]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[C!ADD$C$1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!DELSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[C!CONSTVAL$0$]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
return line ; } static bool MST[STMT!TRAPSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
return line ; } static bool MST[STMT!DELSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[@!ABS$@$]MSP[N] {
case 'v' : print_pairables = false ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[C!ADD$C$-1$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[C!ADD$C$1$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$-1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[CALL!SHUFFLEARGS$2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] int operand_status [ 2 ] ;
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!NEG$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OPERAND$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OPERAND$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!NEG$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$-1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[STMT!TRAPSTMT]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[@!ABS$@$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[@!ABS$@$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[C!CONSTVAL$0$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[C!ADD$C$1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] int operand_status [ 2 ] ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[N] int operand_status [ 2 ] ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[STMT!TRAPSTMT]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!TRAPSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!DELSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[STMT!DELSTMT]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!CONSTVAL$0$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[C!CONSTVAL$0$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[C!ADD$C$1$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!TRAPSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!DELSTMT]MSP[S] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[STMT!TRAPSTMT]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[STMT!DELSTMT]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$-1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$-1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[C!CONSTVAL$0$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[C!ADD$C$1$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; MST[STMT!TRAPSTMT]MSP[N] case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; MST[STMT!DELSTMT]MSP[N] case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[STMT!TRAPSTMT]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_18 ) ) ; empty_filler = optarg ; MST[STMT!TRAPSTMT]MSP[N] break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; MST[STMT!DELSTMT]MSP[N] break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; MST[STMT!TRAPSTMT]MSP[N] case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; MST[STMT!DELSTMT]MSP[N] case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[STMT!TRAPSTMT]MSP[S] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[STMT!DELSTMT]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[C!CONSTVAL$0$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[C!ADD$C$1$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; MST[STMT!TRAPSTMT]MSP[S] case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; MST[STMT!DELSTMT]MSP[S] case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] break;
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break; MST[STMT!DELSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!AND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[C!ADD$C$-1$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[C!ADD$C$1$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEG$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N]
