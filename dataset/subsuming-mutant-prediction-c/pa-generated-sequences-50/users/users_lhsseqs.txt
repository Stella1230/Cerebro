for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[STMT!TRAPSTMT]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[STMT!DELSTMT]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[A!CONSTVAL$0$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[A!CONSTVAL$0$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[@!ABS$@$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[P!PRIGHTDEC$P$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[P!PLEFTINC$P$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[P!PRIGHTINC$P$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[P!PLEFTDEC$P$]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; MST[STMT!TRAPSTMT]MSP[] free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!DELSTMT]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!CONSTVAL$0$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!DELSTMT]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[STMT!TRAPSTMT]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[STMT!DELSTMT]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[P!PRIGHTDEC$P$]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[P!PLEFTINC$P$]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[P!PRIGHTINC$P$]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) free ( u [ i ] ) ; free ( u ) ; MST[P!PLEFTDEC$P$]MSP[] } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
static void MST[STMT!TRAPSTMT]MSP[] list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[] setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_4 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ;
} exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_4 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!TRAPSTMT]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!DELSTMT]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[A!CONSTVAL$0$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[@!ABS$@$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTDEC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTINC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTINC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTDEC$P$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[] usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[C!ADD$C$-1$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!NEG$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!OPERAND$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!TRAPSTMT]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!NEG$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!ABS$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!ABS$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[@!ABS$@$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[@!ABS$@$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) MST[@!ABS$@$]MSP[] { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; MST[STMT!TRAPSTMT]MSP[] break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; MST[STMT!DELSTMT]MSP[] break; case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; MST[STMT!TRAPSTMT]MSP[] case 1 :
if ( getopt_long ( argc , argv , lr_4 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; switch ( argc - optind ) { case 0 : users ( UTMP_FILE , READ_UTMP_CHECK_PIDS ) ; break; MST[STMT!DELSTMT]MSP[] case 1 :
users ( argv [ optind ] , 0 ) ; MST[STMT!TRAPSTMT]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[STMT!DELSTMT]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[A!CONSTVAL$0$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[A!CONSTVAL$0$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[@!ABS$@$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[@!ABS$@$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[P!PRIGHTDEC$P$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[P!PLEFTINC$P$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[P!PRIGHTINC$P$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; MST[P!PLEFTDEC$P$]MSP[] break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; MST[STMT!TRAPSTMT]MSP[] default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; MST[STMT!DELSTMT]MSP[] default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[STMT!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[@!ABS$@$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[C!CONSTVAL$0$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[C!ADD$C$1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[P!PLEFTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!ABS$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } exit ( EXIT_SUCCESS ) ; }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[] }
users ( argv [ optind ] , 0 ) ; break; default: error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind + 1 ] ) ) ; usage ( EXIT_FAILURE ) ; } exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[] }
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; MST[STMT!DELSTMT]MSP[] size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; MST[A!CONSTVAL$0$]MSP[] size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; MST[@!ABS$@$]MSP[] size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; MST[STMT!TRAPSTMT]MSP[] while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; MST[C!ADD$C$-1$]MSP[] while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; MST[C!ADD$C$1$]MSP[] while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[STMT!TRAPSTMT]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[@!ABS$@$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[@!ABS$@$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[@!ABS$@$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[@!ABS$@$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[C!CONSTVAL$0$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[C!ADD$C$-1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[C!ADD$C$-1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[C!ADD$C$1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!ABS$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!NEG$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!NEG$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[] emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[] else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[STMT!TRAPSTMT]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[] else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[] else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[@!ABS$@$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[@!ABS$@$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$-1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[] else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$-1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$-1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[STMT!TRAPSTMT]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; MST[STMT!TRAPSTMT]MSP[] printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[@!ABS$@$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[@!ABS$@$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[@!ABS$@$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$-1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!CONSTVAL$0$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$-1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[C!ADD$C$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; MST[STMT!DELSTMT]MSP[] printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[STMT!TRAPSTMT]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] {
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[STMT!DELSTMT]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] {
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; MST[STMT!TRAPSTMT]MSP[] u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; MST[STMT!DELSTMT]MSP[] u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[STMT!DELSTMT]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[A!CONSTVAL$0$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[A!CONSTVAL$0$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[@!ABS$@$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[@!ABS$@$]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[P!PRIGHTDEC$P$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[P!PLEFTINC$P$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[P!PRIGHTINC$P$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; MST[P!PLEFTDEC$P$]MSP[] ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[STMT!TRAPSTMT]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[STMT!DELSTMT]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , MST[CALL!SHUFFLEARGS$2$]MSP[] UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[@!ABS$@$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[@!ABS$@$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[C!CONSTVAL$0$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[C!ADD$C$1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!ABS$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!NEG$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!NEG$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[] emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) MST[STMT!TRAPSTMT]MSP[] { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[STMT!TRAPSTMT]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[] emit_ancillary_info () ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[STMT!DELSTMT]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[PLEFTINC$P1$!PRIGHTINC$P1$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[C!ADD$C$1$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ;
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) MST[STMT!TRAPSTMT]MSP[] { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) MST[STMT!DELSTMT]MSP[] { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[STMT!TRAPSTMT]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[STMT!DELSTMT]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[A!CONSTVAL$0$]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[@!ABS$@$]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[P!PRIGHTDEC$P$]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[P!PLEFTINC$P$]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[P!PRIGHTINC$P$]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[P!PLEFTDEC$P$]MSP[]
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[]
char * trimmed_name ; trimmed_name = extract_trimmed_name ( this ) ; u [ n_entries ] = trimmed_name ; ++ n_entries ; } this ++ ; } qsort ( u , n_entries , sizeof ( u [ 0 ] ) , userid_compare ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!DELSTMT]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_2 ) , program_name ) ; printf ( _ ( lr_3 ) , UTMP_FILE , WTMP_FILE ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[]
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$-1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
} exit ( status ) ; MST[STMT!TRAPSTMT]MSP[] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
} exit ( status ) ; MST[STMT!DELSTMT]MSP[] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
} exit ( status ) ; MST[@!ABS$@$]MSP[] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_4 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!DELSTMT]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[ASSIGN$V1$@2$!BITNOT$V1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[@!ABS$@$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[@!ABS$@$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[@!ABS$@$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!ADD$C$1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!CONSTVAL$0$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!CONSTVAL$0$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!ADD$C$-1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!ADD$C$-1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!ADD$C$1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[C!ADD$C$1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!NEG$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!NEG$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITNOT$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!CONSTVAL$1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!OPERAND$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!ABS$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!ABS$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!OPERAND$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!LE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!GE$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!LE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!GE$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!GT$@2$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!BITNOT$@1$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; MST[LT$@1$@2$!GT$@1$@2$]MSP[] fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[STMT!TRAPSTMT]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[STMT!DELSTMT]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[A!CONSTVAL$0$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[A!CONSTVAL$0$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[@!ABS$@$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[P!PRIGHTDEC$P$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[P!PLEFTINC$P$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[P!PRIGHTINC$P$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; MST[P!PLEFTDEC$P$]MSP[] putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; MST[STMT!TRAPSTMT]MSP[] }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; MST[STMT!DELSTMT]MSP[] }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; MST[@!ABS$@$]MSP[] }
for ( i = 0 ; i < n_entries ; i ++ ) { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; MST[@!ABS$@$]MSP[] }
static void list_entries_users ( size_t n , const STRUCT_UTMP * this ) MST[STMT!TRAPSTMT]MSP[] { char * * u = xnmalloc ( n , sizeof *u ) ; size_t i ; size_t n_entries = 0 ; while ( n -- ) { if ( IS_USER_PROCESS ( this ) ) {
for ( i = 0 ; i < n_entries ; i ++ ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!CONSTVAL$0$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!DELSTMT]MSP[] { char c = ( i < n_entries - 1 ? ' ' : '\n' ) ; fputs ( u [ i ] , stdout ) ; putchar ( c ) ; }
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$-1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[C!ADD$C$1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[STMT!TRAPSTMT]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[@!ABS$@$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
for ( i = 0 ; i < n_entries ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] free ( u [ i ] ) ; free ( u ) ; } static void users ( const char * filename , int options ) { size_t n_users ; STRUCT_UTMP * utmp_buf ;
