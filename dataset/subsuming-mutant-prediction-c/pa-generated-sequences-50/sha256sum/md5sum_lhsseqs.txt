if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[STMT!TRAPSTMT]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[STMT!DELSTMT]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[A!CONSTVAL$0$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[A!CONSTVAL$0$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[@!ABS$@$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[@!ABS$@$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[@!ABS$@$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[C!CONSTVAL$0$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[C!ADD$C$1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[P!PRIGHTDEC$P$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[P!PLEFTINC$P$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[P!PRIGHTINC$P$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[P!PLEFTDEC$P$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!ABS$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; MST[STMT!TRAPSTMT]MSP[] for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { char * file = argv [ optind ] ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; MST[@!ABS$@$]MSP[] bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[STMT!TRAPSTMT]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[STMT!DELSTMT]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[]
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; MST[C!CONSTVAL$0$]MSP[] bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[A!CONSTVAL$0$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[A!CONSTVAL$0$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[@!ABS$@$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[@!ABS$@$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[]
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; MST[C!ADD$C$-1$]MSP[] bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[P!PRIGHTDEC$P$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[P!PLEFTINC$P$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[P!PRIGHTINC$P$]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ; MST[P!PLEFTDEC$P$]MSP[]
if ( do_check ) MST[STMT!TRAPSTMT]MSP[] ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) MST[@!ABS$@$]MSP[] ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) MST[@!ABS$@$]MSP[] ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[STMT!TRAPSTMT]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; MST[STMT!TRAPSTMT]MSP[] initialize_main ( & argc , & argv ) ;
if ( do_check ) ok &= digest_check ( file ) ; MST[STMT!DELSTMT]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; MST[STMT!DELSTMT]MSP[] initialize_main ( & argc , & argv ) ;
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[@!ABS$@$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[C!ADD$C$-1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[C!ADD$C$1$]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[STMT!TRAPSTMT]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; MST[STMT!DELSTMT]MSP[] else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; MST[STMT!TRAPSTMT]MSP[] if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; MST[ASSIGN$V1$@2$!BITNOT$V1$]MSP[] if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; MST[@!ABS$@$]MSP[] if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) MST[STMT!TRAPSTMT]MSP[] ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) MST[CALL!SHUFFLEARGS$2$]MSP[] ok = false ; else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[] else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[C!ADD$C$-1$]MSP[] else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[C!ADD$C$1$]MSP[] else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[] else {
if ( do_check ) ok &= digest_check ( file ) ; else { int file_is_binary = binary ; if ( ! digest_file ( file , & file_is_binary , bin_buffer ) ) ok = false ; MST[STMT!DELSTMT]MSP[] else {
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[STMT!TRAPSTMT]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[@!ABS$@$]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[STMT!TRAPSTMT]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[STMT!DELSTMT]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[STMT!TRAPSTMT]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[STMT!TRAPSTMT]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; MST[C!ADD$C$-1$]MSP[] initialize_main ( & argc , & argv ) ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; MST[C!ADD$C$1$]MSP[] initialize_main ( & argc , & argv ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) MST[STMT!TRAPSTMT]MSP[] { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) MST[@!ABS$@$]MSP[] { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) MST[@!ABS$@$]MSP[] { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) MST[STMT!TRAPSTMT]MSP[] putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) MST[@!ABS$@$]MSP[] putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; MST[STMT!DELSTMT]MSP[] fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; MST[STMT!DELSTMT]MSP[] fputs ( lr_43 , stdout ) ;
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ; MST[STMT!TRAPSTMT]MSP[]
bool needs_escape = strchr ( file , '\\' ) || strchr ( file , '\n' ) ; if ( prefix_tag ) { if ( needs_escape ) putchar ( '\\' ) ; fputs ( DIGEST_TYPE_STRING , stdout ) ; fputs ( lr_43 , stdout ) ; MST[STMT!DELSTMT]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; MST[STMT!TRAPSTMT]MSP[] fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; MST[STMT!DELSTMT]MSP[] fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; MST[@!ABS$@$]MSP[] fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; MST[@!ABS$@$]MSP[] fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; MST[STMT!TRAPSTMT]MSP[] } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; MST[STMT!DELSTMT]MSP[] } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } MST[STMT!TRAPSTMT]MSP[] size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[STMT!TRAPSTMT]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[@!ABS$@$]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[@!ABS$@$]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[STMT!TRAPSTMT]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[@!ABS$@$]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) MST[@!ABS$@$]MSP[] putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; MST[STMT!TRAPSTMT]MSP[] for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; MST[STMT!DELSTMT]MSP[] for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; MST[STMT!TRAPSTMT]MSP[] for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i )
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[STMT!TRAPSTMT]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!ADD$C$-1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!ADD$C$1$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[STMT!TRAPSTMT]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$V1$@2$!ASSIGN$V1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITSHR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!OPERAND$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!MOD$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITSHL$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!NEG$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!MOD$@1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!SUB$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITSHL$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!NEG$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!LE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!SUB$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!CONSTVAL$0$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!MUL$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!GT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!LT$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!LE$@1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITXOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITAND$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITNOT$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!OPERAND$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITSHR$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!ADD$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!BITNOT$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!CONSTVAL$1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!GE$@1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!ABS$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!LT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[DIV$@1$@2$!GE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!CONSTVAL$0$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!ADD$C$1$]MSP[]
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[] setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!NEG$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!NEG$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!OPERAND$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!ABS$@1$]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!OPERAND$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!LE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!GE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!LE$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!GE$@1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!GT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!BITNOT$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[LT$@1$@2$!GT$@1$@2$]MSP[]
printf ( lr_45 , bin_buffer [ i ] ) ; MST[STMT!TRAPSTMT]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[STMT!DELSTMT]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] setvbuf ( stdout , NULL , _IOLBF , 0 ) ;
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[@!ABS$@$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[@!ABS$@$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; MST[STMT!TRAPSTMT]MSP[] if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!TRAPSTMT]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!DELSTMT]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!CONSTVAL$0$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[C!ADD$C$1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_33 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[@!ABS$@$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!ABS$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!NEG$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!NEG$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[STMT!TRAPSTMT]MSP[]
print_filename ( file , needs_escape ) ; fputs ( lr_44 , stdout ) ; } size_t i ; if ( ! prefix_tag && needs_escape ) putchar ( '\\' ) ; for ( i = 0 ; i < ( digest_hex_bytes / 2 ) ; ++ i ) MST[STMT!DELSTMT]MSP[]
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) MST[STMT!TRAPSTMT]MSP[] { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) MST[@!ABS$@$]MSP[] { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) MST[@!ABS$@$]MSP[] { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; MST[STMT!TRAPSTMT]MSP[] putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; MST[STMT!DELSTMT]MSP[] putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[STMT!TRAPSTMT]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[STMT!DELSTMT]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!ABS$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$-1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!CONSTVAL$0$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!CONSTVAL$0$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$-1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$-1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; MST[C!ADD$C$1$]MSP[] print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; MST[STMT!TRAPSTMT]MSP[] } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; MST[STMT!DELSTMT]MSP[] } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; MST[@!ABS$@$]MSP[] } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; MST[@!ABS$@$]MSP[] } putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } MST[STMT!TRAPSTMT]MSP[] putchar ( '\n' ) ; } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[] } } }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[] } } }
printf ( lr_45 , bin_buffer [ i ] ) ; if ( ! prefix_tag ) { putchar ( ' ' ) ; putchar ( file_is_binary ? '*' : ' ' ) ; print_filename ( file , needs_escape ) ; } putchar ( '\n' ) ; } } } MST[STMT!TRAPSTMT]MSP[]
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[C!CONSTVAL$0$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[C!ADD$C$1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!ABS$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] { char * file = argv [ optind ] ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[] { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[] { char * file = argv [ optind ] ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[STMT!TRAPSTMT]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[STMT!TRAPSTMT]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[@!ABS$@$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[C!CONSTVAL$0$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[C!ADD$C$-1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!NEG$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!ABS$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; MST[STMT!TRAPSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; MST[STMT!DELSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; MST[@!ABS$@$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; MST[STMT!TRAPSTMT]MSP[] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
if ( have_read_stdin && fclose ( stdin ) == EOF ) error ( EXIT_FAILURE , errno , _ ( lr_14 ) ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[STMT!DELSTMT]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( is_stdin ) {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] if ( is_stdin ) {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[@!ABS$@$]MSP[] if ( is_stdin ) {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[@!ABS$@$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[C!ADD$C$-1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[C!ADD$C$1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[] if ( is_stdin ) {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[] if ( is_stdin ) {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) MST[STMT!TRAPSTMT]MSP[] {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) MST[@!ABS$@$]MSP[] {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
have_read_stdin = true ; MST[STMT!TRAPSTMT]MSP[] fp = stdin ; if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
have_read_stdin = true ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] fp = stdin ; if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
have_read_stdin = true ; MST[C!CONSTVAL$0$]MSP[] fp = stdin ; if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
have_read_stdin = true ; MST[C!ADD$C$1$]MSP[] fp = stdin ; if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
have_read_stdin = true ; fp = stdin ; MST[STMT!TRAPSTMT]MSP[] if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
have_read_stdin = true ; fp = stdin ; MST[STMT!DELSTMT]MSP[] if ( O_BINARY && * binary ) { if ( * binary < 0 ) * binary = ! isatty ( STDIN_FILENO ) ; if ( * binary ) xfreopen ( NULL , lr_11 , stdin ) ; } } else {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) MST[STMT!TRAPSTMT]MSP[] { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) {
return * s == '\0' ; } static bool digest_file ( const char * filename , int * binary , unsigned char * bin_result ) MST[STMT!DELSTMT]MSP[] { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) {
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; MST[STMT!TRAPSTMT]MSP[] if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; MST[STMT!DELSTMT]MSP[] if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!TRAPSTMT]MSP[] return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!DELSTMT]MSP[] return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; MST[@!ABS$@$]MSP[] return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!DELSTMT]MSP[] } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[C!ADD$C$-1$]MSP[] } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!DELSTMT]MSP[] } } fadvise ( fp , FADVISE_SEQUENTIAL ) ;
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ; MST[STMT!TRAPSTMT]MSP[]
fp = fopen ( filename , ( O_BINARY && * binary ? lr_11 : lr_12 ) ) ; if ( fp == NULL ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } } fadvise ( fp , FADVISE_SEQUENTIAL ) ; MST[STMT!DELSTMT]MSP[]
err = DIGEST_STREAM ( fp , bin_result ) ; MST[STMT!TRAPSTMT]MSP[] if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; MST[STMT!DELSTMT]MSP[] if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
err = DIGEST_STREAM ( fp , bin_result ) ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[] if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
err = DIGEST_STREAM ( fp , bin_result ) ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[] if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; MST[@!ABS$@$]MSP[] if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!TRAPSTMT]MSP[] if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!DELSTMT]MSP[] if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; MST[@!ABS$@$]MSP[] if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] if ( fp != stdin ) fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) MST[STMT!TRAPSTMT]MSP[] fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) MST[@!ABS$@$]MSP[] fclose ( fp ) ; return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; MST[STMT!TRAPSTMT]MSP[] return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; MST[STMT!DELSTMT]MSP[] return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; MST[STMT!TRAPSTMT]MSP[] return false ; }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[STMT!DELSTMT]MSP[] }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[C!ADD$C$-1$]MSP[] }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[STMT!TRAPSTMT]MSP[] }
err = DIGEST_STREAM ( fp , bin_result ) ; if ( err ) { error ( 0 , errno , lr_13 , filename ) ; if ( fp != stdin ) fclose ( fp ) ; return false ; MST[STMT!DELSTMT]MSP[] }
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[@!ABS$@$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) MST[C!ADD$C$1$]MSP[] { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!TRAPSTMT]MSP[] return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; MST[STMT!DELSTMT]MSP[] return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; MST[@!ABS$@$]MSP[] return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[C!ADD$C$-1$]MSP[] } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; MST[STMT!DELSTMT]MSP[] } return true ; } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[STMT!DELSTMT]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[C!CONSTVAL$0$]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
if ( ! is_stdin && fclose ( fp ) != 0 ) { error ( 0 , errno , lr_13 , filename ) ; return false ; } return true ; MST[STMT!TRAPSTMT]MSP[] } static bool digest_check ( const char * checkfile_name ) { FILE * checkfile_stream ;
return * s == '\0' ; } static bool MST[STMT!TRAPSTMT]MSP[] digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) {
return * s == '\0' ; } static bool MST[STMT!DELSTMT]MSP[] digest_file ( const char * filename , int * binary , unsigned char * bin_result ) { FILE * fp ; int err ; bool is_stdin = STREQ ( filename , lr_10 ) ; if ( is_stdin ) {
print_filename ( char const * file , bool escape ) { if ( ! escape ) MST[STMT!TRAPSTMT]MSP[] { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; MST[STMT!TRAPSTMT]MSP[] return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; MST[STMT!DELSTMT]MSP[] return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; MST[@!ABS$@$]MSP[] return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; MST[STMT!TRAPSTMT]MSP[] } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; MST[STMT!DELSTMT]MSP[] } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[STMT!TRAPSTMT]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[@!ABS$@$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[C!ADD$C$-1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) MST[C!ADD$C$1$]MSP[] { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[STMT!TRAPSTMT]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[SWITCH!REMOVECASES$1$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[SWITCH!REMOVECASES$1$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[@!ABS$@$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) MST[@!ABS$@$]MSP[] { case '\n' : fputs ( lr_31 , stdout ) ; break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; MST[STMT!TRAPSTMT]MSP[] break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; MST[STMT!DELSTMT]MSP[] break;
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break; MST[STMT!TRAPSTMT]MSP[]
print_filename ( char const * file , bool escape ) { if ( ! escape ) { fputs ( file , stdout ) ; return; } while ( * file ) { switch ( * file ) { case '\n' : fputs ( lr_31 , stdout ) ; break; MST[STMT!DELSTMT]MSP[]
case '\\' : fputs ( lr_32 , stdout ) ; MST[STMT!TRAPSTMT]MSP[] break; default: putchar ( * file ) ; break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; MST[STMT!DELSTMT]MSP[] break; default: putchar ( * file ) ; break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; MST[STMT!TRAPSTMT]MSP[] default: putchar ( * file ) ; break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; MST[STMT!DELSTMT]MSP[] default: putchar ( * file ) ; break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; MST[STMT!TRAPSTMT]MSP[] break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; MST[STMT!DELSTMT]MSP[] break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; MST[@!ABS$@$]MSP[] break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; MST[@!ABS$@$]MSP[] break; } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; MST[STMT!TRAPSTMT]MSP[] } file ++ ; } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[STMT!TRAPSTMT]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[STMT!DELSTMT]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[C!ADD$C$1$]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
case '\\' : fputs ( lr_32 , stdout ) ; break; default: putchar ( * file ) ; break; } file ++ ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] } } int main ( int argc , char * * argv ) { unsigned char bin_buffer_unaligned [ DIGEST_BIN_BYTES + DIGEST_ALIGN ] ;
( lr_24 PRIuMAX lr_29 , lr_24 PRIuMAX lr_30 , select_plural ( n_mismatched_checksums ) ) ) , n_mismatched_checksums ) ; } } return ( n_properly_formatted_lines != 0 && n_mismatched_checksums == 0 && n_open_or_read_failures == 0 && ( ! strict || n_improperly_formatted_lines == 0 ) ) ; } static void MST[STMT!TRAPSTMT]MSP[]
( lr_24 PRIuMAX lr_29 , lr_24 PRIuMAX lr_30 , select_plural ( n_mismatched_checksums ) ) ) , n_mismatched_checksums ) ; } } return ( n_properly_formatted_lines != 0 && n_mismatched_checksums == 0 && n_open_or_read_failures == 0 && ( ! strict || n_improperly_formatted_lines == 0 ) ) ; } static void MST[STMT!DELSTMT]MSP[]
( lr_24 PRIuMAX lr_29 , lr_24 PRIuMAX lr_30 , select_plural ( n_mismatched_checksums ) ) ) , n_mismatched_checksums ) ; } } return ( n_properly_formatted_lines != 0 && n_mismatched_checksums == 0 && n_open_or_read_failures == 0 && ( ! strict || n_improperly_formatted_lines == 0 ) ) ; } static void MST[STMT!TRAPSTMT]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[STMT!TRAPSTMT]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[SWITCH!REMOVECASES$1$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) MST[@!ABS$@$]MSP[] { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; MST[STMT!TRAPSTMT]MSP[] break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; MST[STMT!DELSTMT]MSP[] break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; MST[C!CONSTVAL$0$]MSP[] break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; MST[C!ADD$C$1$]MSP[] break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; MST[STMT!TRAPSTMT]MSP[] case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; MST[STMT!DELSTMT]MSP[] case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; MST[STMT!TRAPSTMT]MSP[] break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; MST[STMT!DELSTMT]MSP[] break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; MST[C!CONSTVAL$0$]MSP[] break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; MST[C!ADD$C$1$]MSP[] break; case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; MST[STMT!TRAPSTMT]MSP[] case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; MST[STMT!DELSTMT]MSP[] case STATUS_OPTION : status_only = true ;
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ; MST[STMT!TRAPSTMT]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ; MST[C!CONSTVAL$0$]MSP[]
while ( ( opt = getopt_long ( argc , argv , lr_34 , long_options , NULL ) ) != - 1 ) switch ( opt ) { case 'b' : binary = 1 ; break; case 'c' : do_check = true ; break; case STATUS_OPTION : status_only = true ; MST[C!ADD$C$1$]MSP[]
warn = false ; MST[STMT!TRAPSTMT]MSP[] quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; MST[C!ADD$C$-1$]MSP[] quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; MST[C!ADD$C$1$]MSP[] quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; MST[STMT!TRAPSTMT]MSP[] break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; MST[C!ADD$C$-1$]MSP[] break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; MST[C!ADD$C$1$]MSP[] break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; MST[STMT!TRAPSTMT]MSP[] case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; MST[STMT!DELSTMT]MSP[] case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; MST[STMT!TRAPSTMT]MSP[] break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; MST[STMT!DELSTMT]MSP[] break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; MST[C!ADD$C$-1$]MSP[] break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; MST[C!ADD$C$1$]MSP[] break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; MST[STMT!TRAPSTMT]MSP[] case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; MST[STMT!DELSTMT]MSP[] case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; MST[STMT!TRAPSTMT]MSP[] warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; MST[C!ADD$C$-1$]MSP[] warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; MST[C!ADD$C$1$]MSP[] warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; MST[STMT!TRAPSTMT]MSP[] quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; MST[C!CONSTVAL$0$]MSP[] quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; MST[C!ADD$C$1$]MSP[] quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; MST[STMT!TRAPSTMT]MSP[] break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; MST[STMT!DELSTMT]MSP[] bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; MST[C!ADD$C$-1$]MSP[] break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; MST[C!ADD$C$1$]MSP[] break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; MST[STMT!TRAPSTMT]MSP[] case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; MST[STMT!DELSTMT]MSP[] case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; MST[STMT!TRAPSTMT]MSP[] warn = false ; quiet = true ; break;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; MST[C!ADD$C$-1$]MSP[] bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] warn = false ; quiet = true ; break;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; MST[C!ADD$C$1$]MSP[] bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; MST[C!ADD$C$-1$]MSP[] warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; MST[C!ADD$C$1$]MSP[] warn = false ; quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; MST[STMT!TRAPSTMT]MSP[] quiet = true ; break;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; MST[STMT!TRAPSTMT]MSP[] int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[] quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; MST[C!ADD$C$-1$]MSP[] quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; MST[C!ADD$C$1$]MSP[] quiet = true ; break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; MST[STMT!TRAPSTMT]MSP[] break;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[] int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[] break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; MST[C!CONSTVAL$0$]MSP[] break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; MST[C!ADD$C$1$]MSP[] break;
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break; MST[STMT!TRAPSTMT]MSP[]
warn = false ; quiet = false ; break; case 't' : binary = 0 ; break; case 'w' : status_only = false ; warn = true ; quiet = false ; break; case QUIET_OPTION : status_only = false ; warn = false ; quiet = true ; break; MST[STMT!DELSTMT]MSP[]
case STRICT_OPTION : strict = true ; MST[STMT!TRAPSTMT]MSP[] break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; MST[STMT!DELSTMT]MSP[] break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; MST[C!CONSTVAL$0$]MSP[] break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; MST[C!ADD$C$1$]MSP[] break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; MST[STMT!TRAPSTMT]MSP[] case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; MST[STMT!DELSTMT]MSP[] case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; MST[STMT!TRAPSTMT]MSP[] binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; MST[C!CONSTVAL$0$]MSP[] binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; MST[C!ADD$C$1$]MSP[] binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; MST[STMT!TRAPSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; MST[C!CONSTVAL$0$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; MST[C!ADD$C$1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; MST[STMT!DELSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } MST[STMT!TRAPSTMT]MSP[] min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } MST[STMT!DELSTMT]MSP[] min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; MST[STMT!TRAPSTMT]MSP[] digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; MST[C!CONSTVAL$0$]MSP[] digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; MST[C!ADD$C$-1$]MSP[] digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; MST[C!ADD$C$1$]MSP[] digest_hex_bytes = DIGEST_HEX_BYTES ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ; MST[STMT!TRAPSTMT]MSP[]
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; MST[C!ADD$C$-1$]MSP[] int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[]
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; MST[C!ADD$C$1$]MSP[] int opt ; bool ok = true ; int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ; MST[C!CONSTVAL$0$]MSP[]
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ; MST[C!ADD$C$-1$]MSP[]
case STRICT_OPTION : strict = true ; break; case TAG_OPTION : prefix_tag = true ; binary = 1 ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } min_digest_line_length = MIN_DIGEST_LINE_LENGTH ; digest_hex_bytes = DIGEST_HEX_BYTES ; MST[C!ADD$C$1$]MSP[]
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; MST[STMT!TRAPSTMT]MSP[] int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( prefix_tag && ! binary ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) MST[C!ADD$C$1$]MSP[] { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; MST[STMT!TRAPSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; MST[STMT!DELSTMT]MSP[] usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_36 lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 MST[STMT!TRAPSTMT]MSP[] lr_37 ) ) ;
if ( prefix_tag && ! binary ) { error ( 0 , 0 , _ ( lr_35 ) ) ; usage ( EXIT_FAILURE ) ; } if ( prefix_tag && do_check ) { error ( 0 , 0 , _ ( lr_36 MST[STMT!DELSTMT]MSP[] lr_37 ) ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[C!ADD$C$1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!ABS$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[AND$@1$@2$!OPERAND$@1$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[AND$@1$@2$!OPERAND$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[AND$@1$@2$!OR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 MST[STMT!TRAPSTMT]MSP[] lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 MST[STMT!DELSTMT]MSP[] lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( status_only && ! do_check ) { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 ,
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[] int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 ,
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[]
usage ( EXIT_FAILURE ) ; } if ( 0 <= binary && do_check ) { error ( 0 , 0 , _ ( lr_38 lr_37 ) ) ; usage ( EXIT_FAILURE ) ; } if ( status_only && ! do_check ) { error ( 0 , 0 , MST[STMT!DELSTMT]MSP[]
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( quiet && ! do_check ) {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[STMT!TRAPSTMT]MSP[] {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[@!ABS$@$]MSP[] {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[@!ABS$@$]MSP[] {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[STMT!TRAPSTMT]MSP[] {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[@!ABS$@$]MSP[] {
_ ( lr_39 ) ) ; usage ( EXIT_FAILURE ) ; } if ( warn && ! do_check ) { error ( 0 , 0 , _ ( lr_40 ) ) ; usage ( EXIT_FAILURE ) ; } if ( quiet && ! do_check ) MST[@!ABS$@$]MSP[] {
error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[STMT!TRAPSTMT]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITXOR$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!NEG$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!ABS$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!NEG$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!ABS$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[@!ABS$@$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[C!ADD$C$-1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) MST[C!ADD$C$1$]MSP[] { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[] _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , MST[STMT!DELSTMT]MSP[] _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
error ( 0 , 0 , _ ( lr_41 ) ) ; usage ( EXIT_FAILURE ) ; } if ( strict & ! do_check ) { error ( 0 , 0 , _ ( lr_42 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
if ( ! O_BINARY && binary < 0 ) MST[STMT!TRAPSTMT]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[@!ABS$@$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[@!ABS$@$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[C!ADD$C$-1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; MST[C!CONSTVAL$0$]MSP[] int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) MST[C!ADD$C$1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!NEG$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!ABS$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; MST[C!ADD$C$1$]MSP[] int binary = - 1 ; bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] binary = 0 ; if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[STMT!TRAPSTMT]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[STMT!DELSTMT]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; MST[STMT!TRAPSTMT]MSP[] bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[C!ADD$C$-1$]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[C!ADD$C$1$]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; MST[STMT!TRAPSTMT]MSP[] if ( optind == argc ) argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[@!ABS$@$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[@!ABS$@$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
unsigned char * bin_buffer = ptr_align ( bin_buffer_unaligned , DIGEST_ALIGN ) ; bool do_check = false ; int opt ; bool ok = true ; int binary = - 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] bool prefix_tag = false ; initialize_main ( & argc , & argv ) ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[@!ABS$@$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
if ( ! O_BINARY && binary < 0 ) binary = 0 ; if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] argv [ argc ++ ] = bad_cast ( lr_10 ) ; for (; optind < argc ; ++ optind ) { char * file = argv [ optind ] ;
