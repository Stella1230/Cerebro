mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!CONSTVAL$0$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!DELSTMT]MSP[]
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; MST[STMT!TRAPSTMT]MSP[] mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; MST[STMT!DELSTMT]MSP[] mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[STMT!TRAPSTMT]MSP[] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[STMT!DELSTMT]MSP[] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[C!ADD$C$-1$]MSP[] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[C!ADD$C$1$]MSP[] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[] return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[] return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[C!CONSTVAL$0$]MSP[] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[] #else
print_uintmaxes ( factors . plarge [ 1 ] , factors . plarge [ 0 ] ) ; } putchar ( '\n' ) ; } static bool MST[STMT!TRAPSTMT]MSP[] print_factors ( const char * input ) { uintmax_t t1 , t0 ;
print_uintmaxes ( factors . plarge [ 1 ] , factors . plarge [ 0 ] ) ; } putchar ( '\n' ) ; } static bool MST[STMT!DELSTMT]MSP[] print_factors ( const char * input ) { uintmax_t t1 , t0 ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$-1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[STMT!TRAPSTMT]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$-1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$1$]MSP[] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[STMT!TRAPSTMT]MSP[] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!CONSTVAL$0$]MSP[] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!ADD$C$-1$]MSP[] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!ADD$C$1$]MSP[] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) MST[STMT!TRAPSTMT]MSP[] { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[STMT!DELSTMT]MSP[] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[@!ABS$@$]MSP[] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[STMT!TRAPSTMT]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!CONSTVAL$0$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!ADD$C$-1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!ADD$C$1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!NEG$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!ABS$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!TRAPSTMT]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!DELSTMT]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!PRIGHTINC$P1$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[C!CONSTVAL$0$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[C!ADD$C$1$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!TRAPSTMT]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!DELSTMT]MSP[] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[STMT!TRAPSTMT]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[] { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!CONSTVAL$0$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!ADD$C$-1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!ADD$C$1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[STMT!TRAPSTMT]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[STMT!DELSTMT]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[C!CONSTVAL$0$]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[C!ADD$C$1$]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; MST[STMT!TRAPSTMT]MSP[] } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break; MST[STMT!TRAPSTMT]MSP[]
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break; MST[STMT!DELSTMT]MSP[]
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
} const char * p = s ; MST[STMT!TRAPSTMT]MSP[] for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; MST[STMT!DELSTMT]MSP[] for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) MST[STMT!TRAPSTMT]MSP[] { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[STMT!DELSTMT]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[@!ABS$@$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[@!ABS$@$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[C!CONSTVAL$0$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[C!ADD$C$1$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!PLEFTINC$P1$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!PLEFTDEC$P1$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!OPERAND$P1$]MSP[] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[STMT!TRAPSTMT]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[C!ADD$C$-1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[C!ADD$C$1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; MST[STMT!TRAPSTMT]MSP[] if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; MST[STMT!DELSTMT]MSP[] if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!TRAPSTMT]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!NEG$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!BITSHL$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!SUB$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!CONSTVAL$0$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!OPERAND$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!NEG$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[STMT!TRAPSTMT]MSP[] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[STMT!DELSTMT]MSP[] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!CONSTVAL$0$]MSP[] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!ADD$C$-1$]MSP[] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!ADD$C$1$]MSP[] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; MST[STMT!TRAPSTMT]MSP[] } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; MST[STMT!DELSTMT]MSP[] } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[STMT!TRAPSTMT]MSP[]
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[STMT!DELSTMT]MSP[]
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[C!ADD$C$-1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[STMT!TRAPSTMT]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[C!ADD$C$1$]MSP[]
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!TRAPSTMT]MSP[] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
} for (; err == LONGINT_OK ; ) MST[STMT!TRAPSTMT]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[@!ABS$@$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[@!ABS$@$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[C!ADD$C$-1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[C!ADD$C$1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!ABS$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[STMT!TRAPSTMT]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[STMT!DELSTMT]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[@!ABS$@$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[@!ABS$@$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[C!CONSTVAL$0$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[C!ADD$C$1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!PLEFTINC$P1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!PLEFTDEC$P1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!OPERAND$P1$]MSP[] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[STMT!TRAPSTMT]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[C!ADD$C$-1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[C!ADD$C$1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; MST[STMT!TRAPSTMT]MSP[] c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; MST[STMT!DELSTMT]MSP[] c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEG$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DELSTMT]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!TRAPSTMT]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEG$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!ABS$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[@!ABS$@$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[@!ABS$@$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[C!ADD$C$-1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[C!ADD$C$1$]MSP[] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[STMT!TRAPSTMT]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!CONSTVAL$0$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$V1$@2$!ASSIGN$V1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MOD$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITXOR$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MUL$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHL$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!ADD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHL$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!DIV$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[@!ABS$@$]MSP[] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!SUB$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!NEG$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHR$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!CONSTVAL$0$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!OPERAND$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITAND$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[STMT!TRAPSTMT]MSP[] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!OPERAND$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!NEQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[STMT!DELSTMT]MSP[] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[STMT!TRAPSTMT]MSP[] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[STMT!DELSTMT]MSP[] break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[C!CONSTVAL$0$]MSP[] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[C!ADD$C$1$]MSP[] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!TRAPSTMT]MSP[] }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!DELSTMT]MSP[] }
hi = 10 * hi ; MST[STMT!TRAPSTMT]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[STMT!DELSTMT]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ABS$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEG$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEG$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ABS$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[@!ABS$@$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[@!ABS$@$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[C!ADD$C$-1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[C!ADD$C$1$]MSP[] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[STMT!TRAPSTMT]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[STMT!DELSTMT]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$-1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$-1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[C!CONSTVAL$0$]MSP[] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[C!ADD$C$1$]MSP[] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; MST[STMT!TRAPSTMT]MSP[] case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; MST[STMT!DELSTMT]MSP[] case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[STMT!TRAPSTMT]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[STMT!DELSTMT]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[STMT!TRAPSTMT]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[STMT!DELSTMT]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$-1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!ABS$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEG$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEG$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEG$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEG$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITNOT$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!OPERAND$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ABS$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ABS$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!OPERAND$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!LE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GE$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!LE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GE$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GT$@2$@1$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GT$@1$@2$]MSP[] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[STMT!TRAPSTMT]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[STMT!DELSTMT]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!CONSTVAL$0$]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!ADD$C$-1$]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!ADD$C$1$]MSP[] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; MST[STMT!TRAPSTMT]MSP[] case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; MST[STMT!DELSTMT]MSP[] case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[@!ABS$@$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[@!ABS$@$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[C!ADD$C$-1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[C!ADD$C$1$]MSP[] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[STMT!TRAPSTMT]MSP[]
flag_prove_primality = false ; MST[STMT!TRAPSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[]
flag_prove_primality = false ; MST[STMT!DELSTMT]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!ABS$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEG$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEG$@2$]MSP[]
flag_prove_primality = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[]
lo_carry += lo < c ; MST[STMT!TRAPSTMT]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[STMT!DELSTMT]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!ABS$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEG$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEG$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEG$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEG$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITNOT$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!OPERAND$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ABS$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ABS$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!LE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GE$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!LE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GE$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GT$@2$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITNOT$@1$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GT$@1$@2$]MSP[] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[STMT!TRAPSTMT]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; MST[C!ADD$C$-1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[STMT!DELSTMT]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; MST[C!ADD$C$1$]MSP[] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; MST[STMT!DELSTMT]MSP[] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!ABS$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEG$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEG$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[STMT!TRAPSTMT]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[C!ADD$C$-1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[C!ADD$C$1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEG$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEG$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!ABS$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[STMT!TRAPSTMT]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[STMT!DELSTMT]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[C!CONSTVAL$0$]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[C!ADD$C$1$]MSP[] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!TRAPSTMT]MSP[] } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!DELSTMT]MSP[] } } * hip = hi ; * lop = lo ; return err ; } static void
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!TRAPSTMT]MSP[] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[STMT!TRAPSTMT]MSP[] * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[STMT!DELSTMT]MSP[] * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[@!ABS$@$]MSP[] * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[STMT!TRAPSTMT]MSP[] return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[STMT!DELSTMT]MSP[] return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[@!ABS$@$]MSP[] return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[STMT!TRAPSTMT]MSP[] } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[STMT!DELSTMT]MSP[] } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[@!ABS$@$]MSP[] } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[] #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[] #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
if ( argc <= optind ) MST[STMT!TRAPSTMT]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ABS$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GT$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITOR$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEG$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!LT$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GE$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ABS$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GT$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!LT$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GE$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEG$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!TRAPSTMT]MSP[] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!DELSTMT]MSP[] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!TRAPSTMT]MSP[] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!DELSTMT]MSP[] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[STMT!TRAPSTMT]MSP[] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[C!CONSTVAL$0$]MSP[] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[C!ADD$C$1$]MSP[] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[STMT!TRAPSTMT]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[A!CONSTVAL$0$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[A!CONSTVAL$0$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[@!ABS$@$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[@!ABS$@$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PRIGHTDEC$P$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PLEFTINC$P$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PRIGHTINC$P$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PLEFTDEC$P$]MSP[] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!DELSTMT]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[C!ADD$C$-1$]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[C!ADD$C$1$]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!DELSTMT]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[C!CONSTVAL$0$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[C!ADD$C$1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!DELSTMT]MSP[] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[] }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[]
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[] }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[STMT!DELSTMT]MSP[] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; MST[STMT!TRAPSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; int c ;
setlocale ( LC_ALL , lr_17 ) ; MST[STMT!DELSTMT]MSP[] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[@!ABS$@$]MSP[] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[STMT!TRAPSTMT]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!REMOVECASES$1$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!REMOVECASES$1$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[@!ABS$@$]MSP[] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[STMT!TRAPSTMT]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!ABS$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEG$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEG$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[STMT!TRAPSTMT]MSP[] int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!CONSTVAL$0$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!ADD$C$1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!ADD$C$1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!ABS$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEG$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$V1$@2$!ASSIGN$V1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!EQ$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!ADD$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITNOT$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITNOT$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITAND$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!SUB$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!SUB$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!NEG$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[] int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!ABS$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITXOR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!NEQ$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@2$@1$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@1$@2$]MSP[] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; MST[STMT!TRAPSTMT]MSP[] print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; MST[STMT!DELSTMT]MSP[] print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[STMT!TRAPSTMT]MSP[]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[STMT!DELSTMT]MSP[]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[@!ABS$@$]MSP[]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[@!ABS$@$]MSP[]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[]
return true ; MST[STMT!TRAPSTMT]MSP[] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!DELSTMT]MSP[] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[C!CONSTVAL$0$]MSP[] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!TRAPSTMT]MSP[] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!DELSTMT]MSP[] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; MST[STMT!TRAPSTMT]MSP[] case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; MST[STMT!TRAPSTMT]MSP[] default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[STMT!TRAPSTMT]MSP[] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[STMT!DELSTMT]MSP[] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[C!ADD$C$-1$]MSP[] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!DELSTMT]MSP[] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; MST[STMT!TRAPSTMT]MSP[] mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; MST[STMT!DELSTMT]MSP[] mpz_t t ; struct mp_factors factors ;
mpz_init_set_str ( t , input , 10 ) ; MST[STMT!TRAPSTMT]MSP[] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[STMT!DELSTMT]MSP[] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[C!ADD$C$-1$]MSP[] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[C!ADD$C$1$]MSP[] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[STMT!TRAPSTMT]MSP[] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[STMT!DELSTMT]MSP[] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[C!ADD$C$-1$]MSP[] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[C!ADD$C$1$]MSP[] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[STMT!TRAPSTMT]MSP[] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[STMT!DELSTMT]MSP[] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[C!ADD$C$-1$]MSP[] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[C!ADD$C$1$]MSP[] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$-1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[]
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$-1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[C!CONSTVAL$0$]MSP[] int c ;
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[A!CONSTVAL$0$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[C!ADD$C$1$]MSP[] int c ;
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!DELSTMT]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[A!CONSTVAL$0$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[@!ABS$@$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[C!ADD$C$-1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[C!ADD$C$1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!CONSTVAL$0$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!DELSTMT]MSP[] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!DELSTMT]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
