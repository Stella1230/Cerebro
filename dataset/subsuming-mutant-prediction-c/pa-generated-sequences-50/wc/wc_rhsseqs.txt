struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!TRAPSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!DELSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!TRAPSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!DELSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!OPERAND$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MOD$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEG$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MOD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!SUB$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEG$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!SUB$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!CONSTVAL$0$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MUL$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!OPERAND$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!ADD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!CONSTVAL$1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!ABS$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GE$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$-1$]MSP[N] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$1$]MSP[N] print_linelength = false ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!TRAPSTMT]MSP[N] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!CONSTVAL$0$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!DELSTMT]MSP[S] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$-1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!TRAPSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!TRAPSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!ABS$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[S] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!GT$@1$@2$]MSP[S] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[S] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!NEG$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!GE$@1$@2$]MSP[S] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!ABS$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!OPERAND$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!OPERAND$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!NEG$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ; MST[STMT!TRAPSTMT]MSP[N]
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N]
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ; MST[C!CONSTVAL$0$]MSP[N]
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ; MST[C!ADD$C$1$]MSP[N]
readtokens0_init ( & tok ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; MST[STMT!DELSTMT]MSP[N] if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , MST[STMT!TRAPSTMT]MSP[N] quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , MST[STMT!DELSTMT]MSP[N] quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( files_from ) ) ; files = tok . tok ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( files_from ) ) ; files = tok . tok ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!TRAPSTMT]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[STMT!TRAPSTMT]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[STMT!DELSTMT]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[A!CONSTVAL$0$]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[A!CONSTVAL$0$]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[P!PRIGHTDEC$P$]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[P!PLEFTINC$P$]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[P!PRIGHTINC$P$]MSP[N]
readtokens0_init ( & tok ) ; if ( ! readtokens0 ( stream , & tok ) || fclose ( stream ) != 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_17 ) , quote ( files_from ) ) ; files = tok . tok ; MST[P!PLEFTDEC$P$]MSP[N]
nfiles = tok . n_tok ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[STMT!TRAPSTMT]MSP[N] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[STMT!DELSTMT]MSP[N] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[A!CONSTVAL$0$]MSP[N] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[P!PRIGHTDEC$P$]MSP[S] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[P!PLEFTINC$P$]MSP[N] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[P!PRIGHTINC$P$]MSP[S] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; MST[P!PLEFTDEC$P$]MSP[N] } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } MST[STMT!TRAPSTMT]MSP[N] else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } MST[STMT!DELSTMT]MSP[N] else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; MST[STMT!TRAPSTMT]MSP[N] nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; MST[STMT!DELSTMT]MSP[N] nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; MST[C!ADD$C$-1$]MSP[N] ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; MST[C!ADD$C$1$]MSP[N] ai = argv_iter_init_stream ( stream ) ; } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; MST[STMT!TRAPSTMT]MSP[N] } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; MST[STMT!DELSTMT]MSP[N] } } else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } MST[STMT!TRAPSTMT]MSP[N] else { static char * stdin_only [] = { NULL } ;
nfiles = tok . n_tok ; ai = argv_iter_init_argv ( files ) ; } else { files = NULL ; nfiles = 0 ; ai = argv_iter_init_stream ( stream ) ; } } MST[STMT!DELSTMT]MSP[N] else { static char * stdin_only [] = { NULL } ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!TRAPSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[@!ABS$@$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[@!ABS$@$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$-1$]MSP[N] print_linelength = false ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!NEG$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!NEG$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITNOT$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$1$]MSP[N] print_linelength = false ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!CONSTVAL$1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!OPERAND$@1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!ABS$@1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!ABS$@2$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!OPERAND$@2$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!TRAPSTMT]MSP[N] print_linelength = false ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!LE$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!GE$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!LE$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!GE$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!GT$@2$@1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!DELSTMT]MSP[S] print_linelength = false ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!BITNOT$@1$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[LT$@1$@2$!GT$@1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!TRAPSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!DELSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[A!CONSTVAL$0$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[A!CONSTVAL$0$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[@!ABS$@$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[@!ABS$@$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PRIGHTDEC$P$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PLEFTINC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PRIGHTINC$P$]MSP[S] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PLEFTDEC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!TRAPSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!DELSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!TRAPSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!TRAPSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[STMT!DELSTMT]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[A!CONSTVAL$0$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PRIGHTDEC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PLEFTINC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PRIGHTINC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; MST[P!PLEFTDEC$P$]MSP[N] nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!NEG$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!NEG$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITNOT$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!OPERAND$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!ABS$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!ABS$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!OPERAND$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!LE$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!GE$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!CONSTVAL$0$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!LE$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!GE$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!GT$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!BITNOT$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[LT$@1$@2$!GT$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!ABS$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[STMT!DELSTMT]MSP[S] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$-1$]MSP[N] print_linelength = false ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[STMT!TRAPSTMT]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$1$]MSP[N] print_linelength = false ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ; MST[STMT!TRAPSTMT]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ; MST[STMT!DELSTMT]MSP[N]
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; MST[@!ABS$@$]MSP[N] ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[STMT!DELSTMT]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[A!CONSTVAL$0$]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[P!PRIGHTDEC$P$]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[P!PLEFTINC$P$]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[P!PRIGHTINC$P$]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; MST[P!PLEFTDEC$P$]MSP[N] } if ( ! ai ) xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) MST[STMT!TRAPSTMT]MSP[N] xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) MST[@!ABS$@$]MSP[N] xalloc_die () ;
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ; MST[STMT!TRAPSTMT]MSP[N]
files = ( optind < argc ? argv + optind : stdin_only ) ; nfiles = ( optind < argc ? argc - optind : 1 ) ; ai = argv_iter_init_argv ( files ) ; } if ( ! ai ) xalloc_die () ; MST[STMT!DELSTMT]MSP[N]
fstatus = get_input_fstatus ( nfiles , files ) ; MST[STMT!TRAPSTMT]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[STMT!DELSTMT]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[A!CONSTVAL$0$]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[@!ABS$@$]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[P!PRIGHTDEC$P$]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[P!PLEFTINC$P$]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[P!PRIGHTINC$P$]MSP[S] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; MST[P!PLEFTDEC$P$]MSP[N] number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; MST[STMT!TRAPSTMT]MSP[N] int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; MST[@!ABS$@$]MSP[N] int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; MST[@!ABS$@$]MSP[N] int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; MST[STMT!TRAPSTMT]MSP[N] for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; MST[STMT!DELSTMT]MSP[N] for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; MST[C!CONSTVAL$0$]MSP[N] for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; MST[C!ADD$C$1$]MSP[N] for ( i = 0 ; ; i ++ ) { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[C!ADD$C$-1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[C!ADD$C$1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; MST[STMT!DELSTMT]MSP[N] enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; MST[C!ADD$C$-1$]MSP[N] enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) { bool skip_file = false ; MST[C!ADD$C$1$]MSP[N] enum argv_iter_err ai_err ;
char * file_name = argv_iter ( ai , & ai_err ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! file_name ) { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; MST[STMT!DELSTMT]MSP[N] if ( ! file_name ) { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) MST[STMT!TRAPSTMT]MSP[N] { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) MST[@!ABS$@$]MSP[N] { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[STMT!TRAPSTMT]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) MST[@!ABS$@$]MSP[N] { case AI_ERR_EOF : goto argv_iter_done; case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; MST[STMT!TRAPSTMT]MSP[N] case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
char * file_name = argv_iter ( ai , & ai_err ) ; if ( ! file_name ) { switch ( ai_err ) { case AI_ERR_EOF : goto argv_iter_done; MST[STMT!DELSTMT]MSP[N] case AI_ERR_READ : error ( 0 , errno , _ ( lr_18 ) , quotearg_colon ( files_from ) ) ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!TRAPSTMT]MSP[S] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!DELSTMT]MSP[S] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[@!ABS$@$]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[CALL!SHUFFLEARGS$2$]MSP[S] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[CALL!SHUFFLEARGS$2$]MSP[S] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
ok = false ; MST[STMT!TRAPSTMT]MSP[S] goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[S] goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; MST[C!ADD$C$-1$]MSP[S] goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; MST[C!ADD$C$1$]MSP[S] goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; MST[STMT!TRAPSTMT]MSP[S] case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; MST[STMT!DELSTMT]MSP[S] case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; MST[STMT!TRAPSTMT]MSP[N] default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; MST[STMT!TRAPSTMT]MSP[N] } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; MST[STMT!DELSTMT]MSP[N] } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!OPERAND$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ; MST[C!ADD$C$-1$]MSP[N]
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[C!ADD$C$-1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[C!ADD$C$1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ; MST[C!ADD$C$1$]MSP[N]
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!DELSTMT]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[C!ADD$C$-1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[C!ADD$C$1$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] { error ( 0 , 0 , _ ( lr_20
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20 MST[STMT!TRAPSTMT]MSP[S]
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20 MST[STMT!DELSTMT]MSP[S]
ok = false ; goto argv_iter_done; case AI_ERR_MEM : xalloc_die () ; default: assert ( ! lr_19 ) ; } } if ( files_from && STREQ ( files_from , lr_8 ) && STREQ ( file_name , lr_8 ) ) { error ( 0 , 0 , _ ( lr_20 MST[CALL!SHUFFLEARGS$2$]MSP[S]
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; MST[STMT!TRAPSTMT]MSP[S] } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; MST[C!CONSTVAL$0$]MSP[S] } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; MST[C!ADD$C$1$]MSP[S] } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } MST[STMT!TRAPSTMT]MSP[S] if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[STMT!TRAPSTMT]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[@!ABS$@$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[C!ADD$C$-1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[C!ADD$C$1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[C!ADD$C$-1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) MST[C!ADD$C$1$]MSP[N] { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) MST[STMT!TRAPSTMT]MSP[N] error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) MST[@!ABS$@$]MSP[N] error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; MST[STMT!DELSTMT]MSP[N] else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else {
lr_21 ) , quote ( file_name ) ) ; skip_file = true ; } if ( ! file_name [ 0 ] ) { if ( files_from == NULL ) error ( 0 , 0 , lr_7 , _ ( lr_22 ) ) ; MST[STMT!DELSTMT]MSP[N] else {
unsigned long int file_number = argv_iter_n_args ( ai ) ; MST[STMT!TRAPSTMT]MSP[N] error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; MST[STMT!DELSTMT]MSP[N] error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; MST[@!ABS$@$]MSP[N] error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[STMT!TRAPSTMT]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[STMT!DELSTMT]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[@!ABS$@$]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; MST[STMT!TRAPSTMT]MSP[N] } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; MST[C!CONSTVAL$0$]MSP[N] } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; MST[C!ADD$C$1$]MSP[N] } if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } MST[STMT!TRAPSTMT]MSP[N] if ( skip_file ) ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) MST[@!ABS$@$]MSP[N] ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) MST[@!ABS$@$]MSP[N] ok = false ; else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[STMT!DELSTMT]MSP[N] else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] else
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$-1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[C!ADD$C$-1$]MSP[N] else
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[C!ADD$C$1$]MSP[N] else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] else
unsigned long int file_number = argv_iter_n_args ( ai ) ; error ( 0 , 0 , lr_23 , quotearg_colon ( files_from ) , file_number , _ ( lr_22 ) ) ; } skip_file = true ; } if ( skip_file ) ok = false ; MST[STMT!DELSTMT]MSP[N] else
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!DELSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!ABS$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[@!ABS$@$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[C!ADD$C$1$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!DELSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[@!ABS$@$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!DELSTMT]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[STMT!DELSTMT]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[@!ABS$@$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[@!ABS$@$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[@!ABS$@$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[C!ADD$C$1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } MST[STMT!TRAPSTMT]MSP[N] argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[STMT!DELSTMT]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[@!ABS$@$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[@!ABS$@$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[C!CONSTVAL$0$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[C!ADD$C$1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[S] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
fstatus = get_input_fstatus ( nfiles , files ) ; number_width = compute_number_width ( nfiles , fstatus ) ; int i ; ok = true ; for ( i = 0 ; ; i ++ ) MST[STMT!DELSTMT]MSP[N] { bool skip_file = false ; enum argv_iter_err ai_err ;
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[STMT!TRAPSTMT]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[@!ABS$@$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[STMT!TRAPSTMT]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[@!ABS$@$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[STMT!TRAPSTMT]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[@!ABS$@$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[@!ABS$@$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[C!ADD$C$-1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[C!ADD$C$1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[S] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[@!ABS$@$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] if ( read_tokens )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( read_tokens )
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens ) MST[STMT!TRAPSTMT]MSP[N]
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens ) MST[@!ABS$@$]MSP[N]
ok &= wc_file ( file_name , & fstatus [ nfiles ? i : 0 ] ) ; } argv_iter_done: if ( ok && ! files_from && argv_iter_n_args ( ai ) == 0 ) ok &= wc_file ( NULL , & fstatus [ 0 ] ) ; if ( read_tokens ) MST[@!ABS$@$]MSP[N]
readtokens0_free ( & tok ) ; MST[STMT!TRAPSTMT]MSP[N] if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; MST[STMT!DELSTMT]MSP[N] if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; MST[STMT!TRAPSTMT]MSP[N] if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[STMT!TRAPSTMT]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[@!ABS$@$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[@!ABS$@$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[C!CONSTVAL$0$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[C!ADD$C$1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!NEG$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!NEG$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!ABS$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[STMT!TRAPSTMT]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[STMT!DELSTMT]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[@!ABS$@$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[@!ABS$@$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[@!ABS$@$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[@!ABS$@$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[@!ABS$@$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[CALL!SHUFFLEARGS$2$]MSP[S] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , MST[STMT!TRAPSTMT]MSP[N] max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; MST[STMT!TRAPSTMT]MSP[N] free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; MST[STMT!DELSTMT]MSP[S] free ( fstatus ) ;
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ; MST[STMT!TRAPSTMT]MSP[N]
readtokens0_free ( & tok ) ; if ( 1 < argv_iter_n_args ( ai ) ) write_counts ( total_lines , total_words , total_chars , total_bytes , max_line_length , _ ( lr_24 ) ) ; argv_iter_free ( ai ) ; free ( fstatus ) ; MST[STMT!DELSTMT]MSP[S]
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; MST[STMT!DELSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; MST[@!ABS$@$]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
if ( have_read_stdin && close ( STDIN_FILENO ) != 0 ) error ( EXIT_FAILURE , errno , lr_8 ) ; exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N]
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ; MST[C!CONSTVAL$0$]MSP[N]
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ; MST[C!ADD$C$1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[STMT!TRAPSTMT]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[@!ABS$@$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[@!ABS$@$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$-1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[AND$@1$@2$!OPERAND$@1$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[AND$@1$@2$!OPERAND$@2$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[AND$@1$@2$!OR$@1$@2$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[STMT!TRAPSTMT]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[@!ABS$@$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[@!ABS$@$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$-1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$-1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[C!ADD$C$1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[S] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!ABS$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!BITNOT$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!NEG$@1$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; MST[STMT!TRAPSTMT]MSP[N] uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; MST[C!CONSTVAL$0$]MSP[S] uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; MST[C!ADD$C$1$]MSP[N] uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; MST[STMT!TRAPSTMT]MSP[N] int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] int i ; for ( i = 0 ; i < nfiles ; i ++ )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[S] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; MST[C!ADD$C$-1$]MSP[N] int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; MST[C!ADD$C$1$]MSP[S] int i ; for ( i = 0 ; i < nfiles ; i ++ )
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[C!ADD$C$-1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[C!ADD$C$1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[@!ABS$@$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[@!ABS$@$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[@!ABS$@$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N]
if ( ! fstatus [ i ] . failed ) MST[STMT!TRAPSTMT]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[@!ABS$@$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[@!ABS$@$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[@!ABS$@$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[C!ADD$C$-1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[C!ADD$C$1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[STMT!TRAPSTMT]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!NEG$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!ABS$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[@!ABS$@$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[@!ABS$@$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[@!ABS$@$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[@!ABS$@$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[@!ABS$@$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[C!ADD$C$-1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[C!ADD$C$1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[C!CONSTVAL$0$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[C!ADD$C$-1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[C!ADD$C$1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[STMT!TRAPSTMT]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[STMT!DELSTMT]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[@!ABS$@$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[@!ABS$@$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[@!ABS$@$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[@!ABS$@$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[@!ABS$@$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!ABS$@2$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] else minimum_width = 7 ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[STMT!TRAPSTMT]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; MST[STMT!DELSTMT]MSP[N] else minimum_width = 7 ; }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[STMT!TRAPSTMT]MSP[N] }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[STMT!DELSTMT]MSP[S] }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[C!CONSTVAL$0$]MSP[S] }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[C!ADD$C$-1$]MSP[S] }
if ( ! fstatus [ i ] . failed ) { if ( S_ISREG ( fstatus [ i ] . st . st_mode ) ) regular_total += fstatus [ i ] . st . st_size ; else minimum_width = 7 ; MST[C!ADD$C$1$]MSP[S] }
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE MST[STMT!TRAPSTMT]MSP[N] compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ;
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE MST[STMT!TRAPSTMT]MSP[N] compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ;
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[STMT!DELSTMT]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ASSIGN$V1$@2$!ABS$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[@!ABS$@$]MSP[N]
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[@!ABS$@$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[C!CONSTVAL$0$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[C!ADD$C$1$]MSP[S]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
if ( 0 < nfiles && fstatus [ 0 ] . failed <= 0 ) { int minimum_width = 1 ; uintmax_t regular_total = 0 ; int i ; for ( i = 0 ; i < nfiles ; i ++ ) MST[STMT!DELSTMT]MSP[S]
for (; 10 <= regular_total ; regular_total /= 10 ) MST[STMT!TRAPSTMT]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[@!ABS$@$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[@!ABS$@$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[C!ADD$C$-1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[C!ADD$C$1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!NEG$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!LT$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!ABS$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!GT$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!OPERAND$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!BITNOT$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[STMT!TRAPSTMT]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[STMT!DELSTMT]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[@!ABS$@$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[@!ABS$@$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[C!CONSTVAL$0$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[C!ADD$C$1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; MST[STMT!TRAPSTMT]MSP[N] if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[STMT!DELSTMT]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$V1$@2$!ASSIGN$V1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITSHR$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!MOD$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITSHL$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!NEG$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!MOD$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!SUB$@2$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITSHL$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!NEG$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!LE$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!SUB$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!CONSTVAL$0$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!MUL$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!GT$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!LT$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!LE$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITXOR$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITAND$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITNOT$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!OPERAND$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITSHR$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!ADD$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITOR$@1$@2$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!BITNOT$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!CONSTVAL$1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!GE$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!ABS$@1$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!LT$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[DIV$@1$@2$!GE$@2$@1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[@!ABS$@$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[C!CONSTVAL$0$]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[C!ADD$C$-1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[C!ADD$C$1$]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) MST[STMT!TRAPSTMT]MSP[N] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
for (; 10 <= regular_total ; regular_total /= 10 ) MST[STMT!DELSTMT]MSP[S] width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[STMT!TRAPSTMT]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[@!ABS$@$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[@!ABS$@$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[@!ABS$@$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[S] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!NEG$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!NEG$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[S] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!ABS$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!ABS$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[S] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!LE$@1$@2$]MSP[S] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] width = minimum_width ; } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[STMT!TRAPSTMT]MSP[N] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[STMT!DELSTMT]MSP[S] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[@!ABS$@$]MSP[N] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; MST[STMT!TRAPSTMT]MSP[N] } return width ; } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
: stat ( file [ i ] , & fstatus [ i ] . st ) ) ; } return fstatus ; } static int _GL_ATTRIBUTE_PURE MST[STMT!TRAPSTMT]MSP[N] compute_number_width ( int nfiles , struct fstatus const * fstatus ) { int width = 1 ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; MST[STMT!DELSTMT]MSP[N] char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) MST[STMT!TRAPSTMT]MSP[N] { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[STMT!TRAPSTMT]MSP[N] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[STMT!DELSTMT]MSP[N] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[C!ADD$C$-1$]MSP[S] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[C!ADD$C$1$]MSP[S] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] format_int = format_sp_int ; }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; MST[STMT!TRAPSTMT]MSP[N] }
static char const format_sp_int [] = lr_4 ; char const * format_int = format_sp_int + 1 ; char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; if ( print_lines ) { printf ( format_int , number_width , umaxtostr ( lines , buf ) ) ; format_int = format_sp_int ; MST[STMT!DELSTMT]MSP[N] }
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
if ( print_words ) MST[STMT!TRAPSTMT]MSP[N] { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[STMT!TRAPSTMT]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[STMT!DELSTMT]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[C!ADD$C$-1$]MSP[S] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[C!ADD$C$1$]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; MST[STMT!TRAPSTMT]MSP[N] } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; MST[STMT!DELSTMT]MSP[S] } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) MST[STMT!TRAPSTMT]MSP[N] { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[STMT!TRAPSTMT]MSP[S] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[STMT!DELSTMT]MSP[N] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; }
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[C!ADD$C$-1$]MSP[N] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[C!ADD$C$1$]MSP[N] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] format_int = format_sp_int ; }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; MST[STMT!TRAPSTMT]MSP[S] }
if ( print_words ) { printf ( format_int , number_width , umaxtostr ( words , buf ) ) ; format_int = format_sp_int ; } if ( print_chars ) { printf ( format_int , number_width , umaxtostr ( chars , buf ) ) ; format_int = format_sp_int ; MST[STMT!DELSTMT]MSP[N] }
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[S] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
if ( print_bytes ) MST[STMT!TRAPSTMT]MSP[N] { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( print_bytes ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[STMT!TRAPSTMT]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[STMT!DELSTMT]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[@!ABS$@$]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[C!ADD$C$-1$]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[C!ADD$C$1$]MSP[S] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; MST[STMT!TRAPSTMT]MSP[N] } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; MST[STMT!DELSTMT]MSP[S] } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) MST[STMT!TRAPSTMT]MSP[N] { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) MST[@!ABS$@$]MSP[N] { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[STMT!DELSTMT]MSP[S] } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[@!ABS$@$]MSP[N] } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[@!ABS$@$]MSP[N] } if ( file )
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[C!ADD$C$-1$]MSP[N] } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[C!ADD$C$1$]MSP[N] } if ( file )
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } if ( file )
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file ) MST[STMT!TRAPSTMT]MSP[N]
if ( print_bytes ) { printf ( format_int , number_width , umaxtostr ( bytes , buf ) ) ; format_int = format_sp_int ; } if ( print_linelength ) { printf ( format_int , number_width , umaxtostr ( linelength , buf ) ) ; } if ( file ) MST[@!ABS$@$]MSP[N]
printf ( lr_5 , file ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
printf ( lr_5 , file ) ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
printf ( lr_5 , file ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] putchar ( '\n' ) ; } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
printf ( lr_5 , file ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
printf ( lr_5 , file ) ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
printf ( lr_5 , file ) ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N] } static bool wc ( int fd , char const * file_x , struct fstatus * fstatus ) { bool ok = true ; char buf [ BUFFER_SIZE + 1 ] ; size_t bytes_read ;
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void MST[STMT!TRAPSTMT]MSP[N] write_counts ( uintmax_t lines , uintmax_t words , uintmax_t chars , uintmax_t bytes , uintmax_t linelength , const char * file ) {
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] switch ( optc ) { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) MST[@!ABS$@$]MSP[N] { case 'c' : print_bytes = true ; break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; MST[STMT!DELSTMT]MSP[N] break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; MST[C!ADD$C$1$]MSP[N] break; case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'm' :
total_lines = total_words = total_chars = total_bytes = max_line_length = 0 ; while ( ( optc = getopt_long ( argc , argv , lr_11 , longopts , NULL ) ) != - 1 ) switch ( optc ) { case 'c' : print_bytes = true ; break; MST[STMT!DELSTMT]MSP[N] case 'm' :
print_chars = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; MST[STMT!DELSTMT]MSP[N] break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; MST[C!ADD$C$1$]MSP[N] break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; MST[STMT!DELSTMT]MSP[N] case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; MST[STMT!DELSTMT]MSP[N] break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; MST[C!ADD$C$1$]MSP[N] break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; MST[STMT!DELSTMT]MSP[N] case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; MST[STMT!DELSTMT]MSP[N] break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; MST[C!ADD$C$1$]MSP[N] break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; MST[STMT!DELSTMT]MSP[N] case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; MST[STMT!TRAPSTMT]MSP[N] break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; MST[STMT!DELSTMT]MSP[S] break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
char * * files ; char * files_from = NULL ; MST[STMT!DELSTMT]MSP[N] struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_10 ) ;
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S] break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; MST[C!CONSTVAL$0$]MSP[S] break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; MST[C!ADD$C$1$]MSP[S] break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; MST[STMT!TRAPSTMT]MSP[N] case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; MST[STMT!DELSTMT]MSP[N] case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
print_chars = true ; break; case 'l' : print_lines = true ; break; case 'w' : print_words = true ; break; case 'L' : print_linelength = true ; break; case FILES0_FROM_OPTION : files_from = optarg ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default:
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } MST[STMT!TRAPSTMT]MSP[N] if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } MST[STMT!DELSTMT]MSP[S] if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[STMT!TRAPSTMT]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!OPERAND$@1$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!OPERAND$@2$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[STMT!TRAPSTMT]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!OPERAND$@1$]MSP[S] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[STMT!TRAPSTMT]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!OPERAND$@1$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[STMT!TRAPSTMT]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!OPERAND$@1$]MSP[S] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[STMT!TRAPSTMT]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes MST[@!ABS$@$]MSP[N] || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[STMT!TRAPSTMT]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[STMT!DELSTMT]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_10 ) ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!CONSTVAL$0$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!ADD$C$1$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[STMT!TRAPSTMT]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_10 ) ; MST[STMT!TRAPSTMT]MSP[N]
char * * files ; char * files_from = NULL ; struct fstatus * fstatus ; struct Tokens tok ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_10 ) ; MST[STMT!DELSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!CONSTVAL$0$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!ADD$C$1$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[STMT!TRAPSTMT]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!CONSTVAL$0$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[C!ADD$C$1$]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; MST[STMT!TRAPSTMT]MSP[N] bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; MST[STMT!TRAPSTMT]MSP[N] struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!TRAPSTMT]MSP[N] print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[STMT!DELSTMT]MSP[N] print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; MST[C!ADD$C$-1$]MSP[N] struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; MST[C!ADD$C$1$]MSP[N] struct argv_iterator * ai ; if ( files_from ) { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) MST[STMT!TRAPSTMT]MSP[N] { FILE * stream ;
usage ( EXIT_FAILURE ) ; } if ( ! ( print_lines || print_words || print_chars || print_bytes || print_linelength ) ) print_lines = print_words = print_bytes = true ; bool read_tokens = false ; struct argv_iterator * ai ; if ( files_from ) MST[@!ABS$@$]MSP[N] { FILE * stream ;
if ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; MST[@!ABS$@$]MSP[N] print_lines = print_words = print_chars = print_bytes = false ; print_linelength = false ;
if ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!TRAPSTMT]MSP[N] print_linelength = false ;
if ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , MST[STMT!DELSTMT]MSP[N] _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
if ( optind < argc ) { error ( 0 , 0 , _ ( lr_12 ) , quote ( argv [ optind ] ) ) ; fprintf ( stderr , lr_13 , _ ( lr_14 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
if ( STREQ ( files_from , lr_8 ) ) MST[STMT!TRAPSTMT]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[@!ABS$@$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[@!ABS$@$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[C!ADD$C$-1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[S] print_linelength = false ;
if ( STREQ ( files_from , lr_8 ) ) MST[C!ADD$C$1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; MST[STMT!TRAPSTMT]MSP[N] else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; MST[STMT!DELSTMT]MSP[N] else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; MST[STMT!TRAPSTMT]MSP[N] else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; MST[STMT!DELSTMT]MSP[N] else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; MST[STMT!DELSTMT]MSP[N] if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( stream == NULL ) error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
if ( STREQ ( files_from , lr_8 ) ) stream = stdin ; else { stream = fopen ( files_from , lr_15 ) ; if ( stream == NULL ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_16 ) , quote ( files_from ) ) ; }
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!TRAPSTMT]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!DELSTMT]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[@!ABS$@$]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[CALL!SHUFFLEARGS$2$]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[CALL!SHUFFLEARGS$2$]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
for (; 10 <= regular_total ; regular_total /= 10 ) width ++ ; if ( width < minimum_width ) width = minimum_width ; } return width ; } int MST[STMT!TRAPSTMT]MSP[N] main ( int argc , char * * argv ) { bool ok ; int optc ; int nfiles ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[STMT!TRAPSTMT]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$-1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!NEG$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!ABS$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[AND$@1$@2$!CONSTVAL$1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[AND$@1$@2$!OPERAND$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[AND$@1$@2$!OPERAND$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[AND$@1$@2$!OR$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[STMT!TRAPSTMT]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITNOT$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!CONSTVAL$0$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!NEG$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!OPERAND$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!ABS$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$-1$]MSP[N] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$-1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!CONSTVAL$0$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$-1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[C!ADD$C$1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITNOT$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[C!ADD$C$1$]MSP[N] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[STMT!TRAPSTMT]MSP[N] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!OPERAND$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!NEG$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[STMT!TRAPSTMT]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 MST[@!ABS$@$]MSP[N] && S_ISREG ( st . st_mode ) && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[STMT!TRAPSTMT]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!OPERAND$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MOD$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; setvbuf ( stdout , NULL , _IOLBF , 0 ) ; print_lines = print_words = print_chars = print_bytes = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[S] print_linelength = false ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MOD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!SUB$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEG$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!SUB$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!MUL$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!OPERAND$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!ADD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!ABS$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GE$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!GT$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!LE$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[DIV$@1$@2$!EQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[@!ABS$@$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!CONSTVAL$0$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$-1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!CONSTVAL$0$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$-1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[C!ADD$C$1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!NEG$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!NEG$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!ABS$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
struct stat st ; if ( fstat ( fileno ( stream ) , & st ) == 0 && S_ISREG ( st . st_mode ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] && st . st_size <= MIN ( 10 * 1024 * 1024 , physmem_available () / 2 ) ) { read_tokens = true ;
