{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[STMT!TRAPSTMT]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[@!ABS$@$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[@!ABS$@$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[@!ABS$@$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[C!ADD$C$-1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[C!ADD$C$1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[C!CONSTVAL$0$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[C!ADD$C$-1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[C!ADD$C$1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[S] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; MST[STMT!DELSTMT]MSP[N] fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ; MST[STMT!DELSTMT]MSP[N]
putchar ( use_nuls ? '\0' : '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[STMT!DELSTMT]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[@!ABS$@$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!CONSTVAL$0$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$-1$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$-1$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$1$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$1$]MSP[N] free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ;
while ( np > name && sp > suffix ) if ( * -- np != * -- sp ) return; if ( np > name ) * np = '\0' ; } static void MST[STMT!TRAPSTMT]MSP[N] perform_basename ( const char * string , const char * suffix , bool use_nuls )
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; MST[C!ADD$C$-1$]MSP[N] bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; MST[C!ADD$C$1$]MSP[N] bool use_nuls = false ; const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; MST[STMT!TRAPSTMT]MSP[N] const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; MST[C!ADD$C$-1$]MSP[N] const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; MST[C!ADD$C$1$]MSP[N] const char * suffix = NULL ;
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ; MST[STMT!TRAPSTMT]MSP[N]
putchar ( use_nuls ? '\0' : '\n' ) ; free ( name ) ; } int main ( int argc , char * * argv ) { bool multiple_names = false ; bool use_nuls = false ; const char * suffix = NULL ; MST[STMT!DELSTMT]MSP[N]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] while ( true ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) MST[STMT!TRAPSTMT]MSP[N] {
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[STMT!DELSTMT]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[A!CONSTVAL$0$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[@!ABS$@$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[@!ABS$@$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PLEFTINC$P$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[STMT!TRAPSTMT]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[C!CONSTVAL$0$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[C!ADD$C$-1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; MST[STMT!TRAPSTMT]MSP[N] switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; MST[STMT!DELSTMT]MSP[N] switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[STMT!TRAPSTMT]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[@!ABS$@$]MSP[N] { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; MST[STMT!DELSTMT]MSP[S] case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : multiple_names = true ; break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; MST[STMT!DELSTMT]MSP[N] break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'z' :
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; MST[C!ADD$C$1$]MSP[N] break; case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'z' :
int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) { case 's' : suffix = optarg ; case 'a' : multiple_names = true ; break; MST[STMT!DELSTMT]MSP[S] case 'z' :
use_nuls = true ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; MST[C!CONSTVAL$0$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; MST[C!ADD$C$1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[S] if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXIT_FAILURE ) ; }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
if ( ! multiple_names && optind + 2 < argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[S] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[STMT!TRAPSTMT]MSP[N] program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[STMT!DELSTMT]MSP[S] program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!ADD$C$-1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!ADD$C$1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] emit_mandatory_arg_note () ;
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } if ( multiple_names ) {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) MST[STMT!TRAPSTMT]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ; MST[STMT!TRAPSTMT]MSP[N]
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) MST[@!ABS$@$]MSP[N] {
if ( ! multiple_names && optind + 2 < argc ) { error ( 0 , 0 , _ ( lr_8 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( multiple_names ) MST[@!ABS$@$]MSP[N] {
for (; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ; MST[STMT!DELSTMT]MSP[S]
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[STMT!TRAPSTMT]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[STMT!DELSTMT]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[A!CONSTVAL$0$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[A!CONSTVAL$0$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[@!ABS$@$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[@!ABS$@$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[@!ABS$@$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[@!ABS$@$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[P!PRIGHTDEC$P$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[P!PLEFTINC$P$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[P!PRIGHTINC$P$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[P!PLEFTDEC$P$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; MST[STMT!TRAPSTMT]MSP[N] } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[C!CONSTVAL$0$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[C!ADD$C$1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[@!ABS$@$]MSP[N] printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[STMT!TRAPSTMT]MSP[N] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[STMT!DELSTMT]MSP[S] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) MST[STMT!DELSTMT]MSP[N] perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } MST[STMT!TRAPSTMT]MSP[N] else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } MST[STMT!DELSTMT]MSP[N] else perform_basename ( argv [ optind ] , optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!DELSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PRIGHTDEC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PLEFTINC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PRIGHTINC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PLEFTDEC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[C!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[C!ADD$C$-1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[C!ADD$C$1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!ABS$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!NEG$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] } exit ( status ) ; }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!NEG$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!ABS$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[N] }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!ABS$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[N] }
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEG$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEG$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!DELSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[A!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[C!CONSTVAL$0$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[C!ADD$C$1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PRIGHTDEC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PLEFTINC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PRIGHTINC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[P!PLEFTDEC$P$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!ABS$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEG$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEG$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!DELSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!TRAPSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[STMT!DELSTMT]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[@!ABS$@$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
for (; optind < argc ; optind ++ ) perform_basename ( argv [ optind ] , suffix , use_nuls ) ; } else perform_basename ( argv [ optind ] , MST[CALL!SHUFFLEARGS$2$]MSP[N] optind + 2 == argc ? argv [ optind + 1 ] : NULL , use_nuls ) ;
exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[N] }
exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[N] }
{ char * name = base_name ( string ) ; MST[STMT!TRAPSTMT]MSP[N] strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; MST[STMT!DELSTMT]MSP[N] strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; MST[STMT!TRAPSTMT]MSP[N] if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; MST[STMT!DELSTMT]MSP[N] if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; MST[@!ABS$@$]MSP[N] if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[STMT!TRAPSTMT]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
{ char * name = base_name ( string ) ; strip_trailing_slashes ( name ) ; if ( suffix && IS_RELATIVE_FILE_NAME ( name ) && ! FILE_SYSTEM_PREFIX_LEN ( name ) ) MST[@!ABS$@$]MSP[N] remove_suffix ( name , suffix ) ; fputs ( name , stdout ) ;
