static char * hide_problematic_chars ( char * cell ) { char * p = cell ; while ( * p ) { if ( iscntrl ( to_uchar ( * p ) ) ) * p = '?' ; p ++ ; } return cell ; } static void
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
size_t row ; for ( row = 0 ; row < nrows ; row ++ ) { size_t col ; for ( col = 0 ; col < ncolumns ; col ++ ) { char * cell = table [ row ] [ col ] ;
if ( col != 0 ) putchar ( ' ' ) ; int flags = 0 ; if ( col == ncolumns - 1 ) flags = MBA_NO_RIGHT_PAD ; size_t width = columns [ col ] -> width ;
cell = ambsalign ( cell , & width , columns [ col ] -> align , flags ) ; fputs ( cell ? cell : table [ row ] [ col ] , stdout ) ; free ( cell ) ;
IF_LINT ( free ( table [ row ] [ col ] ) ) ; } putchar ( '\n' ) ; IF_LINT ( free ( table [ row ] ) ) ; } IF_LINT ( free ( table ) ) ; } static void
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
char * arg_writable = xstrdup ( arg ) ; char * s = arg_writable ; do { char * comma = strchr ( s , ',' ) ; if ( comma ) * comma ++ = 0 ; display_field_t field = - 1 ; unsigned int i ;
for ( i = 0 ; i < ARRAY_CARDINALITY ( field_data ) ; i ++ ) { if ( STREQ ( field_data [ i ] . arg , s ) ) { field = i ; break; } } if ( field == - 1 ) {
error ( 0 , 0 , _ ( lr_2 ) , quote ( s ) ) ; usage ( EXIT_FAILURE ) ; } if ( field_data [ field ] . used ) { error ( 0 , 0 , _ ( lr_3 ) ,
quote ( field_data [ field ] . arg ) ) ; usage ( EXIT_FAILURE ) ; } switch ( field ) { case SOURCE_FIELD : case FSTYPE_FIELD : case USED_FIELD : case PCENT_FIELD : case ITOTAL_FIELD : case IUSED_FIELD : case IAVAIL_FIELD : case IPCENT_FIELD : case TARGET_FIELD :
case FILE_FIELD : alloc_field ( field , NULL ) ; break; case SIZE_FIELD : alloc_field ( field , N_ ( lr_4 ) ) ; break; case AVAIL_FIELD : alloc_field ( field , N_ ( lr_5 ) ) ; break; default: assert ( ! lr_6 ) ; }
s = comma ; } while ( s ); free ( arg_writable ) ; } static void get_field_list ( void ) { switch ( header_mode ) { case DEFAULT_MODE : alloc_field ( SOURCE_FIELD , NULL ) ; if ( print_type ) alloc_field ( FSTYPE_FIELD , NULL ) ;
alloc_field ( SIZE_FIELD , NULL ) ; alloc_field ( USED_FIELD , NULL ) ; alloc_field ( AVAIL_FIELD , NULL ) ; alloc_field ( PCENT_FIELD , NULL ) ; alloc_field ( TARGET_FIELD , NULL ) ; break; case HUMAN_MODE : alloc_field ( SOURCE_FIELD , NULL ) ; if ( print_type )
alloc_field ( FSTYPE_FIELD , NULL ) ; alloc_field ( SIZE_FIELD , N_ ( lr_4 ) ) ; alloc_field ( USED_FIELD , NULL ) ; alloc_field ( AVAIL_FIELD , N_ ( lr_5 ) ) ; alloc_field ( PCENT_FIELD , NULL ) ; alloc_field ( TARGET_FIELD , NULL ) ; break;
case INODES_MODE : alloc_field ( SOURCE_FIELD , NULL ) ; if ( print_type ) alloc_field ( FSTYPE_FIELD , NULL ) ; alloc_field ( ITOTAL_FIELD , NULL ) ; alloc_field ( IUSED_FIELD , NULL ) ; alloc_field ( IAVAIL_FIELD , NULL ) ; alloc_field ( IPCENT_FIELD , NULL ) ;
alloc_field ( TARGET_FIELD , NULL ) ; break; case POSIX_MODE : alloc_field ( SOURCE_FIELD , NULL ) ; if ( print_type ) alloc_field ( FSTYPE_FIELD , NULL ) ; alloc_field ( SIZE_FIELD , NULL ) ; alloc_field ( USED_FIELD , NULL ) ; alloc_field ( AVAIL_FIELD , NULL ) ;
alloc_field ( PCENT_FIELD , N_ ( lr_7 ) ) ; alloc_field ( TARGET_FIELD , NULL ) ; break; case OUTPUT_MODE : if ( ! ncolumns ) { decode_output_arg ( all_args_string ) ; } break; default: assert ( ! lr_8 ) ; } } static void get_header ( void ) {
size_t col ; alloc_table_row () ; for ( col = 0 ; col < ncolumns ; col ++ ) { char * cell = NULL ; char const * header = _ ( columns [ col ] -> caption ) ;
if ( columns [ col ] -> field == SIZE_FIELD && ( header_mode == DEFAULT_MODE || ( header_mode == OUTPUT_MODE && ! ( human_output_opts & human_autoscale ) ) ) ) { char buf [ LONGEST_HUMAN_READABLE + 1 ] ; int opts = ( human_suppress_point_zero | human_autoscale | human_SI
| ( human_output_opts & ( human_group_digits | human_base_1024 | human_B ) ) ) ; uintmax_t q1000 = output_block_size ; uintmax_t q1024 = output_block_size ; bool divisible_by_1000 ; bool divisible_by_1024 ; do { divisible_by_1000 = q1000 % 1000 == 0 ; q1000 /= 1000 ;
divisible_by_1024 = q1024 % 1024 == 0 ; q1024 /= 1024 ; } while ( divisible_by_1000 & divisible_by_1024 ); if ( divisible_by_1000 < divisible_by_1024 ) opts |= human_base_1024 ; if ( divisible_by_1024 < divisible_by_1000 ) opts &= ~ human_base_1024 ; if ( ! ( opts & human_base_1024 ) )
opts |= human_B ; char * num = human_readable ( output_block_size , buf , opts , 1 , 1 ) ; header = _ ( lr_9 ) ; if ( asprintf ( & cell , _ ( lr_10 ) , num , header ) == - 1 )
cell = NULL ; } else if ( header_mode == POSIX_MODE && columns [ col ] -> field == SIZE_FIELD ) { char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; char * num = umaxtostr ( output_block_size , buf ) ;
if ( asprintf ( & cell , _ ( lr_10 ) , num , header ) == - 1 ) cell = NULL ; } else cell = strdup ( header ) ; if ( ! cell ) xalloc_die () ; hide_problematic_chars ( cell ) ;
table [ nrows - 1 ] [ col ] = cell ; columns [ col ] -> width = MAX ( columns [ col ] -> width , mbswidth ( cell , 0 ) ) ; } } static bool _GL_ATTRIBUTE_PURE selected_fstype ( const char * fstype ) {
const struct fs_type_list * fsp ; if ( fs_select_list == NULL || fstype == NULL ) return true ; for ( fsp = fs_select_list ; fsp ; fsp = fsp -> fs_next ) if ( STREQ ( fstype , fsp -> fs_name ) ) return true ; return false ;
} static bool _GL_ATTRIBUTE_PURE excluded_fstype ( const char * fstype ) { const struct fs_type_list * fsp ; if ( fs_exclude_list == NULL || fstype == NULL ) return false ; for ( fsp = fs_exclude_list ; fsp ; fsp = fsp -> fs_next )
if ( STREQ ( fstype , fsp -> fs_name ) ) return true ; return false ; } static void filter_mount_list ( void ) { struct mount_entry * me ; struct devlist * devlist_head = NULL ; for ( me = mount_list ; me ; ) {
struct stat buf ; struct devlist * devlist ; struct mount_entry * discard_me = NULL ; if ( - 1 == stat ( me -> me_mountdir , & buf ) ) { buf . st_dev = me -> me_dev ; } else {
if ( strchr ( me -> me_devname , '/' ) ) { for ( devlist = devlist_head ; devlist ; devlist = devlist -> next ) if ( devlist -> dev_num == buf . st_dev ) break; if ( devlist ) { discard_me = me ;
if ( ! strchr ( devlist -> me -> me_devname , '/' ) || ( strlen ( devlist -> me -> me_mountdir ) > strlen ( me -> me_mountdir ) ) ) { discard_me = devlist -> me ; devlist -> me = me ; } } } }
if ( discard_me ) { me = me -> me_next ; free_mount_entry ( discard_me ) ; } else { devlist = xmalloc ( sizeof *devlist ) ; devlist -> me = me ; devlist -> dev_num = buf . st_dev ; devlist -> next = devlist_head ;
devlist_head = devlist ; me = me -> me_next ; } } mount_list = NULL ; while ( devlist_head ) { me = devlist_head -> me ; me -> me_next = mount_list ; mount_list = me ; struct devlist * devlist = devlist_head -> next ;
free ( devlist_head ) ; devlist_head = devlist ; } } static bool known_value ( uintmax_t n ) { return n < UINTMAX_MAX - 1 ; } static char const * df_readable ( bool negative , uintmax_t n , char * buf , uintmax_t input_units , uintmax_t output_units ) {
if ( ! known_value ( n ) && ! negative ) return lr_11 ; else { char * p = human_readable ( negative ? - n : n , buf + negative , human_output_opts , input_units , output_units ) ; if ( negative ) * -- p = '-' ;
return p ; } } static void add_uint_with_neg_flag ( uintmax_t * dest , bool * dest_neg , uintmax_t src , bool src_neg ) { if ( LOG_EQ ( * dest_neg , src_neg ) ) { * dest += src ; return; } if ( * dest_neg )
* dest = - * dest ; if ( src_neg ) src = - src ; if ( src < * dest ) * dest -= src ; else { * dest = src - * dest ; * dest_neg = src_neg ; } if ( * dest_neg )
* dest = - * dest ; } static bool _GL_ATTRIBUTE_PURE has_uuid_suffix ( char const * s ) { size_t len = strlen ( s ) ; return ( 36 < len && strspn ( s + len - 36 , lr_12 ) == 36 ) ; } static void
get_field_values ( struct field_values_t * bv , struct field_values_t * iv , const struct fs_usage * fsu ) { iv -> input_units = iv -> output_units = 1 ; iv -> total = fsu -> fsu_files ; iv -> available = iv -> available_to_root = fsu -> fsu_ffree ;
iv -> negate_available = false ; iv -> used = UINTMAX_MAX ; iv -> negate_used = false ; if ( known_value ( iv -> total ) && known_value ( iv -> available_to_root ) ) { iv -> used = iv -> total - iv -> available_to_root ;
iv -> negate_used = ( iv -> total < iv -> available_to_root ) ; } bv -> input_units = fsu -> fsu_blocksize ; bv -> output_units = output_block_size ; bv -> total = fsu -> fsu_blocks ; bv -> available = fsu -> fsu_bavail ;
bv -> available_to_root = fsu -> fsu_bfree ; bv -> negate_available = ( fsu -> fsu_bavail_top_bit_set && known_value ( fsu -> fsu_bavail ) ) ; bv -> used = UINTMAX_MAX ; bv -> negate_used = false ;
if ( known_value ( bv -> total ) && known_value ( bv -> available_to_root ) ) { bv -> used = bv -> total - bv -> available_to_root ; bv -> negate_used = ( bv -> total < bv -> available_to_root ) ; } } static void
add_to_grand_total ( struct field_values_t * bv , struct field_values_t * iv ) { if ( known_value ( iv -> total ) ) grand_fsu . fsu_files += iv -> total ; if ( known_value ( iv -> available ) ) grand_fsu . fsu_ffree += iv -> available ;
if ( known_value ( bv -> total ) ) grand_fsu . fsu_blocks += bv -> input_units * bv -> total ; if ( known_value ( bv -> available_to_root ) ) grand_fsu . fsu_bfree += bv -> input_units * bv -> available_to_root ;
if ( known_value ( bv -> available ) ) add_uint_with_neg_flag ( & grand_fsu . fsu_bavail , & grand_fsu . fsu_bavail_top_bit_set , bv -> input_units * bv -> available , bv -> negate_available ) ; } static void
get_dev ( char const * disk , char const * mount_point , char const * file , char const * stat_file , char const * fstype , bool me_dummy , bool me_remote , const struct fs_usage * force_fsu , bool process_all ) { if ( me_remote && show_local_fs ) return;
if ( me_dummy && ! show_all_fs && ! show_listed_fs ) return; if ( ! selected_fstype ( fstype ) || excluded_fstype ( fstype ) ) return; if ( ! stat_file ) stat_file = mount_point ? mount_point : disk ; struct fs_usage fsu ; if ( force_fsu )
fsu = * force_fsu ; else if ( get_fs_usage ( stat_file , disk , & fsu ) ) { error ( 0 , errno , lr_13 , quote ( stat_file ) ) ; exit_status = EXIT_FAILURE ; return; }
if ( fsu . fsu_blocks == 0 && ! show_all_fs && ! show_listed_fs ) return; if ( ! force_fsu ) file_systems_processed = true ; alloc_table_row () ; if ( ! disk ) disk = lr_11 ; if ( ! file ) file = lr_11 ;
char * dev_name = xstrdup ( disk ) ; char * resolved_dev ; if ( process_all && has_uuid_suffix ( dev_name ) && ( resolved_dev = canonicalize_filename_mode ( dev_name , CAN_EXISTING ) ) ) { free ( dev_name ) ; dev_name = resolved_dev ; } if ( ! fstype )
fstype = lr_11 ; struct field_values_t block_values ; struct field_values_t inode_values ; get_field_values ( & block_values , & inode_values , & fsu ) ; if ( print_grand_total && ! force_fsu ) add_to_grand_total ( & block_values , & inode_values ) ; size_t col ;
for ( col = 0 ; col < ncolumns ; col ++ ) { char buf [ LONGEST_HUMAN_READABLE + 2 ] ; char * cell ; struct field_values_t * v ; switch ( columns [ col ] -> field_type ) { case BLOCK_FLD : v = & block_values ; break;
case INODE_FLD : v = & inode_values ; break; case OTHER_FLD : v = NULL ; break; default: assert ( ! lr_14 ) ; } switch ( columns [ col ] -> field ) { case SOURCE_FIELD : cell = xstrdup ( dev_name ) ; break; case FSTYPE_FIELD :
cell = xstrdup ( fstype ) ; break; case SIZE_FIELD : case ITOTAL_FIELD : cell = xstrdup ( df_readable ( false , v -> total , buf , v -> input_units , v -> output_units ) ) ; break; case USED_FIELD : case IUSED_FIELD :
cell = xstrdup ( df_readable ( v -> negate_used , v -> used , buf , v -> input_units , v -> output_units ) ) ; break; case AVAIL_FIELD : case IAVAIL_FIELD : cell = xstrdup ( df_readable ( v -> negate_available , v -> available , buf ,
v -> input_units , v -> output_units ) ) ; break; case PCENT_FIELD : case IPCENT_FIELD : { double pct = - 1 ; if ( ! known_value ( v -> used ) || ! known_value ( v -> available ) ) ; else if ( ! v -> negate_used
&& v -> used <= TYPE_MAXIMUM ( uintmax_t ) / 100 && v -> used + v -> available != 0 && ( v -> used + v -> available < v -> used ) == v -> negate_available ) { uintmax_t u100 = v -> used * 100 ;
uintmax_t nonroot_total = v -> used + v -> available ; pct = u100 / nonroot_total + ( u100 % nonroot_total != 0 ) ; } else { double u = v -> negate_used ? - ( double ) - v -> used : v -> used ;
double a = v -> negate_available ? - ( double ) - v -> available : v -> available ; double nonroot_total = u + a ; if ( nonroot_total ) { long int lipct = pct = u * 100 / nonroot_total ; double ipct = lipct ;
if ( ipct - 1 < pct && pct <= ipct + 1 ) pct = ipct + ( ipct < pct ) ; } } if ( 0 <= pct ) { if ( asprintf ( & cell , lr_15 , pct ) == - 1 )
cell = NULL ; } else cell = strdup ( lr_11 ) ; if ( ! cell ) xalloc_die () ; break; } case FILE_FIELD : cell = xstrdup ( file ) ; break; case TARGET_FIELD : #ifdef HIDE_AUTOMOUNT_PREFIX if ( STRNCMP_LIT ( mount_point , lr_16 ) == 0 )
mount_point += 5 ; else if ( STRNCMP_LIT ( mount_point , lr_17 ) == 0 ) mount_point += 8 ; #endif cell = xstrdup ( mount_point ) ; break; default: assert ( ! lr_18 ) ; } if ( ! cell ) assert ( ! lr_19 ) ;
hide_problematic_chars ( cell ) ; columns [ col ] -> width = MAX ( columns [ col ] -> width , mbswidth ( cell , 0 ) ) ; table [ nrows - 1 ] [ col ] = cell ; } free ( dev_name ) ; } static bool
get_disk ( char const * disk ) { struct mount_entry const * me ; struct mount_entry const * best_match = NULL ; char const * file = disk ; char * resolved = canonicalize_file_name ( disk ) ; if ( resolved && resolved [ 0 ] == '/' )
disk = resolved ; size_t best_match_len = SIZE_MAX ; for ( me = mount_list ; me ; me = me -> me_next ) { if ( STREQ ( disk , me -> me_devname ) ) { size_t len = strlen ( me -> me_mountdir ) ;
if ( len < best_match_len ) { best_match = me ; if ( len == 1 ) break; else best_match_len = len ; } } } free ( resolved ) ; if ( best_match ) { get_dev ( best_match -> me_devname , best_match -> me_mountdir , file , NULL ,
best_match -> me_type , best_match -> me_dummy , best_match -> me_remote , NULL , false ) ; return true ; } return false ; } static void get_point ( const char * point , const struct stat * statp ) { struct stat disk_stats ; struct mount_entry * me ;
struct mount_entry const * best_match = NULL ; char * resolved = canonicalize_file_name ( point ) ; if ( resolved && resolved [ 0 ] == '/' ) { size_t resolved_len = strlen ( resolved ) ; size_t best_match_len = 0 ;
for ( me = mount_list ; me ; me = me -> me_next ) { if ( ! STREQ ( me -> me_type , lr_20 ) && ( ! best_match || best_match -> me_dummy || ! me -> me_dummy ) ) {
size_t len = strlen ( me -> me_mountdir ) ; if ( best_match_len <= len && len <= resolved_len && ( len == 1 || ( ( len == resolved_len || resolved [ len ] == '/' )
&& STREQ_LEN ( me -> me_mountdir , resolved , len ) ) ) ) { best_match = me ; best_match_len = len ; } } } } free ( resolved ) ; if ( best_match && ( stat ( best_match -> me_mountdir , & disk_stats ) != 0
|| disk_stats . st_dev != statp -> st_dev ) ) best_match = NULL ; if ( ! best_match ) for ( me = mount_list ; me ; me = me -> me_next ) { if ( me -> me_dev == ( dev_t ) - 1 ) {
if ( stat ( me -> me_mountdir , & disk_stats ) == 0 ) me -> me_dev = disk_stats . st_dev ; else { if ( errno == EIO ) { error ( 0 , errno , lr_13 , quote ( me -> me_mountdir ) ) ;
exit_status = EXIT_FAILURE ; } me -> me_dev = ( dev_t ) - 2 ; } } if ( statp -> st_dev == me -> me_dev && ! STREQ ( me -> me_type , lr_20 )
&& ( ! best_match || best_match -> me_dummy || ! me -> me_dummy ) ) { if ( stat ( me -> me_mountdir , & disk_stats ) != 0 || disk_stats . st_dev != me -> me_dev ) me -> me_dev = ( dev_t ) - 2 ; else
best_match = me ; } } if ( best_match ) get_dev ( best_match -> me_devname , best_match -> me_mountdir , point , point , best_match -> me_type , best_match -> me_dummy , best_match -> me_remote , NULL , false ) ; else {
char * mp = find_mount_point ( point , statp ) ; if ( mp ) { get_dev ( NULL , mp , point , NULL , NULL , false , false , NULL , false ) ; free ( mp ) ; } } } static void
get_entry ( char const * name , struct stat const * statp ) { if ( ( S_ISBLK ( statp -> st_mode ) || S_ISCHR ( statp -> st_mode ) ) && get_disk ( name ) ) return; get_point ( name , statp ) ; } static void
get_all_entries ( void ) { struct mount_entry * me ; if ( ! show_all_fs ) filter_mount_list () ; for ( me = mount_list ; me ; me = me -> me_next ) get_dev ( me -> me_devname , me -> me_mountdir , NULL , NULL , me -> me_type ,
me -> me_dummy , me -> me_remote , NULL , true ) ; } static void add_fs_type ( const char * fstype ) { struct fs_type_list * fsp ; fsp = xmalloc ( sizeof *fsp ) ; fsp -> fs_name = ( char * ) fstype ;
fsp -> fs_next = fs_select_list ; fs_select_list = fsp ; } static void add_excluded_fs_type ( const char * fstype ) { struct fs_type_list * fsp ; fsp = xmalloc ( sizeof *fsp ) ; fsp -> fs_name = ( char * ) fstype ; fsp -> fs_next = fs_exclude_list ;
fs_exclude_list = fsp ; } void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_21 ) , program_name ) ; fputs ( _ ( lr_22 ) , stdout ) ; emit_mandatory_arg_note () ;
fputs ( _ ( lr_23 ) , stdout ) ; fputs ( _ ( lr_24 ) , stdout ) ; fputs ( _ ( lr_25 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_blocksize_note ( lr_26 ) ;
emit_size_note () ; fputs ( _ ( lr_27 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { struct stat * stats IF_LINT ( = 0 ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; MST[STMT!DELSTMT]MSP[N] break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
show_all_fs = false ; show_listed_fs = false ; MST[C!ADD$C$-1$]MSP[N] human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
show_all_fs = false ; show_listed_fs = false ; MST[C!ADD$C$1$]MSP[N] human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; MST[C!CONSTVAL$0$]MSP[N] break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; MST[C!ADD$C$1$]MSP[N] break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; MST[STMT!DELSTMT]MSP[N] case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$-1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; MST[STMT!TRAPSTMT]MSP[N] print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ;
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S]
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S]
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S]
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S]
error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } print_type = true ; break; case 'P' : if ( header_mode == OUTPUT_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S]
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; MST[STMT!TRAPSTMT]MSP[N] break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; MST[STMT!DELSTMT]MSP[N] break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; MST[C!CONSTVAL$0$]MSP[N] break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; MST[C!ADD$C$1$]MSP[N] break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; MST[STMT!TRAPSTMT]MSP[N] case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; MST[STMT!DELSTMT]MSP[N] case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; MST[STMT!TRAPSTMT]MSP[N] break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; MST[STMT!DELSTMT]MSP[N] break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; MST[C!CONSTVAL$0$]MSP[N] break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; MST[C!ADD$C$1$]MSP[N] break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; MST[STMT!TRAPSTMT]MSP[N] case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; MST[STMT!DELSTMT]MSP[N] case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; MST[STMT!TRAPSTMT]MSP[N] break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; MST[STMT!DELSTMT]MSP[N] break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; MST[C!ADD$C$-1$]MSP[N] break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; MST[C!ADD$C$1$]MSP[N] break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; MST[STMT!TRAPSTMT]MSP[N] case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; MST[STMT!DELSTMT]MSP[N] case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; MST[STMT!DELSTMT]MSP[N] break; case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; MST[STMT!TRAPSTMT]MSP[N] case 'v' : break; case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; MST[STMT!TRAPSTMT]MSP[N] case 'x' :
usage ( EXIT_FAILURE ) ; } posix_format = true ; break; case SYNC_OPTION : require_sync = true ; break; case NO_SYNC_OPTION : require_sync = false ; break; case 'F' : case 't' : add_fs_type ( optarg ) ; break; case 'v' : break; MST[STMT!DELSTMT]MSP[S] case 'x' :
add_excluded_fs_type ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; MST[STMT!DELSTMT]MSP[S] break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; MST[STMT!TRAPSTMT]MSP[N] case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; MST[STMT!DELSTMT]MSP[N] case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[C!ADD$C$1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; MST[@!ABS$@$]MSP[N] print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; MST[C!CONSTVAL$0$]MSP[N] print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } if ( posix_format && header_mode == DEFAULT_MODE ) {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[STMT!TRAPSTMT]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[@!ABS$@$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; MST[C!ADD$C$-1$]MSP[N] print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[STMT!TRAPSTMT]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[@!ABS$@$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[@!ABS$@$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[C!ADD$C$-1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[C!ADD$C$1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[S] {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; MST[STMT!TRAPSTMT]MSP[N] file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; MST[STMT!DELSTMT]MSP[N] file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
add_excluded_fs_type ( optarg ) ; break; case OUTPUT_OPTION : if ( header_mode == INODES_MODE ) { error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( posix_format && header_mode == DEFAULT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] {
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } header_mode = OUTPUT_MODE ;
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ; MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ; MST[C!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ; MST[C!ADD$C$-1$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_34 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } if ( print_type ) { error ( 0 , 0 , msg_mut_excl , lr_33 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = OUTPUT_MODE ; MST[C!ADD$C$1$]MSP[N]
if ( optarg ) MST[STMT!TRAPSTMT]MSP[N] decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) MST[@!ABS$@$]MSP[N] decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; MST[STMT!DELSTMT]MSP[N] break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; MST[STMT!TRAPSTMT]MSP[N] case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; MST[STMT!DELSTMT]MSP[N] case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; MST[C!CONSTVAL$0$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; MST[C!ADD$C$1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[N] if ( human_output_opts == - 1 ) { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[@!ABS$@$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[@!ABS$@$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[@!ABS$@$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[C!CONSTVAL$0$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[C!ADD$C$-1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[S] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( posix_format ) {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) MST[STMT!TRAPSTMT]MSP[N] {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) MST[@!ABS$@$]MSP[N] {
if ( optarg ) decode_output_arg ( optarg ) ; break; case TOTAL_OPTION : print_grand_total = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( human_output_opts == - 1 ) { if ( posix_format ) MST[@!ABS$@$]MSP[N] {
human_output_opts = 0 ; MST[STMT!TRAPSTMT]MSP[N] output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; MST[STMT!DELSTMT]MSP[N] output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; MST[C!ADD$C$-1$]MSP[N] file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
human_output_opts = 0 ; MST[C!ADD$C$-1$]MSP[N] output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; MST[C!ADD$C$1$]MSP[N] output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[STMT!TRAPSTMT]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; MST[C!ADD$C$1$]MSP[N] file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[STMT!DELSTMT]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; MST[STMT!TRAPSTMT]MSP[N] exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!CONSTVAL$0$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!CONSTVAL$0$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!ADD$C$-1$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!ADD$C$-1$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!ADD$C$1$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; MST[C!ADD$C$1$]MSP[N] } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } MST[STMT!TRAPSTMT]MSP[N] else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } MST[STMT!DELSTMT]MSP[S] else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , MST[STMT!TRAPSTMT]MSP[N] & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , MST[STMT!DELSTMT]MSP[N] & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } MST[STMT!TRAPSTMT]MSP[N] if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[C!CONSTVAL$0$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[C!ADD$C$1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[OR$@1$@2$!OPERAND$@1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[C!CONSTVAL$0$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[C!ADD$C$-1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[C!ADD$C$1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] ;
human_output_opts = 0 ; output_block_size = ( getenv ( lr_35 ) ? 512 : 1024 ) ; } else human_options ( getenv ( lr_36 ) , & human_output_opts , & output_block_size ) ; } if ( header_mode == INODES_MODE || header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] ;
else if ( human_output_opts & human_autoscale ) MST[STMT!TRAPSTMT]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!NEG$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!ABS$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; MST[C!ADD$C$-1$]MSP[N] exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; MST[C!ADD$C$1$]MSP[N] exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[@!ABS$@$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[@!ABS$@$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; MST[STMT!TRAPSTMT]MSP[N] print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
else if ( human_output_opts & human_autoscale ) MST[C!ADD$C$1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) MST[C!ADD$C$1$]MSP[N] header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[STMT!TRAPSTMT]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[STMT!DELSTMT]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[C!CONSTVAL$0$]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[C!ADD$C$-1$]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[C!ADD$C$1$]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[STMT!TRAPSTMT]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; MST[STMT!DELSTMT]MSP[N] else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) MST[STMT!TRAPSTMT]MSP[N] header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) MST[@!ABS$@$]MSP[N] header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) MST[@!ABS$@$]MSP[N] header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[STMT!TRAPSTMT]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[STMT!DELSTMT]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[C!CONSTVAL$0$]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[C!ADD$C$-1$]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[C!ADD$C$1$]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; MST[STMT!TRAPSTMT]MSP[N] { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; MST[STMT!TRAPSTMT]MSP[N] struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; MST[C!ADD$C$-1$]MSP[N] struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; MST[C!ADD$C$1$]MSP[N] struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!DELSTMT]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[@!ABS$@$]MSP[N] {
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!DELSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[@!ABS$@$]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[STMT!TRAPSTMT]MSP[N]
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[STMT!DELSTMT]MSP[N]
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[A!CONSTVAL$0$]MSP[N]
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[C!ADD$C$-1$]MSP[N]
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[C!ADD$C$1$]MSP[N]
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; MST[STMT!TRAPSTMT]MSP[N] break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; MST[C!CONSTVAL$0$]MSP[N] break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; MST[C!ADD$C$1$]MSP[N] break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; MST[STMT!TRAPSTMT]MSP[N] } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; MST[STMT!DELSTMT]MSP[N] } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } MST[STMT!TRAPSTMT]MSP[N] } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!DELSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[A!CONSTVAL$0$]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[C!ADD$C$-1$]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[C!ADD$C$1$]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
struct fs_type_list * fs_excl ; for ( fs_excl = fs_exclude_list ; fs_excl ; fs_excl = fs_excl -> fs_next ) MST[STMT!DELSTMT]MSP[N] { if ( STREQ ( fs_incl -> fs_name , fs_excl -> fs_name ) ) { error ( 0 , 0 , _ ( lr_37 ) ,
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } MST[STMT!TRAPSTMT]MSP[N] if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!DELSTMT]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[A!CONSTVAL$0$]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[C!ADD$C$-1$]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[C!ADD$C$1$]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!TRAPSTMT]MSP[N] {
else if ( human_output_opts & human_autoscale ) header_mode = HUMAN_MODE ; else if ( posix_format ) header_mode = POSIX_MODE ; { bool match = false ; struct fs_type_list * fs_incl ; for ( fs_incl = fs_select_list ; fs_incl ; fs_incl = fs_incl -> fs_next ) MST[STMT!DELSTMT]MSP[N] {
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) MST[STMT!TRAPSTMT]MSP[N] exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) MST[@!ABS$@$]MSP[N] exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) MST[@!ABS$@$]MSP[N] exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; MST[C!ADD$C$-1$]MSP[N] print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; MST[C!ADD$C$1$]MSP[N] print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; MST[STMT!TRAPSTMT]MSP[N] grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N]
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!ABS$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[@!ABS$@$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[@!ABS$@$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[@!ABS$@$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[@!ABS$@$]MSP[N]
quote ( fs_incl -> fs_name ) ) ; match = true ; break; } } } if ( match ) exit ( EXIT_FAILURE ) ; } if ( optind < argc ) { int i ; stats = xnmalloc ( argc - optind , sizeof *stats ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[STMT!DELSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[STMT!DELSTMT]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[@!ABS$@$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[@!ABS$@$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[@!ABS$@$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[P!PLEFTINC$P$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[STMT!TRAPSTMT]MSP[N]
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; MST[C!ADD$C$-1$]MSP[N] grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[C!ADD$C$-1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[C!ADD$C$1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; MST[C!ADD$C$1$]MSP[N] grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!ABS$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N]
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; MST[STMT!TRAPSTMT]MSP[N] bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[OR$@1$@2$!OPERAND$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEG$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!OPERAND$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[S]
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEG$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ABS$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ABS$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[S]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[C!ADD$C$-1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[C!ADD$C$1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N]
for ( i = optind ; i < argc ; ++ i ) { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N]
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PSUB$A1$@2$!OPERAND$A1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[P!PRIGHTDEC$P$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[P!PLEFTINC$P$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[P!PRIGHTINC$P$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) MST[P!PLEFTDEC$P$]MSP[N] { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[STMT!TRAPSTMT]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[STMT!DELSTMT]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[@!ABS$@$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[@!ABS$@$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[@!ABS$@$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; MST[C!CONSTVAL$0$]MSP[S] bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[S] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[P!PLEFTINC$P$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; MST[STMT!TRAPSTMT]MSP[N] argv [ i ] = NULL ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; MST[C!ADD$C$1$]MSP[S] bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] argv [ i ] = NULL ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; MST[STMT!TRAPSTMT]MSP[N] const char * msg_mut_excl = _ ( lr_29 ) ;
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; MST[C!CONSTVAL$0$]MSP[N] argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; MST[C!ADD$C$1$]MSP[N] argv [ i ] = NULL ; }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[STMT!TRAPSTMT]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[STMT!DELSTMT]MSP[S] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[A!CONSTVAL$0$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[@!ABS$@$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[@!ABS$@$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[S] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[P!PRIGHTDEC$P$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[P!PLEFTINC$P$]MSP[N] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[P!PRIGHTINC$P$]MSP[S] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; MST[P!PLEFTDEC$P$]MSP[S] }
&& stat ( argv [ i ] , & stats [ i - optind ] ) ) { error ( 0 , errno , lr_13 , quote ( argv [ i ] ) ) ; exit_status = EXIT_FAILURE ; argv [ i ] = NULL ; } MST[STMT!TRAPSTMT]MSP[N]
if ( 0 <= fd ) MST[STMT!TRAPSTMT]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[@!ABS$@$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] const char * msg_mut_excl = _ ( lr_29 ) ;
if ( 0 <= fd ) MST[@!ABS$@$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[C!ADD$C$-1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[C!ADD$C$1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!ABS$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!BITNOT$@2$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; MST[STMT!TRAPSTMT]MSP[N] } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; MST[STMT!DELSTMT]MSP[N] } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; MST[@!ABS$@$]MSP[N] } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; MST[STMT!TRAPSTMT]MSP[N] } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } MST[STMT!TRAPSTMT]MSP[N] } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
for ( i = optind ; i < argc ; ++ i ) MST[STMT!DELSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[C!CONSTVAL$0$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[C!ADD$C$1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
for ( i = optind ; i < argc ; ++ i ) MST[STMT!DELSTMT]MSP[N] { int fd = open ( argv [ i ] , O_RDONLY | O_NOCTTY ) ; if ( ( fd < 0 || fstat ( fd , & stats [ i - optind ] ) )
if ( 0 <= fd ) close ( fd ) ; } } MST[STMT!TRAPSTMT]MSP[N] mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!OPERAND$@1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!OPERAND$@2$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!OPERAND$@1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!OPERAND$@1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!DELSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[@!ABS$@$]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!TRAPSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL MST[STMT!DELSTMT]MSP[N] || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) MST[STMT!TRAPSTMT]MSP[N] {
if ( 0 <= fd ) close ( fd ) ; } } mount_list = read_file_system_list ( ( fs_select_list != NULL || fs_exclude_list != NULL || print_type || field_data [ FSTYPE_FIELD ] . used || show_local_fs ) ) ; if ( mount_list == NULL ) MST[@!ABS$@$]MSP[N] {
int status = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; MST[C!ADD$C$-1$]MSP[N] const char * msg_mut_excl = _ ( lr_29 ) ;
int status = 0 ; MST[C!ADD$C$-1$]MSP[N] if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; MST[C!ADD$C$1$]MSP[N] if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; MST[C!ADD$C$1$]MSP[N] const char * msg_mut_excl = _ ( lr_29 ) ;
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ; MST[STMT!TRAPSTMT]MSP[N]
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
show_all_fs = false ; show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ; MST[STMT!DELSTMT]MSP[N]
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
while ( true ) MST[STMT!TRAPSTMT]MSP[N] { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
while ( true ) { int oi = - 1 ; MST[STMT!DELSTMT]MSP[S] int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!OPERAND$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!OPERAND$@2$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!OPERAND$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!OPERAND$@1$]MSP[S] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) MST[@!ABS$@$]MSP[N] || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[STMT!TRAPSTMT]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[STMT!DELSTMT]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[C!CONSTVAL$0$]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; MST[C!ADD$C$1$]MSP[N] }
int status = 0 ; if ( ! ( optind < argc ) || ( show_all_fs || show_local_fs || fs_select_list != NULL || fs_exclude_list != NULL ) ) { status = EXIT_FAILURE ; } MST[STMT!TRAPSTMT]MSP[N]
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[STMT!TRAPSTMT]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[STMT!DELSTMT]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[@!ABS$@$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[C!ADD$C$-1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[C!ADD$C$1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[STMT!DELSTMT]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[@!ABS$@$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[@!ABS$@$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } MST[STMT!TRAPSTMT]MSP[N] if ( require_sync ) sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) MST[STMT!TRAPSTMT]MSP[N] sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) MST[@!ABS$@$]MSP[N] sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) MST[@!ABS$@$]MSP[N] sync () ; get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; MST[STMT!TRAPSTMT]MSP[N] get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; MST[STMT!DELSTMT]MSP[N] get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; MST[STMT!TRAPSTMT]MSP[N] get_field_list () ; get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; MST[STMT!TRAPSTMT]MSP[N] get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; MST[STMT!DELSTMT]MSP[N] get_header () ;
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ; MST[STMT!TRAPSTMT]MSP[N]
const char * warning = ( status == 0 ? _ ( lr_38 ) : lr_28 ) ; error ( status , errno , lr_39 , warning , _ ( lr_40 ) ) ; } if ( require_sync ) sync () ; get_field_list () ; get_header () ; MST[STMT!DELSTMT]MSP[N]
if ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[@!ABS$@$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; MST[STMT!TRAPSTMT]MSP[N] for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; MST[STMT!DELSTMT]MSP[N] for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; MST[C!CONSTVAL$0$]MSP[N] for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; MST[C!ADD$C$1$]MSP[N] for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
while ( true ) { int oi = - 1 ; MST[@!ABS$@$]MSP[S] int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; MST[C!CONSTVAL$0$]MSP[S] int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEG$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
while ( true ) { int oi = - 1 ; MST[C!ADD$C$-1$]MSP[S] int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEG$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[STMT!TRAPSTMT]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ABS$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!ABS$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[STMT!DELSTMT]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[STMT!TRAPSTMT]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[A!CONSTVAL$0$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[A!CONSTVAL$0$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[@!ABS$@$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[@!ABS$@$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[@!ABS$@$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[P!PRIGHTDEC$P$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[P!PLEFTINC$P$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[P!PRIGHTINC$P$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) MST[P!PLEFTDEC$P$]MSP[N] get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$V2$!ASSIGN$V2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!ABS$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[@!ABS$@$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[S]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[STMT!DELSTMT]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[@!ABS$@$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[C!CONSTVAL$0$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[C!ADD$C$1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[STMT!TRAPSTMT]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
if ( optind < argc ) { int i ; show_listed_fs = true ; for ( i = optind ; i < argc ; ++ i ) MST[STMT!DELSTMT]MSP[N] if ( argv [ i ] ) get_entry ( argv [ i ] , & stats [ i - optind ] ) ;
} MST[STMT!TRAPSTMT]MSP[N] else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} MST[STMT!DELSTMT]MSP[N] else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; MST[STMT!TRAPSTMT]MSP[N] if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; MST[STMT!DELSTMT]MSP[N] if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) MST[STMT!TRAPSTMT]MSP[N] { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) MST[@!ABS$@$]MSP[N] { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) MST[@!ABS$@$]MSP[N] { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) MST[STMT!TRAPSTMT]MSP[N] get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) MST[@!ABS$@$]MSP[N] get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) MST[@!ABS$@$]MSP[N] get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[STMT!TRAPSTMT]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[STMT!DELSTMT]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[@!ABS$@$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , MST[STMT!TRAPSTMT]MSP[N] ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ;
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ; MST[STMT!TRAPSTMT]MSP[N]
} else get_all_entries () ; if ( file_systems_processed ) { if ( print_grand_total ) get_dev ( lr_41 , ( field_data [ SOURCE_FIELD ] . used ? lr_11 : lr_41 ) , NULL , NULL , NULL , false , false , & grand_fsu , false ) ; print_table () ; MST[STMT!DELSTMT]MSP[N]
} MST[STMT!TRAPSTMT]MSP[N] else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} MST[STMT!DELSTMT]MSP[N] else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[A!CONSTVAL$0$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[@!ABS$@$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; MST[STMT!TRAPSTMT]MSP[N] } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; MST[STMT!DELSTMT]MSP[N] } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; MST[STMT!TRAPSTMT]MSP[N] } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; MST[STMT!TRAPSTMT]MSP[N] }
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; MST[STMT!DELSTMT]MSP[N] }
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[@!ABS$@$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
} else { if ( exit_status == EXIT_SUCCESS ) error ( EXIT_FAILURE , 0 , _ ( lr_42 ) ) ; } IF_LINT ( free ( columns ) ) ; exit ( exit_status ) ; MST[@!ABS$@$]MSP[N] }
alloc_table_row ( void ) { nrows ++ ; MST[STMT!TRAPSTMT]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[STMT!DELSTMT]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[P!PRIGHTDEC$P$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[P!PLEFTINC$P$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[@!ABS$@$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[@!ABS$@$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[C!CONSTVAL$0$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[C!ADD$C$1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[P!PRIGHTINC$P$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , MST[P!PLEFTDEC$P$]MSP[N] & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[STMT!TRAPSTMT]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[STMT!TRAPSTMT]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[STMT!DELSTMT]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[A!CONSTVAL$0$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[A!CONSTVAL$0$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[@!ABS$@$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[P!PLEFTINC$P$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[P!PRIGHTINC$P$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[P!PLEFTDEC$P$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[C!CONSTVAL$0$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[C!ADD$C$-1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[A!CONSTVAL$0$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[A!CONSTVAL$0$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[A!CONSTVAL$0$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[@!ABS$@$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[@!ABS$@$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[@!ABS$@$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[C!ADD$C$1$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[P!PLEFTINC$P$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[P!PRIGHTINC$P$]MSP[N] } static void print_table ( void ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[P!PLEFTDEC$P$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] } static void print_table ( void ) {
alloc_table_row ( void ) { nrows ++ ; table = xnrealloc ( table , nrows , sizeof ( char * ) ) ; table [ nrows - 1 ] = xnmalloc ( ncolumns , sizeof ( char * ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } static void print_table ( void ) {
static char * hide_problematic_chars ( char * cell ) { char * p = cell ; while ( * p ) { if ( iscntrl ( to_uchar ( * p ) ) ) * p = '?' ; p ++ ; } return cell ; } static void MST[STMT!TRAPSTMT]MSP[N]
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[STMT!DELSTMT]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[@!ABS$@$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[@!ABS$@$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[C!CONSTVAL$0$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[C!ADD$C$1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[STMT!TRAPSTMT]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[STMT!DELSTMT]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[A!CONSTVAL$0$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[A!CONSTVAL$0$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[@!ABS$@$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[P!PLEFTINC$P$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[P!PRIGHTINC$P$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[P!PLEFTDEC$P$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!DELSTMT]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( c != NULL )
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[A!CONSTVAL$0$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[@!ABS$@$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[@!ABS$@$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[@!ABS$@$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[@!ABS$@$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[C!ADD$C$1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[P!PRIGHTDEC$P$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[P!PLEFTINC$P$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[P!PRIGHTINC$P$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[P!PLEFTDEC$P$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] if ( c != NULL )
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL ) MST[STMT!TRAPSTMT]MSP[N]
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
alloc_field ( int f , const char * c ) { ncolumns ++ ; columns = xnrealloc ( columns , ncolumns , sizeof ( struct field_data_t * ) ) ; columns [ ncolumns - 1 ] = & field_data [ f ] ; if ( c != NULL ) MST[@!ABS$@$]MSP[N]
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[S] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!DELSTMT]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[A!CONSTVAL$0$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[A!CONSTVAL$0$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[@!ABS$@$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[@!ABS$@$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[C!ADD$C$1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[C!ADD$C$-1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[C!ADD$C$1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[P!PRIGHTDEC$P$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[P!PLEFTINC$P$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[P!PRIGHTINC$P$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[P!PLEFTDEC$P$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; MST[STMT!TRAPSTMT]MSP[N] if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[STMT!TRAPSTMT]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[@!ABS$@$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[@!ABS$@$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[@!ABS$@$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[@!ABS$@$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] assert ( ! lr_1 ) ; field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; MST[STMT!TRAPSTMT]MSP[N] field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; MST[STMT!DELSTMT]MSP[N] field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] field_data [ f ] . used = true ; } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[STMT!TRAPSTMT]MSP[N] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[STMT!DELSTMT]MSP[N] } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[@!ABS$@$]MSP[N] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[@!ABS$@$]MSP[N] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[C!CONSTVAL$0$]MSP[N] } static void decode_output_arg ( char const * arg ) {
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[C!ADD$C$1$]MSP[S] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] } static void decode_output_arg ( char const * arg ) {
columns [ ncolumns - 1 ] -> caption = c ; if ( field_data [ f ] . used ) assert ( ! lr_1 ) ; field_data [ f ] . used = true ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] } static void decode_output_arg ( char const * arg ) {
IF_LINT ( free ( table [ row ] [ col ] ) ) ; } putchar ( '\n' ) ; IF_LINT ( free ( table [ row ] ) ) ; } IF_LINT ( free ( table ) ) ; } static void MST[STMT!TRAPSTMT]MSP[N]
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; MST[STMT!TRAPSTMT]MSP[N] switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; MST[STMT!DELSTMT]MSP[N] switch ( c ) { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[STMT!TRAPSTMT]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) MST[@!ABS$@$]MSP[N] { case 'a' : show_all_fs = true ; break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; MST[STMT!TRAPSTMT]MSP[N] break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; MST[STMT!DELSTMT]MSP[N] break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fs_select_list = NULL ; fs_exclude_list = NULL ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] fs_select_list = NULL ; fs_exclude_list = NULL ;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; MST[C!CONSTVAL$0$]MSP[N] break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; MST[C!ADD$C$1$]MSP[N] break;
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break; MST[STMT!TRAPSTMT]MSP[N]
while ( true ) { int oi = - 1 ; int c = getopt_long ( argc , argv , lr_30 , long_options , & oi ) ; if ( c == - 1 ) break; switch ( c ) { case 'a' : show_all_fs = true ; break; MST[STMT!DELSTMT]MSP[N]
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , MST[STMT!TRAPSTMT]MSP[N] & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , MST[STMT!DELSTMT]MSP[N] & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] fs_select_list = NULL ; fs_exclude_list = NULL ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; MST[STMT!TRAPSTMT]MSP[N] fs_exclude_list = NULL ;
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , MST[@!ABS$@$]MSP[N] & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[STMT!TRAPSTMT]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; MST[STMT!DELSTMT]MSP[N] fs_exclude_list = NULL ;
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ; MST[STMT!TRAPSTMT]MSP[N]
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_28 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; fs_select_list = NULL ; fs_exclude_list = NULL ; MST[STMT!DELSTMT]MSP[N]
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[@!ABS$@$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[C!ADD$C$-1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) MST[C!ADD$C$1$]MSP[N] xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[STMT!TRAPSTMT]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[STMT!DELSTMT]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[@!ABS$@$]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[@!ABS$@$]MSP[S] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[@!ABS$@$]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[@!ABS$@$]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
show_all_fs = false ; MST[STMT!TRAPSTMT]MSP[N] show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } break; case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; MST[STMT!TRAPSTMT]MSP[N] case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; MST[STMT!DELSTMT]MSP[S] case 'i' : if ( header_mode == OUTPUT_MODE ) {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[C!CONSTVAL$0$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$-1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$1$]MSP[S] {
show_all_fs = false ; MST[STMT!DELSTMT]MSP[N] show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
case 'B' : { enum strtol_error e = human_options ( optarg , & human_output_opts , & output_block_size ) ; if ( e != LONGINT_OK ) xstrtol_fatal ( e , oi , c , long_options , optarg ) ; } break; case 'i' : if ( header_mode == OUTPUT_MODE ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[STMT!TRAPSTMT]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[STMT!DELSTMT]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[C!CONSTVAL$0$]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; MST[C!ADD$C$1$]MSP[N] break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; MST[STMT!TRAPSTMT]MSP[N] case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; MST[STMT!DELSTMT]MSP[N] case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; MST[STMT!TRAPSTMT]MSP[N] output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[S] output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; MST[C!CONSTVAL$0$]MSP[S] output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; MST[C!ADD$C$-1$]MSP[S] output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; MST[C!ADD$C$1$]MSP[S] output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; MST[STMT!TRAPSTMT]MSP[N] break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; MST[STMT!DELSTMT]MSP[N] break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; MST[C!CONSTVAL$0$]MSP[N] break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; MST[C!ADD$C$1$]MSP[S] break; case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; MST[STMT!TRAPSTMT]MSP[N] case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; MST[STMT!DELSTMT]MSP[S] case 'H' : human_output_opts = human_autoscale | human_SI ;
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ; MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ; MST[C!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ; MST[C!ADD$C$-1$]MSP[N]
error ( 0 , 0 , msg_mut_excl , lr_31 , lr_32 ) ; usage ( EXIT_FAILURE ) ; } header_mode = INODES_MODE ; break; case 'h' : human_output_opts = human_autoscale | human_SI | human_base_1024 ; output_block_size = 1 ; break; case 'H' : human_output_opts = human_autoscale | human_SI ; MST[C!ADD$C$1$]MSP[N]
output_block_size = 1 ; MST[STMT!TRAPSTMT]MSP[N] break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
show_all_fs = false ; MST[C!ADD$C$-1$]MSP[N] show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
output_block_size = 1 ; MST[C!CONSTVAL$0$]MSP[N] break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; MST[C!ADD$C$1$]MSP[N] break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; MST[STMT!TRAPSTMT]MSP[N] case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; MST[STMT!DELSTMT]MSP[N] case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; MST[STMT!TRAPSTMT]MSP[N] output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
show_all_fs = false ; MST[C!ADD$C$1$]MSP[N] show_listed_fs = false ; human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
show_all_fs = false ; show_listed_fs = false ; MST[STMT!TRAPSTMT]MSP[N] human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; MST[C!ADD$C$-1$]MSP[N] output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; MST[C!ADD$C$1$]MSP[N] output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; MST[STMT!TRAPSTMT]MSP[N] break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[S] break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
show_all_fs = false ; show_listed_fs = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] human_output_opts = - 1 ; print_type = false ; file_systems_processed = false ; exit_status = EXIT_SUCCESS ; print_grand_total = false ; grand_fsu . fsu_blocksize = 1 ; bool posix_format = false ; const char * msg_mut_excl = _ ( lr_29 ) ;
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; MST[C!CONSTVAL$0$]MSP[N] break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; MST[C!ADD$C$-1$]MSP[N] break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; MST[C!ADD$C$1$]MSP[N] break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; MST[STMT!TRAPSTMT]MSP[N] case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; MST[STMT!DELSTMT]MSP[N] case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; MST[STMT!DELSTMT]MSP[S] break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[S] break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; MST[C!CONSTVAL$0$]MSP[S] break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; MST[C!ADD$C$1$]MSP[S] break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; MST[STMT!DELSTMT]MSP[N] case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; MST[STMT!TRAPSTMT]MSP[N] output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; MST[C!ADD$C$-1$]MSP[N] output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; MST[C!ADD$C$1$]MSP[N] output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; MST[STMT!TRAPSTMT]MSP[N] break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; MST[C!CONSTVAL$0$]MSP[N] break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; MST[C!ADD$C$-1$]MSP[N] break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; MST[C!ADD$C$1$]MSP[N] break; case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; MST[STMT!TRAPSTMT]MSP[N] case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; MST[STMT!DELSTMT]MSP[N] case 'T' : if ( header_mode == OUTPUT_MODE ) {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[STMT!TRAPSTMT]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[@!ABS$@$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[C!CONSTVAL$0$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$-1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[C!ADD$C$1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!NEG$@1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!ABS$@1$]MSP[S] {
output_block_size = 1 ; break; case 'k' : human_output_opts = 0 ; output_block_size = 1024 ; break; case 'l' : show_local_fs = true ; break; case 'm' : human_output_opts = 0 ; output_block_size = 1024 * 1024 ; break; case 'T' : if ( header_mode == OUTPUT_MODE ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ;
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c )
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; }
static char const dot = '.' ; bool use_nuls = false ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; MST[C!ADD$C$-1$]MSP[N] char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; MST[C!ADD$C$1$]MSP[N] char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ;
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!TRAPSTMT]MSP[N]
static char const dot = '.' ; bool use_nuls = false ; char const * result ; size_t len ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!DELSTMT]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) MST[STMT!TRAPSTMT]MSP[N] { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[STMT!DELSTMT]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[A!CONSTVAL$0$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[@!ABS$@$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[@!ABS$@$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PLEFTINC$P$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( c == - 1 ) break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[STMT!TRAPSTMT]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[@!ABS$@$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[C!CONSTVAL$0$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[C!ADD$C$-1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; MST[STMT!TRAPSTMT]MSP[N] switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; MST[STMT!DELSTMT]MSP[N] switch ( c )
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[STMT!TRAPSTMT]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N]
bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; while ( true ) { int c = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ; if ( c == - 1 ) break; switch ( c ) MST[@!ABS$@$]MSP[N]
{ case 'z' : use_nuls = true ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; MST[C!CONSTVAL$0$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; MST[C!ADD$C$1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; MST[STMT!DELSTMT]MSP[S] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[S] if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_7 ) ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; MST[STMT!TRAPSTMT]MSP[N]
{ case 'z' : use_nuls = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( argc < optind + 1 ) { error ( 0 , 0 , _ ( lr_7 ) ) ; MST[STMT!DELSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[S] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[STMT!TRAPSTMT]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[STMT!DELSTMT]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[A!CONSTVAL$0$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[A!CONSTVAL$0$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[@!ABS$@$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[@!ABS$@$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[P!PRIGHTDEC$P$]MSP[S] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[P!PLEFTINC$P$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[P!PRIGHTINC$P$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; MST[P!PLEFTDEC$P$]MSP[N] len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; MST[STMT!DELSTMT]MSP[N] if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; MST[@!ABS$@$]MSP[N] if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[STMT!TRAPSTMT]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[@!ABS$@$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[C!ADD$C$-1$]MSP[S] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) MST[C!ADD$C$1$]MSP[N] { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; MST[STMT!TRAPSTMT]MSP[N] len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; MST[STMT!DELSTMT]MSP[S] len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; MST[STMT!TRAPSTMT]MSP[N] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[S] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; MST[C!CONSTVAL$0$]MSP[S] }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; MST[C!ADD$C$1$]MSP[S] }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; } MST[STMT!TRAPSTMT]MSP[N]
fwrite ( result , 1 , len , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; MST[STMT!DELSTMT]MSP[N] putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; MST[@!ABS$@$]MSP[N] putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[STMT!DELSTMT]MSP[N] } exit ( EXIT_SUCCESS ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[S] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[@!ABS$@$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!CONSTVAL$0$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$-1$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$-1$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$1$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; MST[C!ADD$C$1$]MSP[N] } exit ( EXIT_SUCCESS ) ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; } MST[STMT!TRAPSTMT]MSP[N] exit ( EXIT_SUCCESS ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[STMT!TRAPSTMT]MSP[N] program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[S] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[STMT!DELSTMT]MSP[S] program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[@!ABS$@$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[C!CONSTVAL$0$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[C!ADD$C$1$]MSP[S] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[@!ABS$@$]MSP[N] fputs ( _ ( lr_3 ) , stdout ) ;
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[STMT!TRAPSTMT]MSP[N] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
usage ( EXIT_FAILURE ) ; } for (; optind < argc ; optind ++ ) MST[STMT!DELSTMT]MSP[S] { result = argv [ optind ] ; len = dir_len ( result ) ; if ( ! len ) { result = & dot ; len = 1 ; }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[N] }
fwrite ( result , 1 , len , stdout ) ; putchar ( use_nuls ? '\0' : '\n' ) ; } exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[N] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S]
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[STMT!TRAPSTMT]MSP[N] program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[STMT!DELSTMT]MSP[S] program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] } exit ( status ) ; } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) {
fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( _ ( lr_4 ) , program_name , program_name , program_name ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) {
static void mpz_clear ( mpz_t z ) { ( void ) z ; } static void mpz_init_set_ui ( mpz_t z , unsigned long int i ) { z [ 0 ] = i ; } static int mpz_init_set_str ( mpz_t z , char * s , int base ) {
return xstrtoimax ( s , NULL , base , z , NULL ) == LONGINT_OK ? 0 : - 1 ; } static void mpz_add ( mpz_t r , mpz_t a0 , mpz_t b0 ) { intmax_t a = a0 [ 0 ] ;
intmax_t b = b0 [ 0 ] ; intmax_t val = a + b ; if ( ( val < a ) != ( b < 0 ) ) integer_overflow ( '+' ) ; r [ 0 ] = val ; } static void
mpz_sub ( mpz_t r , mpz_t a0 , mpz_t b0 ) { intmax_t a = a0 [ 0 ] ; intmax_t b = b0 [ 0 ] ; intmax_t val = a - b ; if ( ( a < val ) != ( b < 0 ) )
integer_overflow ( '-' ) ; r [ 0 ] = val ; } static void mpz_mul ( mpz_t r , mpz_t a0 , mpz_t b0 ) { intmax_t a = a0 [ 0 ] ; intmax_t b = b0 [ 0 ] ; intmax_t val = a * b ;
if ( ! ( a == 0 || b == 0 || ( ( val < 0 ) == ( ( a < 0 ) ^ ( b < 0 ) ) && val / a == b ) ) ) integer_overflow ( '*' ) ;
r [ 0 ] = val ; } static void mpz_tdiv_q ( mpz_t r , mpz_t a0 , mpz_t b0 ) { intmax_t a = a0 [ 0 ] ; intmax_t b = b0 [ 0 ] ; if ( a < - INTMAX_MAX && b == - 1 )
integer_overflow ( '/' ) ; r [ 0 ] = a / b ; } static void mpz_tdiv_r ( mpz_t r , mpz_t a0 , mpz_t b0 ) { intmax_t a = a0 [ 0 ] ; intmax_t b = b0 [ 0 ] ;
r [ 0 ] = a < - INTMAX_MAX && b == - 1 ? 0 : a % b ; } static char * mpz_get_str ( char const * str , int base , mpz_t z ) { ( void ) str ; ( void ) base ;
char buf [ INT_BUFSIZE_BOUND ( intmax_t ) ] ; return xstrdup ( imaxtostr ( z [ 0 ] , buf ) ) ; } static int mpz_sgn ( mpz_t z ) { return z [ 0 ] < 0 ? - 1 : 0 < z [ 0 ] ;
} static int mpz_fits_ulong_p ( mpz_t z ) { return 0 <= z [ 0 ] && z [ 0 ] <= ULONG_MAX ; } static unsigned long int mpz_get_ui ( mpz_t z ) { return z [ 0 ] ; } static int
mpz_out_str ( FILE * stream , int base , mpz_t z ) { ( void ) base ; char buf [ INT_BUFSIZE_BOUND ( intmax_t ) ] ; return fputs ( imaxtostr ( z [ 0 ] , buf ) , stream ) != EOF ; } void
usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; putchar ( '\n' ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ;
fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( _ ( lr_5 ) , stdout ) ; fputs ( _ ( lr_6 ) , stdout ) ;
fputs ( _ ( lr_7 ) , stdout ) ; fputs ( _ ( lr_8 ) , stdout ) ; fputs ( _ ( lr_9 ) , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static void syntax_error ( void ) {
error ( EXPR_INVALID , 0 , _ ( lr_10 ) ) ; } static void integer_overflow ( char op ) { error ( EXPR_FAILURE , ERANGE , lr_11 , op ) ; abort () ; } int main ( int argc , char * * argv ) {
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
syntax_error () ; printv ( v ) ; exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
mpz_init_set_ui ( v -> u . i , i ) ; return v ; } static VALUE * str_value ( char const * s ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = string ;
v -> u . s = xstrdup ( s ) ; return v ; } static void freev ( VALUE * v ) { if ( v -> type == string ) free ( v -> u . s ) ; else
mpz_clear ( v -> u . i ) ; free ( v ) ; } static void printv ( VALUE * v ) { switch ( v -> type ) { case integer : mpz_out_str ( stdout , 10 , v -> u . i ) ;
putchar ( '\n' ) ; break; case string : puts ( v -> u . s ) ; break; default: abort () ; } } static bool _GL_ATTRIBUTE_PURE null ( VALUE * v ) { switch ( v -> type ) { case integer :
return mpz_sgn ( v -> u . i ) == 0 ; case string : { char const * cp = v -> u . s ; if ( * cp == '\0' ) return true ; cp += ( * cp == '-' ) ; do {
if ( * cp != '0' ) return false ; } while ( * ++ cp ); return true ; } default: abort () ; } } static bool _GL_ATTRIBUTE_PURE looks_like_integer ( char const * cp ) { cp += ( * cp == '-' ) ; do
if ( ! ISDIGIT ( * cp ) ) return false ; while ( * ++ cp ); return true ; } static void tostring ( VALUE * v ) { switch ( v -> type ) { case integer : {
char * s = mpz_get_str ( NULL , 10 , v -> u . i ) ; mpz_clear ( v -> u . i ) ; v -> u . s = s ; v -> type = string ; } break; case string : break; default: abort () ;
} } static bool toarith ( VALUE * v ) { switch ( v -> type ) { case integer : return true ; case string : { char * s = v -> u . s ; if ( ! looks_like_integer ( s ) ) return false ;
if ( mpz_init_set_str ( v -> u . i , s , 10 ) != 0 && ! HAVE_GMP ) error ( EXPR_FAILURE , ERANGE , lr_15 , s ) ; free ( s ) ; v -> type = integer ; return true ; } default: abort () ;
} } static size_t getsize ( mpz_t i ) { if ( mpz_sgn ( i ) < 0 ) return SIZE_MAX ; if ( mpz_fits_ulong_p ( i ) ) { unsigned long int ul = mpz_get_ui ( i ) ; if ( ul < SIZE_MAX ) return ul ; }
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
nomoreargs ( void ) { return * args == 0 ; } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
printf ( lr_17 , * a ) ; putchar ( '\n' ) ; } static VALUE * docolon ( VALUE * sv , VALUE * pv ) { VALUE * v IF_LINT ( = NULL ) ; const char * errmsg ; struct re_pattern_buffer re_buffer ;
char fastmap [ UCHAR_MAX + 1 ] ; struct re_registers re_regs ; regoff_t matchlen ; tostring ( sv ) ; tostring ( pv ) ; re_regs . num_regs = 0 ; re_regs . start = NULL ; re_regs . end = NULL ; re_buffer . buffer = NULL ;
re_buffer . allocated = 0 ; re_buffer . fastmap = fastmap ; re_buffer . translate = NULL ; re_syntax_options = RE_SYNTAX_POSIX_BASIC & ~ RE_CONTEXT_INVALID_DUP & ~ RE_NO_EMPTY_RANGES ;
errmsg = re_compile_pattern ( pv -> u . s , strlen ( pv -> u . s ) , & re_buffer ) ; if ( errmsg ) error ( EXPR_INVALID , 0 , lr_15 , errmsg ) ; re_buffer . newline_anchor = 0 ;
matchlen = re_match ( & re_buffer , sv -> u . s , strlen ( sv -> u . s ) , 0 , & re_regs ) ; if ( 0 <= matchlen ) { if ( re_buffer . re_nsub > 0 ) {
sv -> u . s [ re_regs . end [ 1 ] ] = '\0' ; v = str_value ( sv -> u . s + re_regs . start [ 1 ] ) ; } else v = int_value ( matchlen ) ; }
else if ( matchlen == - 1 ) { if ( re_buffer . re_nsub > 0 ) v = str_value ( lr_12 ) ; else v = int_value ( 0 ) ; } else error ( EXPR_FAILURE , ( matchlen == - 2 ? errno : EOVERFLOW ) ,
_ ( lr_18 ) ) ; if ( 0 < re_regs . num_regs ) { free ( re_regs . start ) ; free ( re_regs . end ) ; } re_buffer . fastmap = NULL ; regfree ( & re_buffer ) ; return v ; } static VALUE *
eval7 ( bool evaluate ) { VALUE * v ; #ifdef EVAL_TRACE trace ( lr_19 ) ; #endif if ( nomoreargs () ) syntax_error () ; if ( nextarg ( lr_20 ) ) { v = eval ( evaluate ) ; if ( ! nextarg ( lr_21 ) )
syntax_error () ; return v ; } if ( nextarg ( lr_21 ) ) syntax_error () ; return str_value ( * args ++ ) ; } static VALUE * eval6 ( bool evaluate ) { VALUE * l ; VALUE * r ; VALUE * v ;
VALUE * i1 ; VALUE * i2 ; #ifdef EVAL_TRACE trace ( lr_22 ) ; #endif if ( nextarg ( lr_23 ) ) { if ( nomoreargs () ) syntax_error () ; return str_value ( * args ++ ) ; } else if ( nextarg ( lr_24 ) ) {
r = eval6 ( evaluate ) ; tostring ( r ) ; v = int_value ( strlen ( r -> u . s ) ) ; freev ( r ) ; return v ; } else if ( nextarg ( lr_25 ) ) {
l = eval6 ( evaluate ) ; r = eval6 ( evaluate ) ; if ( evaluate ) { v = docolon ( l , r ) ; freev ( l ) ; } else v = l ; freev ( r ) ; return v ; }
else if ( nextarg ( lr_26 ) ) { size_t pos ; l = eval6 ( evaluate ) ; r = eval6 ( evaluate ) ; tostring ( l ) ; tostring ( r ) ;
pos = strcspn ( l -> u . s , r -> u . s ) ; v = int_value ( l -> u . s [ pos ] ? pos + 1 : 0 ) ; freev ( l ) ; freev ( r ) ; return v ;
} else if ( nextarg ( lr_27 ) ) { size_t llen ; l = eval6 ( evaluate ) ; i1 = eval6 ( evaluate ) ; i2 = eval6 ( evaluate ) ; tostring ( l ) ; llen = strlen ( l -> u . s ) ;
if ( ! toarith ( i1 ) || ! toarith ( i2 ) ) v = str_value ( lr_12 ) ; else { size_t pos = getsize ( i1 -> u . i ) ; size_t len = getsize ( i2 -> u . i ) ;
if ( llen < pos || pos == 0 || len == 0 || len == SIZE_MAX ) v = str_value ( lr_12 ) ; else { size_t vlen = MIN ( len , llen - pos + 1 ) ; char * vlim ;
v = xmalloc ( sizeof *v ) ; v -> type = string ; v -> u . s = xmalloc ( vlen + 1 ) ; vlim = mempcpy ( v -> u . s , l -> u . s + pos - 1 , vlen ) ;
* vlim = '\0' ; } } freev ( l ) ; freev ( i1 ) ; freev ( i2 ) ; return v ; } else return eval7 ( evaluate ) ; } static VALUE * eval5 ( bool evaluate ) { VALUE * l ;
VALUE * r ; VALUE * v ; #ifdef EVAL_TRACE trace ( lr_28 ) ; #endif l = eval6 ( evaluate ) ; while ( 1 ) { if ( nextarg ( lr_29 ) ) { r = eval6 ( evaluate ) ; if ( evaluate ) {
v = docolon ( l , r ) ; freev ( l ) ; l = v ; } freev ( r ) ; } else return l ; } } static VALUE * eval4 ( bool evaluate ) { VALUE * l ; VALUE * r ;
enum { multiply , divide , mod } fxn ; #ifdef EVAL_TRACE trace ( lr_30 ) ; #endif l = eval5 ( evaluate ) ; while ( 1 ) { if ( nextarg ( lr_31 ) ) fxn = multiply ; else if ( nextarg ( lr_32 ) )
fxn = divide ; else if ( nextarg ( lr_33 ) ) fxn = mod ; else return l ; r = eval5 ( evaluate ) ; if ( evaluate ) { if ( ! toarith ( l ) || ! toarith ( r ) )
error ( EXPR_INVALID , 0 , _ ( lr_34 ) ) ; if ( fxn != multiply && mpz_sgn ( r -> u . i ) == 0 ) error ( EXPR_INVALID , 0 , _ ( lr_35 ) ) ; ( ( fxn == multiply ? mpz_mul
: fxn == divide ? mpz_tdiv_q : mpz_tdiv_r ) ( l -> u . i , l -> u . i , r -> u . i ) ) ; } freev ( r ) ; } } static VALUE * eval3 ( bool evaluate ) {
VALUE * l ; VALUE * r ; enum { plus , minus } fxn ; #ifdef EVAL_TRACE trace ( lr_36 ) ; #endif l = eval4 ( evaluate ) ; while ( 1 ) { if ( nextarg ( lr_23 ) ) fxn = plus ;
else if ( nextarg ( lr_37 ) ) fxn = minus ; else return l ; r = eval4 ( evaluate ) ; if ( evaluate ) { if ( ! toarith ( l ) || ! toarith ( r ) )
error ( EXPR_INVALID , 0 , _ ( lr_34 ) ) ; ( fxn == plus ? mpz_add : mpz_sub ) ( l -> u . i , l -> u . i , r -> u . i ) ; } freev ( r ) ; } }
static VALUE * eval2 ( bool evaluate ) { VALUE * l ; #ifdef EVAL_TRACE trace ( lr_38 ) ; #endif l = eval3 ( evaluate ) ; while ( 1 ) { VALUE * r ; enum { less_than , less_equal , equal , not_equal , greater_equal , greater_than
} fxn ; bool val = false ; if ( nextarg ( lr_39 ) ) fxn = less_than ; else if ( nextarg ( lr_40 ) ) fxn = less_equal ; else if ( nextarg ( lr_41 ) || nextarg ( lr_42 ) ) fxn = equal ;
else if ( nextarg ( lr_43 ) ) fxn = not_equal ; else if ( nextarg ( lr_44 ) ) fxn = greater_equal ; else if ( nextarg ( lr_45 ) ) fxn = greater_than ; else return l ; r = eval3 ( evaluate ) ;
if ( evaluate ) { int cmp ; tostring ( l ) ; tostring ( r ) ; if ( looks_like_integer ( l -> u . s ) && looks_like_integer ( r -> u . s ) )
cmp = strintcmp ( l -> u . s , r -> u . s ) ; else { errno = 0 ; cmp = strcoll ( l -> u . s , r -> u . s ) ; if ( errno ) {
error ( 0 , errno , _ ( lr_46 ) ) ; error ( 0 , 0 , _ ( lr_47 ) ) ; error ( EXPR_INVALID , 0 , _ ( lr_48 ) , quotearg_n_style ( 0 , locale_quoting_style , l -> u . s ) ,
quotearg_n_style ( 1 , locale_quoting_style , r -> u . s ) ) ; } } switch ( fxn ) { case less_than : val = ( cmp < 0 ) ; break; case less_equal : val = ( cmp <= 0 ) ; break;
case equal : val = ( cmp == 0 ) ; break; case not_equal : val = ( cmp != 0 ) ; break; case greater_equal : val = ( cmp >= 0 ) ; break; case greater_than : val = ( cmp > 0 ) ; break;
default: abort () ; } } freev ( l ) ; freev ( r ) ; l = int_value ( val ) ; } } static VALUE * eval1 ( bool evaluate ) { VALUE * l ; VALUE * r ; #ifdef EVAL_TRACE trace ( lr_49 ) ; #endif
l = eval2 ( evaluate ) ; while ( 1 ) { if ( nextarg ( lr_50 ) ) { r = eval2 ( evaluate && ! null ( l ) ) ; if ( null ( l ) || null ( r ) ) {
freev ( l ) ; freev ( r ) ; l = int_value ( 0 ) ; } else freev ( r ) ; } else return l ; } } static VALUE * eval ( bool evaluate ) { VALUE * l ; VALUE * r ; #ifdef EVAL_TRACE
trace ( lr_51 ) ; #endif l = eval1 ( evaluate ) ; while ( 1 ) { if ( nextarg ( lr_52 ) ) { r = eval1 ( evaluate && null ( l ) ) ; if ( null ( l ) ) {
freev ( l ) ; l = r ; if ( null ( l ) ) { freev ( l ) ; l = int_value ( 0 ) ; } } else freev ( r ) ; } else return l ; } }
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; MST[@!ABS$@$]MSP[N] if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[STMT!TRAPSTMT]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[@!ABS$@$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[@!ABS$@$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!CONSTVAL$0$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!ADD$C$1$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[AND$@1$@2$!OPERAND$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!NEG$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITNOT$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!ABS$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[STMT!TRAPSTMT]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[A!CONSTVAL$0$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[A!CONSTVAL$0$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[@!ABS$@$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[@!ABS$@$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!CONSTVAL$0$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!ADD$C$1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!ADD$C$-1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[C!ADD$C$1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[P!PRIGHTDEC$P$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[P!PLEFTINC$P$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[S] { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[STMT!TRAPSTMT]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[@!ABS$@$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[@!ABS$@$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[@!ABS$@$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[C!CONSTVAL$0$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[C!ADD$C$-1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!ABS$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!NEG$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!NEG$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[S]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
++ argv ; MST[STMT!TRAPSTMT]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[STMT!DELSTMT]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[A!CONSTVAL$0$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[A!CONSTVAL$0$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[C!ADD$C$1$]MSP[S] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[P!PLEFTINC$P$]MSP[S] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; MST[P!PLEFTDEC$P$]MSP[N] } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
error ( EXPR_INVALID , 0 , _ ( lr_10 ) ) ; } static void integer_overflow ( char op ) { error ( EXPR_FAILURE , ERANGE , lr_11 , op ) ; abort () ; } int MST[STMT!TRAPSTMT]MSP[N] main ( int argc , char * * argv ) {
++ argv ; } if ( u_argc <= 1 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[C!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; MST[STMT!TRAPSTMT]MSP[N] } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; MST[STMT!DELSTMT]MSP[N] } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[STMT!TRAPSTMT]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[STMT!DELSTMT]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PLEFTINC$P1$!PRIGHTINC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[A!CONSTVAL$0$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[A!CONSTVAL$0$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[C!CONSTVAL$0$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[C!ADD$C$1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[P!PRIGHTDEC$P$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[P!PLEFTINC$P$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; MST[P!PLEFTDEC$P$]MSP[N] v = eval ( true ) ; if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; MST[STMT!DELSTMT]MSP[N] if ( ! nomoreargs () )
++ argv ; } if ( u_argc <= 1 ) { error ( 0 , 0 , _ ( lr_14 ) ) ; usage ( EXPR_INVALID ) ; } args = argv + 1 ; v = eval ( true ) ; if ( ! nomoreargs () ) MST[STMT!TRAPSTMT]MSP[N]
syntax_error () ; MST[STMT!TRAPSTMT]MSP[N] printv ( v ) ; exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; MST[STMT!DELSTMT]MSP[N] printv ( v ) ; exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; MST[STMT!TRAPSTMT]MSP[N] printv ( v ) ; exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; printv ( v ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; printv ( v ) ; MST[STMT!DELSTMT]MSP[S] exit ( null ( v ) ) ; } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; printv ( v ) ; exit ( null ( v ) ) ; MST[STMT!TRAPSTMT]MSP[N] } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
syntax_error () ; printv ( v ) ; exit ( null ( v ) ) ; MST[STMT!DELSTMT]MSP[N] } static VALUE * int_value ( unsigned long int i ) { VALUE * v = xmalloc ( sizeof *v ) ; v -> type = integer ;
nomoreargs ( void ) { return * args == 0 ; MST[STMT!TRAPSTMT]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[STMT!DELSTMT]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[A!CONSTVAL$0$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[@!ABS$@$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[P!PRIGHTDEC$P$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[P!PLEFTINC$P$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[P!PRIGHTINC$P$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
nomoreargs ( void ) { return * args == 0 ; MST[P!PLEFTDEC$P$]MSP[N] } static void trace ( fxn ) char * fxn ; { char * * a ; printf ( lr_16 , fxn ) ; for ( a = args ; * a ; a ++ )
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[A!CONSTVAL$0$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[@!ABS$@$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[P!PRIGHTDEC$P$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[P!PLEFTINC$P$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[P!PRIGHTINC$P$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) MST[P!PLEFTDEC$P$]MSP[N] return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[STMT!TRAPSTMT]MSP[N] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[STMT!DELSTMT]MSP[S] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[C!ADD$C$-1$]MSP[N] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[STMT!TRAPSTMT]MSP[N] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; MST[STMT!DELSTMT]MSP[N] else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[STMT!TRAPSTMT]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[STMT!DELSTMT]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[A!CONSTVAL$0$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[@!ABS$@$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[@!ABS$@$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[C!ADD$C$-1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[C!ADD$C$1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[P!PRIGHTDEC$P$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[P!PLEFTINC$P$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[P!PRIGHTINC$P$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[P!PLEFTDEC$P$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!ABS$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[STMT!TRAPSTMT]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[STMT!DELSTMT]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[A!CONSTVAL$0$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[A!CONSTVAL$0$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[P!PLEFTINC$P$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; MST[P!PLEFTDEC$P$]MSP[N] return r ; } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; MST[STMT!TRAPSTMT]MSP[N] } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; MST[@!ABS$@$]MSP[N] } } static bool
return SIZE_MAX - 1 ; } static bool nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; MST[STMT!TRAPSTMT]MSP[N] } } static bool
return SIZE_MAX - 1 ; } static bool MST[STMT!TRAPSTMT]MSP[N] nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
return SIZE_MAX - 1 ; } static bool MST[STMT!DELSTMT]MSP[N] nextarg ( char const * str ) { if ( * args == NULL ) return false ; else { bool r = STREQ ( * args , str ) ; args += r ; return r ; } } static bool
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; MST[STMT!DELSTMT]MSP[S] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] atexit ( close_stdout ) ;
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[S]
VALUE * v ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_12 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; initialize_exit_failure ( EXPR_FAILURE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N]
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[STMT!TRAPSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[STMT!DELSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[A!CONSTVAL$0$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[@!ABS$@$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[P!PRIGHTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[P!PLEFTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[P!PRIGHTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[P!PLEFTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; MST[STMT!TRAPSTMT]MSP[N] if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , VERSION , usage , AUTHORS , ( char const * ) NULL ) ; unsigned int u_argc = argc ; MST[STMT!DELSTMT]MSP[N] if ( 1 < u_argc && STREQ ( argv [ 1 ] , lr_13 ) ) { -- u_argc ;
static uintmax_t mod2 ( uintmax_t * r1 , uintmax_t a1 , uintmax_t a0 , uintmax_t d1 , uintmax_t d0 ) { int cntd , cnta ; assert ( d1 != 0 ) ; if ( a1 == 0 ) { * r1 = 0 ; return a0 ; }
count_leading_zeros ( cntd , d1 ) ; count_leading_zeros ( cnta , a1 ) ; int cnt = cntd - cnta ; lsh2 ( d1 , d0 , d1 , d0 , cnt ) ; int i ; for ( i = 0 ; i < cnt ; i ++ )
{ if ( ge2 ( a1 , a0 , d1 , d0 ) ) sub_ddmmss ( a1 , a0 , a1 , a0 , d1 , d0 ) ; rsh2 ( d1 , d0 , d1 , d0 , 1 ) ; } * r1 = a1 ;
return a0 ; } static uintmax_t _GL_ATTRIBUTE_CONST gcd_odd ( uintmax_t a , uintmax_t b ) { if ( ( b & 1 ) == 0 ) { uintmax_t t = b ; b = a ; a = t ; } if ( a == 0 ) return b ;
b >>= 1 ; for (; ; ) { uintmax_t t ; uintmax_t bgta ; while ( ( a & 1 ) == 0 ) a >>= 1 ; a >>= 1 ; t = a - b ; if ( t == 0 )
return ( a << 1 ) + 1 ; bgta = HIGHBIT_TO_MASK ( t ) ; b += ( bgta & t ) ; a = ( t ^ bgta ) - bgta ; } } static uintmax_t
gcd2_odd ( uintmax_t * r1 , uintmax_t a1 , uintmax_t a0 , uintmax_t b1 , uintmax_t b0 ) { while ( ( a0 & 1 ) == 0 ) rsh2 ( a1 , a0 , a1 , a0 , 1 ) ;
while ( ( b0 & 1 ) == 0 ) rsh2 ( b1 , b0 , b1 , b0 , 1 ) ; for (; ; ) { if ( ( b1 | a1 ) == 0 ) { * r1 = 0 ;
return gcd_odd ( b0 , a0 ) ; } if ( gt2 ( a1 , a0 , b1 , b0 ) ) { sub_ddmmss ( a1 , a0 , a1 , a0 , b1 , b0 ) ; do
rsh2 ( a1 , a0 , a1 , a0 , 1 ) ; while ( ( a0 & 1 ) == 0 ); } else if ( gt2 ( b1 , b0 , a1 , a0 ) ) {
sub_ddmmss ( b1 , b0 , b1 , b0 , a1 , a0 ) ; do rsh2 ( b1 , b0 , b1 , b0 , 1 ) ; while ( ( b0 & 1 ) == 0 ); } else break; } * r1 = a1 ;
return a0 ; } static void factor_insert_multiplicity ( struct factors * factors , uintmax_t prime , unsigned int m ) { unsigned int nfactors = factors -> nfactors ; uintmax_t * p = factors -> p ; unsigned char * e = factors -> e ; int i ;
for ( i = nfactors - 1 ; i >= 0 ; i -- ) { if ( p [ i ] <= prime ) break; } if ( i < 0 || p [ i ] != prime ) { int j ;
for ( j = nfactors - 1 ; j > i ; j -- ) { p [ j + 1 ] = p [ j ] ; e [ j + 1 ] = e [ j ] ; } p [ i + 1 ] = prime ;
e [ i + 1 ] = m ; factors -> nfactors = nfactors + 1 ; } else { e [ i ] += m ; } } static void factor_insert_large ( struct factors * factors , uintmax_t p1 , uintmax_t p0 ) {
if ( p1 > 0 ) { assert ( factors -> plarge [ 1 ] == 0 ) ; factors -> plarge [ 0 ] = p0 ; factors -> plarge [ 1 ] = p1 ; } else factor_insert ( factors , p0 ) ; } static void
mpz_va_init ( void (* mpz_single_init)( mpz_t ) , ... ) { va_list ap ; va_start ( ap , mpz_single_init ) ; mpz_t * mpz ; while ( ( mpz = va_arg ( ap , mpz_t * ) ) ) mpz_single_init ( * mpz ) ; va_end ( ap ) ;
} static void mp_factor_init ( struct mp_factors * factors ) { factors -> p = NULL ; factors -> e = NULL ; factors -> nfactors = 0 ; } static void mp_factor_clear ( struct mp_factors * factors ) { unsigned int i ;
for ( i = 0 ; i < factors -> nfactors ; i ++ ) mpz_clear ( factors -> p [ i ] ) ; free ( factors -> p ) ; free ( factors -> e ) ; } static void
mp_factor_insert ( struct mp_factors * factors , mpz_t prime ) { unsigned long int nfactors = factors -> nfactors ; mpz_t * p = factors -> p ; unsigned long int * e = factors -> e ; long i ;
for ( i = nfactors - 1 ; i >= 0 ; i -- ) { if ( mpz_cmp ( p [ i ] , prime ) <= 0 ) break; } if ( i < 0 || mpz_cmp ( p [ i ] , prime ) != 0 )
{ p = xrealloc ( p , ( nfactors + 1 ) * sizeof p [ 0 ] ) ; e = xrealloc ( e , ( nfactors + 1 ) * sizeof e [ 0 ] ) ; mpz_init ( p [ nfactors ] ) ; long j ;
for ( j = nfactors - 1 ; j > i ; j -- ) { mpz_set ( p [ j + 1 ] , p [ j ] ) ; e [ j + 1 ] = e [ j ] ; }
mpz_set ( p [ i + 1 ] , prime ) ; e [ i + 1 ] = 1 ; factors -> p = p ; factors -> e = e ; factors -> nfactors = nfactors + 1 ; } else {
e [ i ] += 1 ; } } static void mp_factor_insert_ui ( struct mp_factors * factors , unsigned long int prime ) { mpz_t pz ; mpz_init_set_ui ( pz , prime ) ; mp_factor_insert ( factors , pz ) ; mpz_clear ( pz ) ; } static inline void
devmsg ( char const * fmt , ... ) { if ( dev_debug ) { va_list ap ; va_start ( ap , fmt ) ; vfprintf ( stderr , fmt , ap ) ; va_end ( ap ) ; } } static void
factor_insert_refind ( struct factors * factors , uintmax_t p , unsigned int i , unsigned int off ) { unsigned int j ; for ( j = 0 ; j < off ; j ++ ) p += primes_diff [ i + j ] ;
factor_insert ( factors , p ) ; } static uintmax_t factor_using_division ( uintmax_t * t1p , uintmax_t t1 , uintmax_t t0 , struct factors * factors ) { if ( t0 % 2 == 0 ) { unsigned int cnt ; if ( t0 == 0 ) {
count_trailing_zeros ( cnt , t1 ) ; t0 = t1 >> cnt ; t1 = 0 ; cnt += W_TYPE_SIZE ; } else { count_trailing_zeros ( cnt , t0 ) ; rsh2 ( t1 , t0 , t1 , t0 , cnt ) ; }
factor_insert_multiplicity ( factors , 2 , cnt ) ; } uintmax_t p = 3 ; unsigned int i ; for ( i = 0 ; t1 > 0 && i < PRIMES_PTAB_ENTRIES ; i ++ ) { for (; ; ) {
uintmax_t q1 , q0 , hi , lo _GL_UNUSED ; q0 = t0 * primes_dtab [ i ] . binv ; umul_ppmm ( hi , lo , q0 , p ) ; if ( hi > t1 ) break; hi = t1 - hi ;
q1 = hi * primes_dtab [ i ] . binv ; if ( LIKELY ( q1 > primes_dtab [ i ] . lim ) ) break; t1 = q1 ; t0 = q0 ; factor_insert ( factors , p ) ; }
p += primes_diff [ i + 1 ] ; } if ( t1p ) * t1p = t1 ; #define DIVBLOCK ( I ) \ do { \ for (;;) \ { \ q = t0 * pd[I].binv; \ if (LIKELY (q > pd[I].lim)) \ break; \
t0 = q; \ factor_insert_refind (factors, p, i + 1, I); \ } \ } while (0) for (; i < PRIMES_PTAB_ENTRIES ; i += 8 ) { uintmax_t q ; const struct primes_dtab * pd = & primes_dtab [ i ] ; DIVBLOCK ( 0 ) ;
DIVBLOCK ( 1 ) ; DIVBLOCK ( 2 ) ; DIVBLOCK ( 3 ) ; DIVBLOCK ( 4 ) ; DIVBLOCK ( 5 ) ; DIVBLOCK ( 6 ) ; DIVBLOCK ( 7 ) ; p += primes_diff8 [ i ] ; if ( p * p > t0 )
break; } return t0 ; } static void mp_factor_using_division ( mpz_t t , struct mp_factors * factors ) { mpz_t q ; unsigned long int p ; devmsg ( lr_1 ) ; mpz_init ( q ) ; p = mpz_scan1 ( t , 0 ) ;
mpz_div_2exp ( t , t , p ) ; while ( p ) { mp_factor_insert_ui ( factors , 2 ) ; -- p ; } p = 3 ; unsigned int i ; for ( i = 1 ; i <= PRIMES_PTAB_ENTRIES ; ) {
if ( ! mpz_divisible_ui_p ( t , p ) ) { p += primes_diff [ i ++ ] ; if ( mpz_cmp_ui ( t , p * p ) < 0 ) break; } else { mpz_tdiv_q_ui ( t , t , p ) ;
mp_factor_insert_ui ( factors , p ) ; } } mpz_clear ( q ) ; } static inline uintmax_t mulredc ( uintmax_t a , uintmax_t b , uintmax_t m , uintmax_t mi ) { uintmax_t rh , rl , q , th , tl _GL_UNUSED , xh ;
umul_ppmm ( rh , rl , a , b ) ; q = rl * mi ; umul_ppmm ( th , tl , q , m ) ; xh = rh - th ; if ( rh < th ) xh += m ; return xh ; } static uintmax_t
mulredc2 ( uintmax_t * r1p , uintmax_t a1 , uintmax_t a0 , uintmax_t b1 , uintmax_t b0 , uintmax_t m1 , uintmax_t m0 , uintmax_t mi ) { uintmax_t r1 , r0 , q , p1 , p0 _GL_UNUSED , t1 , t0 , s1 , s0 ;
mi = - mi ; assert ( ( a1 >> ( W_TYPE_SIZE - 1 ) ) == 0 ) ; assert ( ( b1 >> ( W_TYPE_SIZE - 1 ) ) == 0 ) ; assert ( ( m1 >> ( W_TYPE_SIZE - 1 ) ) == 0 ) ;
umul_ppmm ( t1 , t0 , a0 , b0 ) ; umul_ppmm ( r1 , r0 , a0 , b1 ) ; q = mi * t0 ; umul_ppmm ( p1 , p0 , q , m0 ) ; umul_ppmm ( s1 , s0 , q , m1 ) ;
r0 += ( t0 != 0 ) ; add_ssaaaa ( r1 , r0 , r1 , r0 , 0 , p1 ) ; add_ssaaaa ( r1 , r0 , r1 , r0 , 0 , t1 ) ;
add_ssaaaa ( r1 , r0 , r1 , r0 , s1 , s0 ) ; umul_ppmm ( t1 , t0 , a1 , b0 ) ; umul_ppmm ( s1 , s0 , a1 , b1 ) ;
add_ssaaaa ( t1 , t0 , t1 , t0 , 0 , r0 ) ; q = mi * t0 ; add_ssaaaa ( r1 , r0 , s1 , s0 , 0 , r1 ) ; umul_ppmm ( p1 , p0 , q , m0 ) ;
umul_ppmm ( s1 , s0 , q , m1 ) ; r0 += ( t0 != 0 ) ; add_ssaaaa ( r1 , r0 , r1 , r0 , 0 , p1 ) ; add_ssaaaa ( r1 , r0 , r1 , r0 , 0 , t1 ) ;
add_ssaaaa ( r1 , r0 , r1 , r0 , s1 , s0 ) ; if ( ge2 ( r1 , r0 , m1 , m0 ) ) sub_ddmmss ( r1 , r0 , r1 , r0 , m1 , m0 ) ; * r1p = r1 ;
return r0 ; } static uintmax_t _GL_ATTRIBUTE_CONST powm ( uintmax_t b , uintmax_t e , uintmax_t n , uintmax_t ni , uintmax_t one ) { uintmax_t y = one ; if ( e & 1 ) y = b ; while ( e != 0 ) {
b = mulredc ( b , b , n , ni ) ; e >>= 1 ; if ( e & 1 ) y = mulredc ( y , b , n , ni ) ; } return y ; } static uintmax_t powm2 ( uintmax_t * r1m ,
const uintmax_t * bp , const uintmax_t * ep , const uintmax_t * np , uintmax_t ni , const uintmax_t * one ) { uintmax_t r1 , r0 , b1 , b0 , n1 , n0 ; unsigned int i ; uintmax_t e ;
b0 = bp [ 0 ] ; b1 = bp [ 1 ] ; n0 = np [ 0 ] ; n1 = np [ 1 ] ; r0 = one [ 0 ] ; r1 = one [ 1 ] ;
for ( e = ep [ 0 ] , i = W_TYPE_SIZE ; i > 0 ; i -- , e >>= 1 ) { if ( e & 1 ) {
r0 = mulredc2 ( r1m , r1 , r0 , b1 , b0 , n1 , n0 , ni ) ; r1 = * r1m ; } b0 = mulredc2 ( r1m , b1 , b0 , b1 , b0 , n1 , n0 , ni ) ;
b1 = * r1m ; } for ( e = ep [ 1 ] ; e > 0 ; e >>= 1 ) { if ( e & 1 ) {
r0 = mulredc2 ( r1m , r1 , r0 , b1 , b0 , n1 , n0 , ni ) ; r1 = * r1m ; } b0 = mulredc2 ( r1m , b1 , b0 , b1 , b0 , n1 , n0 , ni ) ;
b1 = * r1m ; } * r1m = r1 ; return r0 ; } static bool _GL_ATTRIBUTE_CONST millerrabin ( uintmax_t n , uintmax_t ni , uintmax_t b , uintmax_t q , unsigned int k , uintmax_t one ) {
uintmax_t y = powm ( b , q , n , ni , one ) ; uintmax_t nm1 = n - one ; if ( y == one || y == nm1 ) return true ; unsigned int i ;
for ( i = 1 ; i < k ; i ++ ) { y = mulredc ( y , y , n , ni ) ; if ( y == nm1 ) return true ; if ( y == one ) return false ; } return false ; }
static bool millerrabin2 ( const uintmax_t * np , uintmax_t ni , const uintmax_t * bp , const uintmax_t * qp , unsigned int k , const uintmax_t * one ) { uintmax_t y1 , y0 , nm1_1 , nm1_0 , r1m ;
y0 = powm2 ( & r1m , bp , qp , np , ni , one ) ; y1 = r1m ; if ( y0 == one [ 0 ] && y1 == one [ 1 ] ) return true ;
sub_ddmmss ( nm1_1 , nm1_0 , np [ 1 ] , np [ 0 ] , one [ 1 ] , one [ 0 ] ) ; if ( y0 == nm1_0 && y1 == nm1_1 ) return true ; unsigned int i ;
for ( i = 1 ; i < k ; i ++ ) { y0 = mulredc2 ( & r1m , y1 , y0 , y1 , y0 , np [ 1 ] , np [ 0 ] , ni ) ; y1 = r1m ;
if ( y0 == nm1_0 && y1 == nm1_1 ) return true ; if ( y0 == one [ 0 ] && y1 == one [ 1 ] ) return false ; } return false ; } static bool
mp_millerrabin ( mpz_srcptr n , mpz_srcptr nm1 , mpz_ptr x , mpz_ptr y , mpz_srcptr q , unsigned long int k ) { mpz_powm ( y , x , q , n ) ;
if ( mpz_cmp_ui ( y , 1 ) == 0 || mpz_cmp ( y , nm1 ) == 0 ) return true ; unsigned long int i ; for ( i = 1 ; i < k ; i ++ ) {
mpz_powm_ui ( y , y , 2 , n ) ; if ( mpz_cmp ( y , nm1 ) == 0 ) return true ; if ( mpz_cmp_ui ( y , 1 ) == 0 ) return false ; } return false ; } static bool
prime_p ( uintmax_t n ) { int k ; bool is_prime ; uintmax_t a_prim , one , ni ; struct factors factors ; if ( n <= 1 ) return false ; if ( n < ( uintmax_t ) FIRST_OMITTED_PRIME * FIRST_OMITTED_PRIME ) return true ;
uintmax_t q = n - 1 ; for ( k = 0 ; ( q & 1 ) == 0 ; k ++ ) q >>= 1 ; uintmax_t a = 2 ; binv ( ni , n ) ; redcify ( one , 1 , n ) ;
addmod ( a_prim , one , one , n ) ; if ( ! millerrabin ( n , ni , a_prim , q , k , one ) ) return false ; if ( flag_prove_primality ) { factor ( 0 , n - 1 , & factors ) ; }
unsigned int r ; for ( r = 0 ; r < PRIMES_PTAB_ENTRIES ; r ++ ) { if ( flag_prove_primality ) { is_prime = true ; unsigned int i ; for ( i = 0 ; i < factors . nfactors && is_prime ; i ++ ) { is_prime
= powm ( a_prim , ( n - 1 ) / factors . p [ i ] , n , ni , one ) != one ; } } else { is_prime = ( r == MR_REPS - 1 ) ; } if ( is_prime ) return true ;
a += primes_diff [ r ] ; { uintmax_t s1 , s0 ; umul_ppmm ( s1 , s0 , one , a ) ; if ( LIKELY ( s1 == 0 ) ) a_prim = s0 % n ; else { uintmax_t dummy _GL_UNUSED ;
udiv_qrnnd ( dummy , a_prim , s1 , s0 , n ) ; } } if ( ! millerrabin ( n , ni , a_prim , q , k , one ) ) return false ; } error ( 0 , 0 , _ ( lr_2 ) ) ;
abort () ; } static bool prime2_p ( uintmax_t n1 , uintmax_t n0 ) { uintmax_t q [ 2 ] , nm1 [ 2 ] ; uintmax_t a_prim [ 2 ] ; uintmax_t one [ 2 ] ; uintmax_t na [ 2 ] ; uintmax_t ni ;
unsigned int k ; struct factors factors ; if ( n1 == 0 ) return prime_p ( n0 ) ; nm1 [ 1 ] = n1 - ( n0 == 0 ) ; nm1 [ 0 ] = n0 - 1 ;
if ( nm1 [ 0 ] == 0 ) { count_trailing_zeros ( k , nm1 [ 1 ] ) ; q [ 0 ] = nm1 [ 1 ] >> k ; q [ 1 ] = 0 ; k += W_TYPE_SIZE ; } else {
count_trailing_zeros ( k , nm1 [ 0 ] ) ; rsh2 ( q [ 1 ] , q [ 0 ] , nm1 [ 1 ] , nm1 [ 0 ] , k ) ; } uintmax_t a = 2 ; binv ( ni , n0 ) ;
redcify2 ( one [ 1 ] , one [ 0 ] , 1 , n1 , n0 ) ;
addmod2 ( a_prim [ 1 ] , a_prim [ 0 ] , one [ 1 ] , one [ 0 ] , one [ 1 ] , one [ 0 ] , n1 , n0 ) ; na [ 0 ] = n0 ;
na [ 1 ] = n1 ; if ( ! millerrabin2 ( na , ni , a_prim , q , k , one ) ) return false ; if ( flag_prove_primality ) { factor ( nm1 [ 1 ] , nm1 [ 0 ] , & factors ) ; }
unsigned int r ; for ( r = 0 ; r < PRIMES_PTAB_ENTRIES ; r ++ ) { bool is_prime ; uintmax_t e [ 2 ] , y [ 2 ] ; if ( flag_prove_primality ) { is_prime = true ; if ( factors . plarge [ 1 ] )
{ uintmax_t pi ; binv ( pi , factors . plarge [ 0 ] ) ; e [ 0 ] = pi * nm1 [ 0 ] ; e [ 1 ] = 0 ;
y [ 0 ] = powm2 ( & y [ 1 ] , a_prim , e , na , ni , one ) ; is_prime = ( y [ 0 ] != one [ 0 ] || y [ 1 ] != one [ 1 ] ) ; }
unsigned int i ; for ( i = 0 ; i < factors . nfactors && is_prime ; i ++ ) { if ( factors . p [ i ] == 2 )
rsh2 ( e [ 1 ] , e [ 0 ] , nm1 [ 1 ] , nm1 [ 0 ] , 1 ) ; else
divexact_21 ( e [ 1 ] , e [ 0 ] , nm1 [ 1 ] , nm1 [ 0 ] , factors . p [ i ] ) ;
y [ 0 ] = powm2 ( & y [ 1 ] , a_prim , e , na , ni , one ) ; is_prime = ( y [ 0 ] != one [ 0 ] || y [ 1 ] != one [ 1 ] ) ; } }
else { is_prime = ( r == MR_REPS - 1 ) ; } if ( is_prime ) return true ; a += primes_diff [ r ] ; redcify2 ( a_prim [ 1 ] , a_prim [ 0 ] , a , n1 , n0 ) ;
if ( ! millerrabin2 ( na , ni , a_prim , q , k , one ) ) return false ; } error ( 0 , 0 , _ ( lr_2 ) ) ; abort () ; } static bool mp_prime_p ( mpz_t n ) { bool is_prime ;
mpz_t q , a , nm1 , tmp ; struct mp_factors factors ; if ( mpz_cmp_ui ( n , 1 ) <= 0 ) return false ; if ( mpz_cmp_ui ( n , ( long ) FIRST_OMITTED_PRIME * FIRST_OMITTED_PRIME ) < 0 ) return true ;
mpz_inits ( q , a , nm1 , tmp , NULL ) ; mpz_sub_ui ( nm1 , n , 1 ) ; unsigned long int k = mpz_scan1 ( nm1 , 0 ) ; mpz_tdiv_q_2exp ( q , nm1 , k ) ; mpz_set_ui ( a , 2 ) ;
if ( ! mp_millerrabin ( n , nm1 , a , tmp , q , k ) ) { is_prime = false ; goto ret2; } if ( flag_prove_primality ) { mpz_set ( tmp , nm1 ) ; mp_factor ( tmp , & factors ) ; }
unsigned int r ; for ( r = 0 ; r < PRIMES_PTAB_ENTRIES ; r ++ ) { if ( flag_prove_primality ) { is_prime = true ; unsigned long int i ; for ( i = 0 ; i < factors . nfactors && is_prime ; i ++ ) {
mpz_divexact ( tmp , nm1 , factors . p [ i ] ) ; mpz_powm ( tmp , a , tmp , n ) ; is_prime = mpz_cmp_ui ( tmp , 1 ) != 0 ; } } else { is_prime = ( r == MR_REPS - 1 ) ;
} if ( is_prime ) goto ret1; mpz_add_ui ( a , a , primes_diff [ r ] ) ; if ( ! mp_millerrabin ( n , nm1 , a , tmp , q , k ) ) { is_prime = false ; goto ret1; } }
error ( 0 , 0 , _ ( lr_2 ) ) ; abort () ; ret1: if ( flag_prove_primality ) mp_factor_clear ( & factors ) ; ret2: mpz_clears ( q , a , nm1 , tmp , NULL ) ; return is_prime ; } static void
factor_using_pollard_rho ( uintmax_t n , unsigned long int a , struct factors * factors ) { uintmax_t x , z , y , P , t , ni , g ; unsigned long int k = 1 ; unsigned long int l = 1 ;
redcify ( P , 1 , n ) ; addmod ( x , P , P , n ) ; y = z = x ; while ( n != 1 ) { assert ( a < n ) ; binv ( ni , n ) ;
for (; ; ) { do { x = mulredc ( x , x , n , ni ) ; addmod ( x , x , a , n ) ; submod ( t , z , x , n ) ;
P = mulredc ( P , t , n , ni ) ; if ( k % 32 == 1 ) { if ( gcd_odd ( P , n ) != 1 ) goto factor_found; y = x ; } } while ( -- k != 0 );
z = x ; k = l ; l = 2 * l ; unsigned long int i ; for ( i = 0 ; i < k ; i ++ ) { x = mulredc ( x , x , n , ni ) ;
addmod ( x , x , a , n ) ; } y = x ; } factor_found: do { y = mulredc ( y , y , n , ni ) ; addmod ( y , y , a , n ) ;
submod ( t , z , y , n ) ; g = gcd_odd ( t , n ) ; } while ( g == 1 ); n = n / g ; if ( ! prime_p ( g ) )
factor_using_pollard_rho ( g , a + 1 , factors ) ; else factor_insert ( factors , g ) ; if ( prime_p ( n ) ) { factor_insert ( factors , n ) ; break; } x = x % n ; z = z % n ;
y = y % n ; } } static void factor_using_pollard_rho2 ( uintmax_t n1 , uintmax_t n0 , unsigned long int a , struct factors * factors ) {
uintmax_t x1 , x0 , z1 , z0 , y1 , y0 , P1 , P0 , t1 , t0 , ni , g1 , g0 , r1m ; unsigned long int k = 1 ; unsigned long int l = 1 ;
redcify2 ( P1 , P0 , 1 , n1 , n0 ) ; addmod2 ( x1 , x0 , P1 , P0 , P1 , P0 , n1 , n0 ) ; y1 = z1 = x1 ; y0 = z0 = x0 ;
while ( n1 != 0 || n0 != 1 ) { binv ( ni , n0 ) ; for (; ; ) { do { x0 = mulredc2 ( & r1m , x1 , x0 , x1 , x0 , n1 , n0 , ni ) ;
x1 = r1m ; addmod2 ( x1 , x0 , x1 , x0 , 0 , ( uintmax_t ) a , n1 , n0 ) ; submod2 ( t1 , t0 , z1 , z0 , x1 , x0 , n1 , n0 ) ;
P0 = mulredc2 ( & r1m , P1 , P0 , t1 , t0 , n1 , n0 , ni ) ; P1 = r1m ; if ( k % 32 == 1 ) {
g0 = gcd2_odd ( & g1 , P1 , P0 , n1 , n0 ) ; if ( g1 != 0 || g0 != 1 ) goto factor_found; y1 = x1 ; y0 = x0 ; } } while ( -- k != 0 );
z1 = x1 ; z0 = x0 ; k = l ; l = 2 * l ; unsigned long int i ; for ( i = 0 ; i < k ; i ++ ) {
x0 = mulredc2 ( & r1m , x1 , x0 , x1 , x0 , n1 , n0 , ni ) ; x1 = r1m ; addmod2 ( x1 , x0 , x1 , x0 , 0 , ( uintmax_t ) a , n1 , n0 ) ; }
y1 = x1 ; y0 = x0 ; } factor_found: do { y0 = mulredc2 ( & r1m , y1 , y0 , y1 , y0 , n1 , n0 , ni ) ; y1 = r1m ;
addmod2 ( y1 , y0 , y1 , y0 , 0 , ( uintmax_t ) a , n1 , n0 ) ; submod2 ( t1 , t0 , z1 , z0 , y1 , y0 , n1 , n0 ) ;
g0 = gcd2_odd ( & g1 , t1 , t0 , n1 , n0 ) ; } while ( g1 == 0 && g0 == 1 ); if ( g1 == 0 ) { divexact_21 ( n1 , n0 , n1 , n0 , g0 ) ;
if ( ! prime_p ( g0 ) ) factor_using_pollard_rho ( g0 , a + 1 , factors ) ; else factor_insert ( factors , g0 ) ; } else { uintmax_t ginv ; binv ( ginv , g0 ) ; n0 = ginv * n0 ; n1 = 0 ;
if ( ! prime2_p ( g1 , g0 ) ) factor_using_pollard_rho2 ( g1 , g0 , a + 1 , factors ) ; else factor_insert_large ( factors , g1 , g0 ) ; } if ( n1 == 0 ) { if ( prime_p ( n0 ) ) {
factor_insert ( factors , n0 ) ; break; } factor_using_pollard_rho ( n0 , a , factors ) ; return; } if ( prime2_p ( n1 , n0 ) ) { factor_insert_large ( factors , n1 , n0 ) ; break; }
x0 = mod2 ( & x1 , x1 , x0 , n1 , n0 ) ; z0 = mod2 ( & z1 , z1 , z0 , n1 , n0 ) ; y0 = mod2 ( & y1 , y1 , y0 , n1 , n0 ) ; } }
static void mp_factor_using_pollard_rho ( mpz_t n , unsigned long int a , struct mp_factors * factors ) { mpz_t x , z , y , P ; mpz_t t , t2 ; devmsg ( lr_3 , a ) ; mpz_inits ( t , t2 , NULL ) ;
mpz_init_set_si ( y , 2 ) ; mpz_init_set_si ( x , 2 ) ; mpz_init_set_si ( z , 2 ) ; mpz_init_set_ui ( P , 1 ) ; unsigned long long int k = 1 ; unsigned long long int l = 1 ;
while ( mpz_cmp_ui ( n , 1 ) != 0 ) { for (; ; ) { do { mpz_mul ( t , x , x ) ; mpz_mod ( x , t , n ) ; mpz_add_ui ( x , x , a ) ;
mpz_sub ( t , z , x ) ; mpz_mul ( t2 , P , t ) ; mpz_mod ( P , t2 , n ) ; if ( k % 32 == 1 ) { mpz_gcd ( t , P , n ) ;
if ( mpz_cmp_ui ( t , 1 ) != 0 ) goto factor_found; mpz_set ( y , x ) ; } } while ( -- k != 0 ); mpz_set ( z , x ) ; k = l ; l = 2 * l ;
unsigned long long int i ; for ( i = 0 ; i < k ; i ++ ) { mpz_mul ( t , x , x ) ; mpz_mod ( x , t , n ) ; mpz_add_ui ( x , x , a ) ; }
mpz_set ( y , x ) ; } factor_found: do { mpz_mul ( t , y , y ) ; mpz_mod ( y , t , n ) ; mpz_add_ui ( y , y , a ) ; mpz_sub ( t , z , y ) ;
mpz_gcd ( t , t , n ) ; } while ( mpz_cmp_ui ( t , 1 ) == 0 ); mpz_divexact ( n , n , t ) ; if ( ! mp_prime_p ( t ) ) { devmsg ( lr_4 ) ;
mp_factor_using_pollard_rho ( t , a + 1 , factors ) ; } else { mp_factor_insert ( factors , t ) ; } if ( mp_prime_p ( n ) ) { mp_factor_insert ( factors , n ) ; break; } mpz_mod ( x , x , n ) ;
mpz_mod ( z , z , n ) ; mpz_mod ( y , y , n ) ; } mpz_clears ( P , t2 , t , z , x , y , NULL ) ; } static uintmax_t _GL_ATTRIBUTE_CONST isqrt ( uintmax_t n ) { uintmax_t x ;
unsigned c ; if ( n == 0 ) return 0 ; count_leading_zeros ( c , n ) ; x = ( uintmax_t ) 1 << ( ( W_TYPE_SIZE + 1 - c ) / 2 ) ; for (; ; ) {
uintmax_t y = ( x + n / x ) / 2 ; if ( y >= x ) return x ; x = y ; } } static uintmax_t _GL_ATTRIBUTE_CONST isqrt2 ( uintmax_t nh , uintmax_t nl ) { unsigned int shift ; uintmax_t x ;
assert ( nh < ( ( uintmax_t ) 1 << ( W_TYPE_SIZE - 2 ) ) ) ; if ( nh == 0 ) return isqrt ( nl ) ; count_leading_zeros ( shift , nh ) ; shift &= ~ 1 ;
x = isqrt ( ( nh << shift ) + ( nl >> ( W_TYPE_SIZE - shift ) ) ) + 1 ; x <<= ( W_TYPE_SIZE - shift ) / 2 ; for (; ; ) { uintmax_t r _GL_UNUSED ; uintmax_t q , y ;
udiv_qrnnd ( q , r , nh , nl , x ) ; y = ( x + q ) / 2 ; if ( y >= x ) { uintmax_t hi , lo ; umul_ppmm ( hi , lo , x + 1 , x + 1 ) ;
assert ( gt2 ( hi , lo , nh , nl ) ) ; umul_ppmm ( hi , lo , x , x ) ; assert ( ge2 ( nh , nl , hi , lo ) ) ;
sub_ddmmss ( hi , lo , nh , nl , hi , lo ) ; assert ( hi == 0 ) ; return x ; } x = y ; } } static uintmax_t _GL_ATTRIBUTE_CONST is_square ( uintmax_t x ) {
if ( ( ( MAGIC64 >> ( x & 63 ) ) & 1 ) && ( ( MAGIC63 >> ( x % 63 ) ) & 1 ) && ( ( MAGIC65 >> ( ( x % 65 ) & 63 ) ) & 1 )
&& ( ( MAGIC11 >> ( x % 11 ) & 1 ) ) ) { uintmax_t r = isqrt ( x ) ; if ( r * r == x ) return r ; } return 0 ; } static bool
factor_using_squfof ( uintmax_t n1 , uintmax_t n0 , struct factors * factors ) { static const unsigned int multipliers_1 [] = { 105 , 165 , 21 , 385 , 33 , 5 , 77 , 1 , 0 } ; static const unsigned int multipliers_3 [] = {
1155 , 15 , 231 , 35 , 3 , 55 , 7 , 11 , 0 } ; const unsigned int * m ; struct { uintmax_t Q ; uintmax_t P ; } queue [ QUEUE_SIZE ] ;
if ( n1 >= ( ( uintmax_t ) 1 << ( W_TYPE_SIZE - 2 ) ) ) return false ; uintmax_t sqrt_n = isqrt2 ( n1 , n0 ) ; if ( n0 == sqrt_n * sqrt_n ) { uintmax_t p1 , p0 ;
umul_ppmm ( p1 , p0 , sqrt_n , sqrt_n ) ; assert ( p0 == n0 ) ; if ( n1 == p1 ) { if ( prime_p ( sqrt_n ) ) factor_insert_multiplicity ( factors , sqrt_n , 2 ) ; else { struct factors f ;
f . nfactors = 0 ; if ( ! factor_using_squfof ( 0 , sqrt_n , & f ) ) { factor_using_pollard_rho ( sqrt_n , 1 , & f ) ; } unsigned int i ; for ( i = 0 ; i < f . nfactors ; i ++ )
factor_insert_multiplicity ( factors , f . p [ i ] , 2 * f . e [ i ] ) ; } return true ; } } for ( m = ( n0 % 4 == 1 ) ? multipliers_3 : multipliers_1 ; * m ; m ++ ) {
uintmax_t S , Dh , Dl , Q1 , Q , P , L , L1 , B ; unsigned int i ; unsigned int mu = * m ; unsigned int qpos = 0 ; assert ( mu * n0 % 4 == 3 ) ;
if ( n1 == 0 ) { if ( ( uintmax_t ) mu * mu * mu >= n0 / 64 ) continue; } else { if ( n1 > ( ( uintmax_t ) 1 << ( W_TYPE_SIZE - 2 ) ) / mu ) continue; }
umul_ppmm ( Dh , Dl , n0 , mu ) ; Dh += n1 * mu ; assert ( Dl % 4 != 1 ) ; assert ( Dh < ( uintmax_t ) 1 << ( W_TYPE_SIZE - 2 ) ) ;
S = isqrt2 ( Dh , Dl ) ; Q1 = 1 ; P = S ; Q = Dl - P * P ; L = isqrt ( 2 * S ) ; B = 2 * L ; L1 = mu * 2 * L ;
for ( i = 0 ; i <= B ; i ++ ) { uintmax_t q , P1 , t , rem ; div_smallq ( q , rem , S + P , Q ) ; P1 = S - rem ; #if STAT_SQUFOF
assert ( q > 0 ) ; q_freq [ 0 ] ++ ; q_freq [ MIN ( q , Q_FREQ_SIZE ) ] ++ ; #endif if ( Q <= L1 ) { uintmax_t g = Q ; if ( ( Q & 1 ) == 0 )
g /= 2 ; g /= gcd_odd ( g , mu ) ; if ( g <= L ) { if ( qpos >= QUEUE_SIZE ) error ( EXIT_FAILURE , 0 , _ ( lr_5 ) ) ; queue [ qpos ] . Q = g ;
queue [ qpos ] . P = P % g ; qpos ++ ; } } t = Q1 + q * ( P - P1 ) ; Q1 = Q ; Q = t ; P = P1 ; if ( ( i & 1 ) == 0 )
{ uintmax_t r = is_square ( Q ) ; if ( r ) { unsigned int j ; for ( j = 0 ; j < qpos ; j ++ ) { if ( queue [ j ] . Q == r ) { if ( r == 1 )
goto next_multiplier; if ( P >= queue [ j ] . P ) t = P - queue [ j ] . P ; else t = queue [ j ] . P - P ; if ( t % r == 0 ) {
memmove ( queue , queue + j + 1 , ( qpos - j - 1 ) * sizeof ( queue [ 0 ] ) ) ; qpos -= ( j + 1 ) ; } goto next_i; } } Q1 = r ;
assert ( S >= P ) ; P += r * ( ( S - P ) / r ) ; uintmax_t hi , lo ; umul_ppmm ( hi , lo , P , P ) ;
sub_ddmmss ( hi , lo , Dh , Dl , hi , lo ) ; udiv_qrnnd ( Q , rem , hi , lo , Q1 ) ; assert ( rem == 0 ) ; for (; ; ) {
div_smallq ( q , rem , S + P , Q ) ; P1 = S - rem ; #if STAT_SQUFOF q_freq [ 0 ] ++ ; q_freq [ MIN ( q , Q_FREQ_SIZE ) ] ++ ; #endif if ( P == P1 ) break;
t = Q1 + q * ( P - P1 ) ; Q1 = Q ; Q = t ; P = P1 ; } if ( ( Q & 1 ) == 0 ) Q /= 2 ; Q /= gcd_odd ( Q , mu ) ;
assert ( Q > 1 && ( n1 || Q < n0 ) ) ; if ( prime_p ( Q ) ) factor_insert ( factors , Q ) ; else if ( ! factor_using_squfof ( 0 , Q , factors ) )
factor_using_pollard_rho ( Q , 2 , factors ) ; divexact_21 ( n1 , n0 , n1 , n0 , Q ) ; if ( prime2_p ( n1 , n0 ) ) factor_insert_large ( factors , n1 , n0 ) ; else {
if ( ! factor_using_squfof ( n1 , n0 , factors ) ) { if ( n1 == 0 ) factor_using_pollard_rho ( n0 , 1 , factors ) ; else factor_using_pollard_rho2 ( n1 , n0 , 1 , factors ) ; } } return true ; } } next_i: ; }
next_multiplier: ; } return false ; } static void factor ( uintmax_t t1 , uintmax_t t0 , struct factors * factors ) { factors -> nfactors = 0 ; factors -> plarge [ 1 ] = 0 ; if ( t1 == 0 && t0 < 2 ) return;
t0 = factor_using_division ( & t1 , t1 , t0 , factors ) ; if ( t1 == 0 && t0 < 2 ) return; if ( prime2_p ( t1 , t0 ) ) factor_insert_large ( factors , t1 , t0 ) ; else {
if ( alg == ALG_SQUFOF ) if ( factor_using_squfof ( t1 , t0 , factors ) ) return; if ( t1 == 0 ) factor_using_pollard_rho ( t0 , 1 , factors ) ; else factor_using_pollard_rho2 ( t1 , t0 , 1 , factors ) ; } } static void
mp_factor ( mpz_t t , struct mp_factors * factors ) { mp_factor_init ( factors ) ; if ( mpz_sgn ( t ) != 0 ) { mp_factor_using_division ( t , factors ) ; if ( mpz_cmp_ui ( t , 1 ) != 0 ) { devmsg ( lr_6 ) ;
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
print_uintmaxes ( uintmax_t t1 , uintmax_t t0 ) { uintmax_t q , r ; if ( t1 == 0 ) printf ( lr_7 PRIuMAX , t0 ) ; else { q = t1 / 1000000000 ; r = t1 % 1000000000 ;
udiv_qrnnd ( t0 , r , r , t0 , 1000000000 ) ; print_uintmaxes ( q , t0 ) ; printf ( lr_8 , ( int ) r ) ; } } static void print_factors_single ( uintmax_t t1 , uintmax_t t0 ) { struct factors factors ;
print_uintmaxes ( t1 , t0 ) ; putchar ( ':' ) ; factor ( t1 , t0 , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) { char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; putchar ( ' ' ) ;
fputs ( umaxtostr ( factors . p [ j ] , buf ) , stdout ) ; } if ( factors . plarge [ 1 ] ) { putchar ( ' ' ) ;
print_uintmaxes ( factors . plarge [ 1 ] , factors . plarge [ 0 ] ) ; } putchar ( '\n' ) ; } static bool print_factors ( const char * input ) { uintmax_t t1 , t0 ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
error ( 0 , 0 , _ ( lr_14 ) , quote ( input ) ) ; return false ; #endif } void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_15 ) ,
program_name , program_name ) ; fputs ( _ ( lr_16 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } static bool do_stdin ( void ) {
bool ok = true ; token_buffer tokenbuffer ; init_tokenbuffer ( & tokenbuffer ) ; while ( true ) { size_t token_length = readtoken ( stdin , DELIM , sizeof ( DELIM ) - 1 , & tokenbuffer ) ; if ( token_length == ( size_t ) - 1 ) break;
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; int c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
#if STAT_SQUFOF if ( alg == ALG_SQUFOF && q_freq [ 0 ] > 0 ) { double acc_f ; printf ( lr_18 , q_freq [ 0 ] ) ; unsigned int i ; for ( i = 1 , acc_f = 0.0 ; i <= Q_FREQ_SIZE ; i ++ )
{ double f = ( double ) q_freq [ i ] / q_freq [ 0 ] ; acc_f += f ; printf ( lr_19 , i == Q_FREQ_SIZE ? lr_20 : lr_17 , i , 100.0 * f , 100.0 * acc_f ) ; } } #endif
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!CONSTVAL$0$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!DELSTMT]MSP[N]
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; MST[STMT!TRAPSTMT]MSP[N] mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; MST[STMT!DELSTMT]MSP[N] mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[C!ADD$C$-1$]MSP[N] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; MST[C!ADD$C$1$]MSP[N] putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N] return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[N] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[C!CONSTVAL$0$]MSP[N] #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; MST[STMT!TRAPSTMT]MSP[N] #else
print_uintmaxes ( factors . plarge [ 1 ] , factors . plarge [ 0 ] ) ; } putchar ( '\n' ) ; } static bool MST[STMT!TRAPSTMT]MSP[N] print_factors ( const char * input ) { uintmax_t t1 , t0 ;
print_uintmaxes ( factors . plarge [ 1 ] , factors . plarge [ 0 ] ) ; } putchar ( '\n' ) ; } static bool MST[STMT!DELSTMT]MSP[N] print_factors ( const char * input ) { uintmax_t t1 , t0 ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$-1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[STMT!TRAPSTMT]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$-1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; MST[C!ADD$C$1$]MSP[N] strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[STMT!TRAPSTMT]MSP[N] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!CONSTVAL$0$]MSP[N] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!ADD$C$-1$]MSP[N] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; MST[C!ADD$C$1$]MSP[N] for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) MST[STMT!TRAPSTMT]MSP[N] { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[STMT!DELSTMT]MSP[N] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[N] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; MST[@!ABS$@$]MSP[N] if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[STMT!TRAPSTMT]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[@!ABS$@$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!CONSTVAL$0$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!ADD$C$-1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[C!ADD$C$1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] s ++ ; else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!TRAPSTMT]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!DELSTMT]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[S] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!PRIGHTINC$P1$]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[C!CONSTVAL$0$]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[C!ADD$C$1$]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!TRAPSTMT]MSP[N] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; MST[STMT!DELSTMT]MSP[S] else if ( c == '+' ) { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[STMT!TRAPSTMT]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[N] { s ++ ; break; } else break;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[@!ABS$@$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!CONSTVAL$0$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!ADD$C$-1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[C!ADD$C$1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { s ++ ; break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[STMT!TRAPSTMT]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[STMT!DELSTMT]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PLEFTINC$P1$!PLEFTDEC$P1$]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PLEFTINC$P1$!OPERAND$P1$]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[C!CONSTVAL$0$]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[C!ADD$C$1$]MSP[S] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] break; } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; MST[STMT!TRAPSTMT]MSP[N] } else break;
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break; MST[STMT!TRAPSTMT]MSP[N]
uintmax_t hi = 0 , lo = 0 ; strtol_error err = LONGINT_INVALID ; for (; ; ) { char c = * s ; if ( c == ' ' ) s ++ ; else if ( c == '+' ) { s ++ ; break; } else break; MST[STMT!DELSTMT]MSP[N]
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[S] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
} const char * p = s ; MST[STMT!TRAPSTMT]MSP[N] for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; MST[STMT!DELSTMT]MSP[N] for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) MST[STMT!TRAPSTMT]MSP[N] { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[STMT!DELSTMT]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[@!ABS$@$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[@!ABS$@$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[C!CONSTVAL$0$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[C!ADD$C$1$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!PLEFTINC$P1$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!PLEFTDEC$P1$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; MST[PRIGHTINC$P1$!OPERAND$P1$]MSP[N] if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[STMT!TRAPSTMT]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[C!ADD$C$-1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[C!ADD$C$1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; MST[STMT!TRAPSTMT]MSP[N] if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; MST[STMT!DELSTMT]MSP[N] if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!BITSHL$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!SUB$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[BITXOR$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!CONSTVAL$0$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!OPERAND$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!NEG$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_INVALID ; break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[STMT!TRAPSTMT]MSP[N] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[STMT!DELSTMT]MSP[S] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] break; } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!CONSTVAL$0$]MSP[N] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!ADD$C$-1$]MSP[N] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; MST[C!ADD$C$1$]MSP[N] break; } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; MST[STMT!TRAPSTMT]MSP[N] } err = LONGINT_OK ;
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; MST[STMT!DELSTMT]MSP[N] } err = LONGINT_OK ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[STMT!TRAPSTMT]MSP[N]
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[STMT!DELSTMT]MSP[N]
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[C!ADD$C$-1$]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[STMT!TRAPSTMT]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} const char * p = s ; for (; ; ) { unsigned int c = * p ++ ; if ( c == 0 ) break; if ( UNLIKELY ( ! ISDIGIT ( c ) ) ) { err = LONGINT_INVALID ; break; } err = LONGINT_OK ; MST[C!ADD$C$1$]MSP[N]
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!TRAPSTMT]MSP[N] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[N] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
} for (; err == LONGINT_OK ; ) MST[STMT!TRAPSTMT]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[@!ABS$@$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[@!ABS$@$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[C!ADD$C$-1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[C!ADD$C$1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[STMT!TRAPSTMT]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[STMT!DELSTMT]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[@!ABS$@$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[@!ABS$@$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[C!CONSTVAL$0$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[C!ADD$C$1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!PLEFTINC$P1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!PLEFTDEC$P1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; MST[PRIGHTINC$P1$!OPERAND$P1$]MSP[N] if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[STMT!TRAPSTMT]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[@!ABS$@$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[C!ADD$C$-1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[C!ADD$C$1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; MST[STMT!TRAPSTMT]MSP[N] c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; MST[STMT!DELSTMT]MSP[N] c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!OPERAND$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DELSTMT]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MUL$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[@!ABS$@$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[@!ABS$@$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[C!ADD$C$-1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; MST[C!ADD$C$1$]MSP[N] if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[STMT!TRAPSTMT]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!CONSTVAL$0$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MOD$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITXOR$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MUL$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHL$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!ADD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHL$@1$@2$]MSP[S] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!DIV$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) MST[@!ABS$@$]MSP[N] { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!SUB$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!NEG$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITSHR$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!CONSTVAL$0$]MSP[S] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!OPERAND$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!BITAND$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[STMT!TRAPSTMT]MSP[N] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!OPERAND$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!DIV$@1$@2$]MSP[S] { err = LONGINT_OVERFLOW ; break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) MST[GT$@1$@2$!NEQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[STMT!DELSTMT]MSP[S] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[STMT!TRAPSTMT]MSP[S] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[STMT!DELSTMT]MSP[S] break; }
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[S] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[C!CONSTVAL$0$]MSP[S] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; MST[C!ADD$C$1$]MSP[S] break; }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!TRAPSTMT]MSP[S] }
} for (; err == LONGINT_OK ; ) { unsigned int c = * s ++ ; if ( c == 0 ) break; c -= '0' ; if ( UNLIKELY ( hi > ~ ( uintmax_t ) 0 / 10 ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!DELSTMT]MSP[N] }
hi = 10 * hi ; MST[STMT!TRAPSTMT]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[STMT!DELSTMT]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ABS$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEG$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!NEG$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!ABS$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[@!ABS$@$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[@!ABS$@$]MSP[S] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[C!ADD$C$-1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; MST[C!ADD$C$1$]MSP[N] lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[STMT!TRAPSTMT]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[STMT!DELSTMT]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ABS$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!OPERAND$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!NEG$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[BITSHR$V1$@2$!ASSIGN$V1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[@!ABS$@$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$-1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$-1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[C!ADD$C$1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[C!CONSTVAL$0$]MSP[S] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; MST[C!ADD$C$1$]MSP[S] break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; MST[STMT!TRAPSTMT]MSP[N] case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; MST[STMT!DELSTMT]MSP[N] case 's' : alg = ALG_SQUFOF ; break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[STMT!TRAPSTMT]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[STMT!DELSTMT]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[N] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[STMT!TRAPSTMT]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[STMT!DELSTMT]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[S] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[@!ABS$@$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$-1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[C!ADD$C$1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEG$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEG$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITNOT$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!OPERAND$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ABS$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!ABS$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!OPERAND$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!LE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GE$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!LE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GE$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GT$@2$@1$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; MST[LT$@1$@2$!GT$@1$@2$]MSP[N] lo = 10 * lo ; lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[STMT!TRAPSTMT]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[STMT!DELSTMT]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEQ$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITOR$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!OPERAND$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ABS$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!SUB$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ADD$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITNOT$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITAND$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEG$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITNOT$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHL$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!CONSTVAL$1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!EQ$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!CONSTVAL$0$]MSP[N] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!CONSTVAL$0$]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!NEG$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!ABS$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITXOR$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHL$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!SUB$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@1$@2$]MSP[N] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!ADD$C$-1$]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GE$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LT$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!MOD$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!DIV$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!LE$@2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!GT$@1$@2$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$@2$!BITSHR$@1$@2$]MSP[N] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; MST[C!ADD$C$1$]MSP[N] break; case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[MUL$@1$V2$!ASSIGN$V2$@1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] lo += c ;
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; MST[STMT!TRAPSTMT]MSP[N] case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; MST[STMT!DELSTMT]MSP[N] case 'w' :
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[@!ABS$@$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[@!ABS$@$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[C!ADD$C$-1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; MST[C!ADD$C$1$]MSP[N] lo += c ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[STMT!TRAPSTMT]MSP[N]
flag_prove_primality = false ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N]
flag_prove_primality = false ; MST[STMT!DELSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[@!ABS$@$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!ABS$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEG$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEG$@2$]MSP[N]
flag_prove_primality = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
hi = 10 * hi ; lo_carry = ( lo >> ( W_TYPE_SIZE - 3 ) ) + ( lo >> ( W_TYPE_SIZE - 1 ) ) ; lo_carry += 10 * lo < 2 * lo ; lo = 10 * lo ; lo += c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
lo_carry += lo < c ; MST[STMT!TRAPSTMT]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[STMT!DELSTMT]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[S] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[@!ABS$@$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEG$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEG$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITNOT$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!OPERAND$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ABS$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!ABS$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!LE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GE$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!LE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GE$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GT$@2$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!BITNOT$@1$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; MST[LT$@1$@2$!GT$@1$@2$]MSP[N] hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[STMT!TRAPSTMT]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; MST[C!ADD$C$-1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[STMT!DELSTMT]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; MST[C!ADD$C$1$]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[S] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[@!ABS$@$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[STMT!TRAPSTMT]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[@!ABS$@$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[C!ADD$C$-1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[C!ADD$C$1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[STMT!TRAPSTMT]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[STMT!DELSTMT]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[C!CONSTVAL$0$]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; MST[C!ADD$C$1$]MSP[S] break; } } * hip = hi ; * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!TRAPSTMT]MSP[S] } } * hip = hi ; * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; MST[STMT!DELSTMT]MSP[N] } } * hip = hi ; * lop = lo ; return err ; } static void
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!TRAPSTMT]MSP[N] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
if ( mp_prime_p ( t ) ) mp_factor_insert ( factors , t ) ; else mp_factor_using_pollard_rho ( t , 1 , factors ) ; } } } static strtol_error MST[STMT!DELSTMT]MSP[N] strto2uintmax ( uintmax_t * hip , uintmax_t * lop , const char * s ) { unsigned int lo_carry ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[STMT!TRAPSTMT]MSP[N] * lop = lo ; return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[STMT!DELSTMT]MSP[N] * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; MST[@!ABS$@$]MSP[N] * lop = lo ; return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[STMT!TRAPSTMT]MSP[N] return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[STMT!DELSTMT]MSP[N] return err ; } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; MST[@!ABS$@$]MSP[N] return err ; } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[STMT!TRAPSTMT]MSP[N] } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[STMT!DELSTMT]MSP[N] } static void
lo_carry += lo < c ; hi += lo_carry ; if ( UNLIKELY ( hi < lo_carry ) ) { err = LONGINT_OVERFLOW ; break; } } * hip = hi ; * lop = lo ; return err ; MST[@!ABS$@$]MSP[N] } static void
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } } #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
flag_prove_primality = false ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[N] #if STAT_SQUFOF if ( alg == ALG_SQUFOF ) memset ( q_freq , 0 , sizeof ( q_freq ) ) ; #endif bool ok ;
if ( argc <= optind ) MST[STMT!TRAPSTMT]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[@!ABS$@$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$V1$@2$!ASSIGN$V1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ABS$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITXOR$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!DIV$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!CONSTVAL$0$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITOR$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEG$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!ABS$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHL$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITSHR$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITAND$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!BITNOT$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!OPERAND$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!NEG$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!SUB$@2$@1$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) MST[LE$@1$@2$!MOD$@1$@2$]MSP[N] ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!TRAPSTMT]MSP[N] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!DELSTMT]MSP[N] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!TRAPSTMT]MSP[N] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; MST[STMT!DELSTMT]MSP[S] else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[STMT!TRAPSTMT]MSP[N] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[C!CONSTVAL$0$]MSP[N] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; MST[C!ADD$C$1$]MSP[N] int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[@!ABS$@$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[@!ABS$@$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PRIGHTDEC$P$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PLEFTINC$P$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PRIGHTINC$P$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) MST[P!PLEFTDEC$P$]MSP[N] ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) if ( ! print_factors ( argv [ i ] ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[@!ABS$@$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[C!ADD$C$1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
if ( argc <= optind ) ok = do_stdin () ; else { ok = true ; int i ; for ( i = optind ; i < argc ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( ! print_factors ( argv [ i ] ) ) ok = false ; }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
ok &= print_factors ( tokenbuffer . buffer ) ; } free ( tokenbuffer . buffer ) ; return ok ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[STMT!DELSTMT]MSP[N] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; int c ;
setlocale ( LC_ALL , lr_17 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[@!ABS$@$]MSP[N] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[STMT!TRAPSTMT]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) MST[@!ABS$@$]MSP[N] { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[STMT!TRAPSTMT]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MUL$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!CONSTVAL$1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MOD$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEQ$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!CONSTVAL$0$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITAND$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!SUB$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!EQ$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!ABS$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITSHL$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!MOD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!ADD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITNOT$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] alg = ALG_POLLARD_RHO ; int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEG$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITNOT$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITXOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!LE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!DIV$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!NEG$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!BITSHL$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[STMT!TRAPSTMT]MSP[N] int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!GT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHR$@1$@2$!SUB$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[@!ABS$@$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!CONSTVAL$0$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!ADD$C$1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[C!ADD$C$1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$V1$@2$!ASSIGN$V1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!EQ$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!ADD$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITNOT$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITNOT$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITAND$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!SUB$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!SUB$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!NEG$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] int c ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!ABS$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITXOR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!NEQ$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!MOD$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!BITSHR$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!DIV$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!LT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GT$@2$@1$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) MST[BITSHL$@1$@2$!GE$@1$@2$]MSP[N] { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; MST[STMT!TRAPSTMT]MSP[N] print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; MST[STMT!DELSTMT]MSP[N] print_factors_single ( t1 , t0 ) ;
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[STMT!TRAPSTMT]MSP[N]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[STMT!DELSTMT]MSP[N]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[@!ABS$@$]MSP[N]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[@!ABS$@$]MSP[N]
strtol_error err = strto2uintmax ( & t1 , & t0 , input ) ; switch ( err ) { case LONGINT_OK : if ( ( ( t1 << 1 ) >> 1 ) == t1 ) { devmsg ( lr_9 ) ; print_factors_single ( t1 , t0 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
return true ; MST[STMT!TRAPSTMT]MSP[N] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!DELSTMT]MSP[N] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[C!CONSTVAL$0$]MSP[N] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!TRAPSTMT]MSP[N] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; MST[STMT!DELSTMT]MSP[N] } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; MST[STMT!TRAPSTMT]MSP[N] case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; MST[STMT!TRAPSTMT]MSP[N] default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[STMT!DELSTMT]MSP[N] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!DELSTMT]MSP[N] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; MST[STMT!DELSTMT]MSP[N] } #if HAVE_GMP devmsg ( lr_11 ) ; mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; MST[STMT!TRAPSTMT]MSP[N] mpz_t t ; struct mp_factors factors ;
return true ; } break; case LONGINT_OVERFLOW : break; default: error ( 0 , 0 , _ ( lr_10 ) , quote ( input ) ) ; return false ; } #if HAVE_GMP devmsg ( lr_11 ) ; MST[STMT!DELSTMT]MSP[N] mpz_t t ; struct mp_factors factors ;
mpz_init_set_str ( t , input , 10 ) ; MST[STMT!TRAPSTMT]MSP[N] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[STMT!DELSTMT]MSP[N] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[C!ADD$C$-1$]MSP[N] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; MST[C!ADD$C$1$]MSP[N] gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[STMT!TRAPSTMT]MSP[N] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[STMT!DELSTMT]MSP[N] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[C!ADD$C$-1$]MSP[N] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; MST[C!ADD$C$1$]MSP[N] mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[STMT!TRAPSTMT]MSP[N] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[STMT!DELSTMT]MSP[N] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[C!ADD$C$-1$]MSP[N] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; MST[C!ADD$C$1$]MSP[N] unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ )
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$-1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[C!ADD$C$1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!TRAPSTMT]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[@!ABS$@$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N]
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$-1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[C!CONSTVAL$0$]MSP[N] int c ;
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[A!CONSTVAL$0$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
setlocale ( LC_ALL , lr_17 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; alg = ALG_POLLARD_RHO ; MST[C!ADD$C$1$]MSP[N] int c ;
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!DELSTMT]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[A!CONSTVAL$0$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[@!ABS$@$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[C!ADD$C$-1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[C!ADD$C$1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[@!ABS$@$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!CONSTVAL$0$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[C!ADD$C$1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!TRAPSTMT]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) MST[STMT!DELSTMT]MSP[N] gmp_printf ( lr_13 , factors . p [ j ] ) ; mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
for ( k = 0 ; k < factors . e [ j ] ; k ++ ) gmp_printf ( lr_13 , factors . p [ j ] ) ; MST[STMT!TRAPSTMT]MSP[N] mp_factor_clear ( & factors ) ; mpz_clear ( t ) ; putchar ( '\n' ) ; return true ; #else
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[STMT!DELSTMT]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N]
mpz_init_set_str ( t , input , 10 ) ; gmp_printf ( lr_12 , t ) ; mp_factor ( t , & factors ) ; unsigned int j ; unsigned int k ; for ( j = 0 ; j < factors . nfactors ; j ++ ) MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N]
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
while ( ( c = getopt_long ( argc , argv , lr_17 , long_options , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( c ) { case DEV_DEBUG_OPTION : dev_debug = true ; break; case 's' : alg = ALG_SQUFOF ; break; case 'w' :
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
exit ( EXIT_STATUS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[S] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N]
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[@!ABS$@$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[@!ABS$@$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[C!CONSTVAL$0$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[C!ADD$C$1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[C!ADD$C$-1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[C!ADD$C$1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[P!PRIGHTDEC$P$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; MST[STMT!TRAPSTMT]MSP[N] if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; MST[STMT!DELSTMT]MSP[S] if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[STMT!TRAPSTMT]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[A!CONSTVAL$0$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[A!CONSTVAL$0$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[@!ABS$@$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[@!ABS$@$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[C!CONSTVAL$0$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[C!ADD$C$1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[C!ADD$C$-1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[C!ADD$C$1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[P!PRIGHTDEC$P$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[P!PLEFTINC$P$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[STMT!TRAPSTMT]MSP[N] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[STMT!DELSTMT]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( char * ) NULL ) ; }
void usage ( int status ) { printf ( _ ( lr_1 ) , MST[STMT!DELSTMT]MSP[S] program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[N] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[CALL!SHUFFLEARGS$2$]MSP[S] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , MST[STMT!TRAPSTMT]MSP[N] ( char * ) NULL ) ; }
if ( STREQ ( argv [ 1 ] , lr_6 ) ) usage ( EXIT_STATUS ) ; if ( STREQ ( argv [ 1 ] , lr_7 ) ) version_etc ( stdout , PROGRAM_NAME , PACKAGE_NAME , Version , AUTHORS , ( char * ) NULL ) ; } MST[STMT!TRAPSTMT]MSP[N]
exit ( EXIT_STATUS ) ; MST[STMT!TRAPSTMT]MSP[N] }
exit ( EXIT_STATUS ) ; MST[STMT!DELSTMT]MSP[N] }
void usage ( int status ) { printf ( _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , MST[CALL!SHUFFLEARGS$2$]MSP[S] program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , MST[STMT!TRAPSTMT]MSP[N] _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , MST[STMT!DELSTMT]MSP[S] _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , MST[@!ABS$@$]MSP[N] _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , MST[CALL!SHUFFLEARGS$2$]MSP[S] _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
void usage ( int status ) { printf ( _ ( lr_1 ) , program_name , program_name ) ; printf ( lr_2 , _ ( EXIT_STATUS == EXIT_SUCCESS ? N_ ( lr_3 ) : N_ ( lr_4 ) ) ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; MST[STMT!TRAPSTMT]MSP[N] emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; MST[STMT!DELSTMT]MSP[S] emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) { if ( argc == 2 ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[@!ABS$@$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[@!ABS$@$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[C!CONSTVAL$0$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[C!ADD$C$-1$]MSP[N] {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; printf ( USAGE_BUILTIN_WARNING , PROGRAM_NAME ) ; emit_ancillary_info () ; exit ( status ) ; } int main ( int argc , char * * argv ) { if ( argc == 2 ) MST[C!ADD$C$1$]MSP[N] {
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ )
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
static char * gidtostr_ptr ( gid_t const * gid ) { static char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; return umaxtostr ( * gid , buf ) ; } extern bool print_group ( gid_t gid , bool use_name ) { struct group * grp = NULL ;
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; return ok ; }
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; MST[STMT!TRAPSTMT]MSP[N] struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; MST[C!CONSTVAL$0$]MSP[N] struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; MST[C!ADD$C$1$]MSP[N] struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; MST[STMT!TRAPSTMT]MSP[N] if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; MST[STMT!DELSTMT]MSP[S] if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) MST[STMT!TRAPSTMT]MSP[N] { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) MST[@!ABS$@$]MSP[N] { pwd = getpwuid ( ruid ) ;
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ; MST[STMT!TRAPSTMT]MSP[N]
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ; MST[STMT!DELSTMT]MSP[N]
extern bool print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ; MST[@!ABS$@$]MSP[N]
if ( pwd == NULL ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) MST[@!ABS$@$]MSP[N] ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[STMT!DELSTMT]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[C!ADD$C$-1$]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[C!ADD$C$1$]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[STMT!TRAPSTMT]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!ABS$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!NEG$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!ABS$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!CONSTVAL$1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!NEG$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[NEQ$@1$V2$!ASSIGN$V2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; MST[STMT!DELSTMT]MSP[N] if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group ( egid , use_names ) )
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) ) MST[STMT!TRAPSTMT]MSP[N]
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) ) MST[@!ABS$@$]MSP[N]
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) ) MST[@!ABS$@$]MSP[N]
if ( pwd == NULL ) ok = false ; } if ( ! print_group ( rgid , use_names ) ) ok = false ; if ( egid != rgid ) { putchar ( delim ) ; if ( ! print_group ( egid , use_names ) ) MST[@!ABS$@$]MSP[N]
ok = false ; MST[STMT!TRAPSTMT]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[STMT!DELSTMT]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[C!ADD$C$-1$]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[C!ADD$C$1$]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
ok = false ; MST[STMT!TRAPSTMT]MSP[N] } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) {
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!DELSTMT]MSP[S] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[@!ABS$@$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!DELSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[@!ABS$@$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[C!ADD$C$-1$]MSP[S] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[C!ADD$C$1$]MSP[S] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!DELSTMT]MSP[S] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!DELSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[@!ABS$@$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!TRAPSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[STMT!DELSTMT]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[@!ABS$@$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; MST[@!ABS$@$]MSP[N] if ( n_groups < 0 ) { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[STMT!TRAPSTMT]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[@!ABS$@$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[@!ABS$@$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[C!ADD$C$-1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[C!ADD$C$1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[S] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[S] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { if ( username ) {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) MST[STMT!TRAPSTMT]MSP[N] {
ok = false ; } { gid_t * groups ; int i ; int n_groups = xgetgroups ( username , ( pwd ? pwd -> pw_gid : egid ) , & groups ) ; if ( n_groups < 0 ) { if ( username ) MST[@!ABS$@$]MSP[N] {
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[STMT!DELSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[@!ABS$@$]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[CALL!SHUFFLEARGS$2$]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[CALL!SHUFFLEARGS$2$]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[STMT!DELSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; MST[STMT!TRAPSTMT]MSP[N] } return false ; } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; MST[STMT!DELSTMT]MSP[N] } return false ; } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; MST[@!ABS$@$]MSP[N] } return false ; } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] } return false ; } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[STMT!TRAPSTMT]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[STMT!DELSTMT]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[C!ADD$C$-1$]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[STMT!TRAPSTMT]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; MST[STMT!DELSTMT]MSP[N] } for ( i = 0 ; i < n_groups ; i ++ )
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[C!ADD$C$-1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[C!ADD$C$1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[@!ABS$@$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[@!ABS$@$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[@!ABS$@$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!ABS$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[S]
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[STMT!TRAPSTMT]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!NEG$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ABS$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!CONSTVAL$1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!NEG$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$V2$!ASSIGN$V2$@1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[STMT!TRAPSTMT]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!ABS$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!CONSTVAL$1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!NEG$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[NEQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[@!ABS$@$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[S] { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; MST[STMT!TRAPSTMT]MSP[S] if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; MST[STMT!DELSTMT]MSP[N] if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[STMT!TRAPSTMT]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[@!ABS$@$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[S] ok = false ; } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] } free ( groups ) ; } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] } free ( groups ) ; } return ok ; }
extern bool MST[STMT!TRAPSTMT]MSP[S] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[STMT!DELSTMT]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[@!ABS$@$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[@!ABS$@$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[C!CONSTVAL$0$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[C!ADD$C$1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[S]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , errno , _ ( lr_1 ) , quote ( username ) ) ; } else { error ( 0 , errno , _ ( lr_2 ) ) ; } return false ; } for ( i = 0 ; i < n_groups ; i ++ ) MST[STMT!DELSTMT]MSP[S]
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; MST[STMT!TRAPSTMT]MSP[N] } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; MST[STMT!DELSTMT]MSP[S] } return ok ; }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; MST[STMT!TRAPSTMT]MSP[N] }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; MST[STMT!DELSTMT]MSP[N] }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; MST[@!ABS$@$]MSP[N] }
if ( groups [ i ] != rgid && groups [ i ] != egid ) { putchar ( delim ) ; if ( ! print_group ( groups [ i ] , use_names ) ) ok = false ; } free ( groups ) ; } return ok ; MST[STMT!TRAPSTMT]MSP[N] }
extern bool MST[STMT!TRAPSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
extern bool MST[STMT!DELSTMT]MSP[N] print_group_list ( const char * username , uid_t ruid , gid_t rgid , gid_t egid , bool use_names , char delim ) { bool ok = true ; struct passwd * pwd = NULL ; if ( username ) { pwd = getpwuid ( ruid ) ;
static char * gidtostr_ptr ( gid_t const * gid ) { static char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; return umaxtostr ( * gid , buf ) ; } extern bool print_group ( gid_t gid , bool use_name ) { struct group * grp = NULL ; MST[STMT!TRAPSTMT]MSP[N]
static char * gidtostr_ptr ( gid_t const * gid ) { static char buf [ INT_BUFSIZE_BOUND ( uintmax_t ) ] ; return umaxtostr ( * gid , buf ) ; } extern bool print_group ( gid_t gid , bool use_name ) { struct group * grp = NULL ; MST[STMT!DELSTMT]MSP[S]
bool ok = true ; MST[STMT!TRAPSTMT]MSP[N] if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; MST[C!CONSTVAL$0$]MSP[N] if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; MST[C!ADD$C$1$]MSP[N] if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) MST[STMT!TRAPSTMT]MSP[N] { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) MST[@!ABS$@$]MSP[N] { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) MST[@!ABS$@$]MSP[N] { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; MST[STMT!DELSTMT]MSP[N] if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; MST[@!ABS$@$]MSP[N] if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , MST[STMT!TRAPSTMT]MSP[N] ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , MST[STMT!DELSTMT]MSP[N] ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , MST[@!ABS$@$]MSP[N] ( unsigned long int ) gid ) ; ok = false ; } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; MST[STMT!TRAPSTMT]MSP[N] } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; MST[ASSIGN$V1$@2$!GT$@2$V1$]MSP[N] } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; MST[C!ADD$C$-1$]MSP[N] } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; MST[C!ADD$C$1$]MSP[N] } }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } MST[STMT!TRAPSTMT]MSP[N] }
bool ok = true ; if ( use_name ) { grp = getgrgid ( gid ) ; if ( grp == NULL ) { error ( 0 , 0 , _ ( lr_3 ) , ( unsigned long int ) gid ) ; ok = false ; } } MST[STMT!TRAPSTMT]MSP[N]
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[@!ABS$@$]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!DELSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[A!CONSTVAL$0$]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[C!ADD$C$-1$]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[C!ADD$C$1$]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!DELSTMT]MSP[S] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!DELSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; MST[STMT!DELSTMT]MSP[N] fputs ( s , stdout ) ; return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; MST[STMT!DELSTMT]MSP[S] return ok ; }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; return ok ; MST[STMT!TRAPSTMT]MSP[N] }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; return ok ; MST[STMT!DELSTMT]MSP[N] }
char * s = grp ? grp -> gr_name : gidtostr ( gid ) ; fputs ( s , stdout ) ; return ok ; MST[@!ABS$@$]MSP[N] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; gid_t rgid , egid ; uid_t ruid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[S] } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!TRAPSTMT]MSP[N] }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!DELSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[@!ABS$@$]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!CONSTVAL$0$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$-1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
exit ( ok ? EXIT_SUCCESS : EXIT_FAILURE ) ; MST[C!ADD$C$1$]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[N] { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } }
if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[@!ABS$@$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[S] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[STMT!TRAPSTMT]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[@!ABS$@$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[C!CONSTVAL$0$]MSP[N] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; MST[C!ADD$C$-1$]MSP[S] gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[STMT!DELSTMT]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[@!ABS$@$]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[C!CONSTVAL$0$]MSP[S] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; MST[C!ADD$C$-1$]MSP[N] errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[STMT!DELSTMT]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[C!ADD$C$-1$]MSP[N] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; MST[C!ADD$C$1$]MSP[S] ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[STMT!TRAPSTMT]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[STMT!DELSTMT]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; MST[@!ABS$@$]MSP[N] if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[S] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ;
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[@!ABS$@$]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
if ( optind == argc ) { uid_t NO_UID = - 1 ; gid_t NO_GID = - 1 ; errno = 0 ; ruid = getuid () ; if ( ruid == NO_UID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[C!ADD$C$-1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; MST[C!ADD$C$1$]MSP[N] egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[STMT!TRAPSTMT]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[STMT!DELSTMT]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; MST[@!ABS$@$]MSP[N] if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[@!ABS$@$]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[N] errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[STMT!TRAPSTMT]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[C!ADD$C$-1$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; MST[C!ADD$C$1$]MSP[N] rgid = getgid () ; if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[STMT!TRAPSTMT]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[STMT!DELSTMT]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; MST[@!ABS$@$]MSP[N] if ( rgid == NO_GID && errno )
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!NEG$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!ABS$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[STMT!TRAPSTMT]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[@!ABS$@$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[C!ADD$C$-1$]MSP[N]
errno = 0 ; egid = getegid () ; if ( egid == NO_GID && errno ) error ( EXIT_FAILURE , errno , _ ( lr_5 ) ) ; errno = 0 ; rgid = getgid () ; if ( rgid == NO_GID && errno ) MST[C!ADD$C$1$]MSP[N]
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!DELSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[C!CONSTVAL$0$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { int optc ; bool ok = true ; MST[C!ADD$C$1$]MSP[N] gid_t rgid , egid ; uid_t ruid ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$-1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[C!ADD$C$1$]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!TRAPSTMT]MSP[N] } else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; MST[STMT!DELSTMT]MSP[N] } else { while ( optind < argc ) {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!TRAPSTMT]MSP[N] else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } MST[STMT!DELSTMT]MSP[N] else { while ( optind < argc ) {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[@!ABS$@$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] {
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] {
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
error ( EXIT_FAILURE , errno , _ ( lr_6 ) ) ; if ( ! print_group_list ( NULL , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } else { while ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] {
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[S] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[STMT!TRAPSTMT]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[@!ABS$@$]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[C!ADD$C$-1$]MSP[S] rgid = egid = pwd -> pw_gid ;
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; MST[C!ADD$C$1$]MSP[N] rgid = egid = pwd -> pw_gid ;
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[STMT!TRAPSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[STMT!DELSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S]
initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[@!ABS$@$]MSP[N]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[C!ADD$C$-1$]MSP[S]
struct passwd * pwd = getpwnam ( argv [ optind ] ) ; if ( pwd == NULL ) error ( EXIT_FAILURE , 0 , _ ( lr_7 ) , argv [ optind ] ) ; ruid = pwd -> pw_uid ; rgid = egid = pwd -> pw_gid ; MST[C!ADD$C$1$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[STMT!DELSTMT]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[@!ABS$@$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PLEFTINC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[STMT!TRAPSTMT]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[A!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[@!ABS$@$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[C!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[C!ADD$C$1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PRIGHTDEC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PLEFTINC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PRIGHTINC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[P!PLEFTDEC$P$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; putchar ( '\n' ) ; } }
printf ( lr_8 , argv [ optind ] ) ; if ( ! print_group_list ( argv [ optind ++ ] , ruid , rgid , egid , true , ' ' ) ) ok = false ; MST[STMT!TRAPSTMT]MSP[N] putchar ( '\n' ) ; } }
while ( ( optc = getopt_long ( argc , argv , lr_3 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( optc ) { case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( _ ( lr_3 ) , stdout ) ;
fputs ( _ ( lr_4 ) , stdout ) ; fputs ( _ ( lr_5 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; fputs ( _ ( lr_6 ) , stdout ) ; emit_ancillary_info () ; }
exit ( status ) ; } static void extract_field ( struct line * line , char * field , size_t len ) { if ( line -> nfields >= line -> nfields_allocated ) { line -> fields = X2NREALLOC ( line -> fields , & line -> nfields_allocated ) ;
} line -> fields [ line -> nfields ] . beg = field ; line -> fields [ line -> nfields ] . len = len ; ++ ( line -> nfields ) ; } static void xfields ( struct line * line ) {
char * ptr = line -> buf . buffer ; char const * lim = ptr + line -> buf . length - 1 ; if ( ptr == lim ) return; if ( 0 <= tab && tab != '\n' ) { char * sep ;
for (; ( sep = memchr ( ptr , tab , lim - ptr ) ) != NULL ; ptr = sep + 1 ) extract_field ( line , ptr , sep - ptr ) ; } else if ( tab < 0 ) {
while ( isblank ( to_uchar ( * ptr ) ) ) if ( ++ ptr == lim ) return; do { char * sep ; for ( sep = ptr + 1 ; sep != lim && ! isblank ( to_uchar ( * sep ) ) ; sep ++ )
continue; extract_field ( line , ptr , sep - ptr ) ; if ( sep == lim ) return; for ( ptr = sep + 1 ; ptr != lim && isblank ( to_uchar ( * ptr ) ) ; ptr ++ ) continue; }
while ( ptr != lim ); } extract_field ( line , ptr , lim - ptr ) ; } static void freeline ( struct line * line ) { if ( line == NULL ) return; free ( line -> fields ) ; line -> fields = NULL ;
free ( line -> buf . buffer ) ; line -> buf . buffer = NULL ; } static int keycmp ( struct line const * line1 , struct line const * line2 , size_t jf_1 , size_t jf_2 ) { char * beg1 ; char * beg2 ;
size_t len1 ; size_t len2 ; int diff ; if ( jf_1 < line1 -> nfields ) { beg1 = line1 -> fields [ jf_1 ] . beg ; len1 = line1 -> fields [ jf_1 ] . len ; } else { beg1 = NULL ;
len1 = 0 ; } if ( jf_2 < line2 -> nfields ) { beg2 = line2 -> fields [ jf_2 ] . beg ; len2 = line2 -> fields [ jf_2 ] . len ; } else { beg2 = NULL ; len2 = 0 ; }
if ( len1 == 0 ) return len2 == 0 ? 0 : - 1 ; if ( len2 == 0 ) return 1 ; if ( ignore_case ) { diff = memcasecmp ( beg1 , beg2 , MIN ( len1 , len2 ) ) ; } else {
if ( hard_LC_COLLATE ) return xmemcoll ( beg1 , len1 , beg2 , len2 ) ; diff = memcmp ( beg1 , beg2 , MIN ( len1 , len2 ) ) ; } if ( diff ) return diff ;
return len1 < len2 ? - 1 : len1 != len2 ; } static void check_order ( const struct line * prev , const struct line * current , int whatfile ) { if ( check_input_order != CHECK_ORDER_DISABLED && ( ( check_input_order == CHECK_ORDER_ENABLED ) || seen_unpairable ) ) {
if ( ! issued_disorder_warning [ whatfile - 1 ] ) { size_t join_field = whatfile == 1 ? join_field_1 : join_field_2 ; if ( keycmp ( prev , current , join_field , join_field ) > 0 ) { size_t len = current -> buf . length ;
if ( 0 < len && current -> buf . buffer [ len - 1 ] == '\n' ) -- len ; len = MIN ( INT_MAX , len ) ; error ( ( check_input_order == CHECK_ORDER_ENABLED ? EXIT_FAILURE : 0 ) ,
0 , _ ( lr_7 PRIuMAX lr_8 ) , g_names [ whatfile - 1 ] , line_no [ whatfile - 1 ] , ( int ) len , current -> buf . buffer ) ; issued_disorder_warning [ whatfile - 1 ] = true ; } } } }
static inline void reset_line ( struct line * line ) { line -> nfields = 0 ; } static struct line * init_linep ( struct line * * linep ) { struct line * line = xcalloc ( 1 , sizeof *line ) ; * linep = line ;
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
for ( i = 0 ; i < ARRAY_CARDINALITY ( spareline ) ; i ++ ) { if ( spareline [ i ] ) { freeline ( spareline [ i ] ) ; free ( spareline [ i ] ) ; } } } static void
initseq ( struct seq * seq ) { seq -> count = 0 ; seq -> alloc = 0 ; seq -> lines = NULL ; } static bool getseq ( FILE * fp , struct seq * seq , int whichfile ) {
if ( seq -> count == seq -> alloc ) { size_t i ; seq -> lines = X2NREALLOC ( seq -> lines , & seq -> alloc ) ; for ( i = seq -> count ; i < seq -> alloc ; i ++ )
seq -> lines [ i ] = NULL ; } if ( get_line ( fp , & seq -> lines [ seq -> count ] , whichfile ) ) { ++ seq -> count ; return true ; } return false ; } static bool
advance_seq ( FILE * fp , struct seq * seq , bool first , int whichfile ) { if ( first ) seq -> count = 0 ; return getseq ( fp , seq , whichfile ) ; } static void delseq ( struct seq * seq ) {
size_t i ; for ( i = 0 ; i < seq -> alloc ; i ++ ) { freeline ( seq -> lines [ i ] ) ; free ( seq -> lines [ i ] ) ; } free ( seq -> lines ) ; } static void
prfield ( size_t n , struct line const * line ) { size_t len ; if ( n < line -> nfields ) { len = line -> fields [ n ] . len ; if ( len )
fwrite ( line -> fields [ n ] . beg , 1 , len , stdout ) ; else if ( empty_filler ) fputs ( empty_filler , stdout ) ; } else if ( empty_filler ) fputs ( empty_filler , stdout ) ; } static void
prfields ( struct line const * line , size_t join_field , size_t autocount ) { size_t i ; size_t nfields = autoformat ? autocount : line -> nfields ; char output_separator = tab < 0 ? ' ' : tab ;
for ( i = 0 ; i < join_field && i < nfields ; ++ i ) { putchar ( output_separator ) ; prfield ( i , line ) ; } for ( i = join_field + 1 ; i < nfields ; ++ i ) {
putchar ( output_separator ) ; prfield ( i , line ) ; } } static void prjoin ( struct line const * line1 , struct line const * line2 ) { const struct outlist * outlist ; char output_separator = tab < 0 ? ' ' : tab ;
size_t field ; struct line const * line ; outlist = outlist_head . next ; if ( outlist ) { const struct outlist * o ; o = outlist ; while ( 1 ) { if ( o -> file == 0 ) {
if ( line1 == & uni_blank ) { line = line2 ; field = join_field_2 ; } else { line = line1 ; field = join_field_1 ; } } else { line = ( o -> file == 1 ? line1 : line2 ) ;
field = o -> field ; } prfield ( field , line ) ; o = o -> next ; if ( o == NULL ) break; putchar ( output_separator ) ; } putchar ( eolchar ) ; } else { if ( line1 == & uni_blank ) {
line = line2 ; field = join_field_2 ; } else { line = line1 ; field = join_field_1 ; } prfield ( field , line ) ; prfields ( line1 , join_field_1 , autocount_1 ) ; prfields ( line2 , join_field_2 , autocount_2 ) ; putchar ( eolchar ) ;
} } static void join ( FILE * fp1 , FILE * fp2 ) { struct seq seq1 , seq2 ; int diff ; bool eof1 , eof2 ; fadvise ( fp1 , FADVISE_SEQUENTIAL ) ; fadvise ( fp2 , FADVISE_SEQUENTIAL ) ; initseq ( & seq1 ) ;
getseq ( fp1 , & seq1 , 1 ) ; initseq ( & seq2 ) ; getseq ( fp2 , & seq2 , 2 ) ; if ( autoformat ) { autocount_1 = seq1 . count ? seq1 . lines [ 0 ] -> nfields : 0 ;
autocount_2 = seq2 . count ? seq2 . lines [ 0 ] -> nfields : 0 ; } if ( join_header_lines && ( seq1 . count || seq2 . count ) ) {
struct line const * hline1 = seq1 . count ? seq1 . lines [ 0 ] : & uni_blank ; struct line const * hline2 = seq2 . count ? seq2 . lines [ 0 ] : & uni_blank ; prjoin ( hline1 , hline2 ) ;
prevline [ 0 ] = NULL ; prevline [ 1 ] = NULL ; if ( seq1 . count ) advance_seq ( fp1 , & seq1 , true , 1 ) ; if ( seq2 . count ) advance_seq ( fp2 , & seq2 , true , 2 ) ;
} while ( seq1 . count && seq2 . count ) { size_t i ; diff = keycmp ( seq1 . lines [ 0 ] , seq2 . lines [ 0 ] , join_field_1 , join_field_2 ) ; if ( diff < 0 ) { if ( print_unpairables_1 )
prjoin ( seq1 . lines [ 0 ] , & uni_blank ) ; advance_seq ( fp1 , & seq1 , true , 1 ) ; seen_unpairable = true ; continue; } if ( diff > 0 ) { if ( print_unpairables_2 )
prjoin ( & uni_blank , seq2 . lines [ 0 ] ) ; advance_seq ( fp2 , & seq2 , true , 2 ) ; seen_unpairable = true ; continue; } eof1 = false ; do
if ( ! advance_seq ( fp1 , & seq1 , false , 1 ) ) { eof1 = true ; ++ seq1 . count ; break; } while ( ! keycmp ( seq1 . lines [ seq1 . count - 1 ] , seq2 . lines [ 0 ] ,
join_field_1 , join_field_2 ) ); eof2 = false ; do if ( ! advance_seq ( fp2 , & seq2 , false , 2 ) ) { eof2 = true ; ++ seq2 . count ; break; }
while ( ! keycmp ( seq1 . lines [ 0 ] , seq2 . lines [ seq2 . count - 1 ] , join_field_1 , join_field_2 ) ); if ( print_pairables ) { for ( i = 0 ; i < seq1 . count - 1 ; ++ i )
{ size_t j ; for ( j = 0 ; j < seq2 . count - 1 ; ++ j ) prjoin ( seq1 . lines [ i ] , seq2 . lines [ j ] ) ; } } if ( ! eof1 ) {
SWAPLINES ( seq1 . lines [ 0 ] , seq1 . lines [ seq1 . count - 1 ] ) ; seq1 . count = 1 ; } else seq1 . count = 0 ; if ( ! eof2 ) {
SWAPLINES ( seq2 . lines [ 0 ] , seq2 . lines [ seq2 . count - 1 ] ) ; seq2 . count = 1 ; } else seq2 . count = 0 ; } struct line * line = NULL ; bool checktail = false ;
if ( check_input_order != CHECK_ORDER_DISABLED && ! ( issued_disorder_warning [ 0 ] && issued_disorder_warning [ 1 ] ) ) checktail = true ; if ( ( print_unpairables_1 || checktail ) && seq1 . count ) { if ( print_unpairables_1 )
prjoin ( seq1 . lines [ 0 ] , & uni_blank ) ; if ( seq2 . count ) seen_unpairable = true ; while ( get_line ( fp1 , & line , 1 ) ) { if ( print_unpairables_1 ) prjoin ( line , & uni_blank ) ;
if ( issued_disorder_warning [ 0 ] && ! print_unpairables_1 ) break; } } if ( ( print_unpairables_2 || checktail ) && seq2 . count ) { if ( print_unpairables_2 ) prjoin ( & uni_blank , seq2 . lines [ 0 ] ) ; if ( seq1 . count )
seen_unpairable = true ; while ( get_line ( fp2 , & line , 2 ) ) { if ( print_unpairables_2 ) prjoin ( & uni_blank , line ) ; if ( issued_disorder_warning [ 1 ] && ! print_unpairables_2 ) break; } } freeline ( line ) ;
free ( line ) ; delseq ( & seq1 ) ; delseq ( & seq2 ) ; } static void add_field ( int file , size_t field ) { struct outlist * o ; assert ( file == 0 || file == 1 || file == 2 ) ;
assert ( file != 0 || field == 0 ) ; o = xmalloc ( sizeof *o ) ; o -> file = file ; o -> field = field ; o -> next = NULL ; outlist_end -> next = o ; outlist_end = o ; } static size_t
string_to_join_field ( char const * str ) { size_t result ; unsigned long int val ; verify ( SIZE_MAX <= ULONG_MAX ) ; strtol_error s_err = xstrtoul ( str , NULL , 10 , & val , lr_10 ) ;
if ( s_err == LONGINT_OVERFLOW || ( s_err == LONGINT_OK && SIZE_MAX < val ) ) val = SIZE_MAX ; else if ( s_err != LONGINT_OK || val == 0 ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) , quote ( str ) ) ;
result = val - 1 ; return result ; } static void decode_field_spec ( const char * s , int * file_index , size_t * field_index ) { switch ( s [ 0 ] ) { case '0' : if ( s [ 1 ] ) {
error ( EXIT_FAILURE , 0 , _ ( lr_12 ) , quote ( s ) ) ; } * file_index = 0 ; * field_index = 0 ; break; case '1' : case '2' : if ( s [ 1 ] != '.' )
error ( EXIT_FAILURE , 0 , _ ( lr_12 ) , quote ( s ) ) ; * file_index = s [ 0 ] - '0' ; * field_index = string_to_join_field ( s + 2 ) ; break; default: error ( EXIT_FAILURE , 0 ,
_ ( lr_13 ) , quote ( s ) ) ; abort () ; break; } } static void add_field_list ( char * str ) { char * p = str ; do { int file_index ; size_t field_index ; char const * spec_item = p ;
p = strpbrk ( p , lr_14 ) ; if ( p ) * p ++ = '\0' ; decode_field_spec ( spec_item , & file_index , & field_index ) ; add_field ( file_index , field_index ) ; } while ( p ); } static void
set_join_field ( size_t * var , size_t val ) { if ( * var != SIZE_MAX && * var != val ) { unsigned long int var1 = * var + 1 ; unsigned long int val1 = val + 1 ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void add_file_name ( char * name , char * names [ 2 ] ,
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] && optarg == argv [ optind - 1 ] + 2 ) {
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
exit ( EXIT_FAILURE ) ; else exit ( EXIT_SUCCESS ) ; }
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[A!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[A!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PRIGHTDEC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PLEFTINC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
setlocale ( LC_ALL , lr_10 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PRIGHTINC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[P!PLEFTDEC$P$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_SUB$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_SUB$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[STMT!TRAPSTMT]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[STMT!TRAPSTMT]MSP[N] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[@!ABS$@$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[@!ABS$@$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[STMT!DELSTMT]MSP[N] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$-1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!CONSTVAL$0$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$-1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[C!ADD$C$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[STMT!TRAPSTMT]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[STMT!DELSTMT]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[@!ABS$@$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[@!ABS$@$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[C!CONSTVAL$0$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[C!ADD$C$1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[STMT!TRAPSTMT]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[STMT!DELSTMT]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[@!ABS$@$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[C!CONSTVAL$0$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[C!ADD$C$1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$V2$!ASSIGN$V2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[S] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } MST[STMT!TRAPSTMT]MSP[N] else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } MST[STMT!DELSTMT]MSP[N] else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , join_field_1 ) ; } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[STMT!TRAPSTMT]MSP[N] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[STMT!DELSTMT]MSP[S] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; MST[@!ABS$@$]MSP[N] } break;
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break; MST[STMT!TRAPSTMT]MSP[N]
bool is_j2 = ( optarg [ 0 ] == '2' ) ; joption_count [ is_j2 ] ++ ; optc_status = MIGHT_BE_J1_ARG + is_j2 ; } else { set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; set_join_field ( & join_field_2 , join_field_1 ) ; } break; MST[STMT!DELSTMT]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[STMT!TRAPSTMT]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[@!ABS$@$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[@!ABS$@$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[C!ADD$C$-1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[C!ADD$C$1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!TRAPSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!DELSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[C!CONSTVAL$0$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[C!ADD$C$1$]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!TRAPSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; MST[STMT!DELSTMT]MSP[N] else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; MST[STMT!TRAPSTMT]MSP[N] optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; MST[STMT!DELSTMT]MSP[N] optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[N] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[STMT!DELSTMT]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!CONSTVAL$0$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$-1$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$1$]MSP[S] } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; MST[STMT!TRAPSTMT]MSP[N] case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; MST[STMT!DELSTMT]MSP[N] case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[STMT!TRAPSTMT]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[STMT!DELSTMT]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[S] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( ! newtab )
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; MST[STMT!TRAPSTMT]MSP[N] print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[@!ABS$@$]MSP[S] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[C!ADD$C$-1$]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; MST[C!ADD$C$1$]MSP[N] if ( ! newtab )
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[STMT!TRAPSTMT]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; MST[STMT!DELSTMT]MSP[S] print_pairables = true ; seen_unpairable = false ;
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[@!ABS$@$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[C!ADD$C$-1$]MSP[N]
case 'o' : if ( STREQ ( optarg , lr_19 ) ) autoformat = true ; else { add_field_list ( optarg ) ; optc_status = MIGHT_BE_O_ARG ; } break; case 't' : { unsigned char newtab = optarg [ 0 ] ; if ( ! newtab ) MST[C!ADD$C$1$]MSP[N]
newtab = '\n' ; MST[STMT!TRAPSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[STMT!TRAPSTMT]MSP[N] seen_unpairable = false ;
newtab = '\n' ; MST[STMT!DELSTMT]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!CONSTVAL$0$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!ADD$C$-1$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[C!ADD$C$1$]MSP[N] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[STMT!TRAPSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; MST[STMT!DELSTMT]MSP[S] else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[@!ABS$@$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!CONSTVAL$0$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$-1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[C!ADD$C$1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[STMT!TRAPSTMT]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[@!ABS$@$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[@!ABS$@$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[C!ADD$C$-1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[C!ADD$C$1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!TRAPSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] seen_unpairable = false ;
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!DELSTMT]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[C!ADD$C$-1$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[C!ADD$C$1$]MSP[S] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!TRAPSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; MST[STMT!DELSTMT]MSP[N] else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[STMT!TRAPSTMT]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[STMT!DELSTMT]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote ( optarg ) ) ; }
newtab = '\n' ; else if ( optarg [ 1 ] ) { if ( STREQ ( optarg , lr_20 ) ) newtab = '\0' ; else error ( EXIT_FAILURE , 0 , _ ( lr_21 ) , quote ( optarg ) ) ; } MST[STMT!TRAPSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!ABS$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[LE$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!NEG$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[NEQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; MST[STMT!TRAPSTMT]MSP[N] tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[STMT!TRAPSTMT]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[STMT!DELSTMT]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[C!CONSTVAL$0$]MSP[N] seen_unpairable = false ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; MST[C!ADD$C$1$]MSP[N] seen_unpairable = false ;
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; MST[@!ABS$@$]MSP[S] } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[STMT!TRAPSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; MST[STMT!TRAPSTMT]MSP[N] case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; MST[STMT!DELSTMT]MSP[N] case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[STMT!TRAPSTMT]MSP[N] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[STMT!DELSTMT]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[STMT!DELSTMT]MSP[N]
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[C!ADD$C$-1$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; MST[C!ADD$C$1$]MSP[S] break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; MST[STMT!TRAPSTMT]MSP[N] case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; MST[STMT!DELSTMT]MSP[N] case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[STMT!TRAPSTMT]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[STMT!DELSTMT]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!CONSTVAL$0$]MSP[N] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!ADD$C$-1$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; MST[C!ADD$C$1$]MSP[S] break; case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; MST[STMT!TRAPSTMT]MSP[N] case CHECK_ORDER_OPTION :
if ( 0 <= tab && tab != newtab ) error ( EXIT_FAILURE , 0 , _ ( lr_22 ) ) ; tab = newtab ; } break; case 'z' : eolchar = 0 ; break; case NOCHECK_ORDER_OPTION : check_input_order = CHECK_ORDER_DISABLED ; break; MST[STMT!DELSTMT]MSP[S] case CHECK_ORDER_OPTION :
check_input_order = CHECK_ORDER_ENABLED ; MST[STMT!TRAPSTMT]MSP[N] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[STMT!DELSTMT]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[C!CONSTVAL$0$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; MST[C!ADD$C$1$]MSP[S] break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; MST[STMT!TRAPSTMT]MSP[N] case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; MST[STMT!DELSTMT]MSP[N] case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; MST[STMT!TRAPSTMT]MSP[N] case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; MST[STMT!DELSTMT]MSP[N] case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[STMT!TRAPSTMT]MSP[N] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[STMT!DELSTMT]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[C!CONSTVAL$0$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; MST[C!ADD$C$1$]MSP[S] break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[S] case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default:
check_input_order = CHECK_ORDER_ENABLED ; break; case 1 : add_file_name ( optarg , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ; break; case HEADER_LINE_OPTION : join_header_lines = true ; break; case_GETOPT_HELP_CHAR ; case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default:
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[STMT!TRAPSTMT]MSP[N] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[STMT!DELSTMT]MSP[S] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[S] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; MST[@!ABS$@$]MSP[N] } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } MST[STMT!TRAPSTMT]MSP[N] prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } MST[STMT!DELSTMT]MSP[N] prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[STMT!TRAPSTMT]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!MOD$@2$V1$]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[C!ADD$C$-1$]MSP[N]
setlocale ( LC_ALL , lr_10 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; hard_LC_COLLATE = hard_locale ( LC_COLLATE ) ; atexit ( close_stdout ) ; atexit ( free_spareline ) ; print_pairables = true ; seen_unpairable = false ; MST[C!ADD$C$1$]MSP[N]
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[S] while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[@!ABS$@$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!TRAPSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[A!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[A!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[@!ABS$@$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$-1$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[C!ADD$C$1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PRIGHTDEC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PLEFTINC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PRIGHTINC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[P!PLEFTDEC$P$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!ABS$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEG$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEG$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[CALL!SHUFFLEARGS$2$]MSP[S] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!TRAPSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
usage ( EXIT_FAILURE ) ; } prev_optc_status = optc_status ; } prev_optc_status = MUST_BE_OPERAND ; while ( optind < argc ) add_file_name ( argv [ optind ++ ] , g_names , operand_status , joption_count , MST[STMT!DELSTMT]MSP[N] & nfiles , & prev_optc_status , & optc_status ) ;
if ( nfiles != 2 ) MST[STMT!TRAPSTMT]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[@!ABS$@$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[@!ABS$@$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[C!ADD$C$-1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) MST[C!ADD$C$1$]MSP[N] { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[@!ABS$@$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[@!ABS$@$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[C!ADD$C$-1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$-1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[C!ADD$C$1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!TRAPSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ;
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[STMT!DELSTMT]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB$A1$@2$!OPERAND$A1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[C!ADD$C$1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[PSUB_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N]
if ( nfiles != 2 ) { if ( nfiles == 0 ) error ( 0 , 0 , _ ( lr_23 ) ) ; else error ( 0 , 0 , _ ( lr_24 ) , quote ( argv [ argc - 1 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$-1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$-1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEG$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEG$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!OPERAND$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!ABS$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!LE$@2$@1$]MSP[S] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[STMT!TRAPSTMT]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[@!ABS$@$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[C!ADD$C$-1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[C!ADD$C$1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[STMT!DELSTMT]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[STMT!TRAPSTMT]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[STMT!DELSTMT]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[@!ABS$@$]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; MST[@!ABS$@$]MSP[N] }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; } MST[STMT!TRAPSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; } MST[STMT!TRAPSTMT]MSP[N]
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$-1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; MST[C!ADD$C$1$]MSP[N] check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[@!ABS$@$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!CONSTVAL$0$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[C!ADD$C$1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[STMT!TRAPSTMT]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!TRAPSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
usage ( EXIT_FAILURE ) ; } for ( i = 0 ; i < 2 ; i ++ ) MST[STMT!DELSTMT]MSP[N] if ( joption_count [ i ] != 0 ) { set_join_field ( & join_field_1 , i ) ; set_join_field ( & join_field_2 , i ) ; }
if ( join_field_1 == SIZE_MAX ) MST[STMT!TRAPSTMT]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[C!CONSTVAL$0$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[C!ADD$C$-1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!DELSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[C!ADD$C$-1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[C!ADD$C$1$]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; MST[STMT!TRAPSTMT]MSP[N] if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[STMT!TRAPSTMT]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[@!ABS$@$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[C!CONSTVAL$0$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[C!ADD$C$-1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[ASSIGN$V1$@2$!LE$V1$@2$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!TRAPSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!DELSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[C!ADD$C$-1$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[C!ADD$C$1$]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; MST[STMT!TRAPSTMT]MSP[N] fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[C!ADD$C$-1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[C!ADD$C$1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[C!ADD$C$-1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; MST[C!ADD$C$1$]MSP[N] while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp1 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[STMT!TRAPSTMT]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp1 )
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 ) MST[STMT!TRAPSTMT]MSP[N]
if ( join_field_1 == SIZE_MAX ) join_field_1 = 0 ; if ( join_field_2 == SIZE_MAX ) join_field_2 = 0 ; fp1 = STREQ ( g_names [ 0 ] , lr_25 ) ? stdin : fopen ( g_names [ 0 ] , lr_26 ) ; if ( ! fp1 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[@!ABS$@$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!ABS$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[@!ABS$@$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[C!ADD$C$-1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[C!ADD$C$1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!NEG$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! fp2 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; MST[STMT!DELSTMT]MSP[N] if ( ! fp2 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; fp2 = STREQ ( g_names [ 1 ] , lr_25 ) ? stdin : fopen ( g_names [ 1 ] , lr_26 ) ; if ( ! fp2 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!DELSTMT]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[@!ABS$@$]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!TRAPSTMT]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!DELSTMT]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[@!ABS$@$]MSP[N] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; MST[STMT!TRAPSTMT]MSP[N] join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[STMT!DELSTMT]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp1 ) != 0 )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[C!ADD$C$-1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( fp1 == fp2 ) error ( EXIT_FAILURE , errno , _ ( lr_28 ) ) ; join ( fp1 , fp2 ) ; if ( fclose ( fp1 ) != 0 ) MST[C!ADD$C$1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[@!ABS$@$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!DELSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[@!ABS$@$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!NEG$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!OPERAND$@2$]MSP[S]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[STMT!TRAPSTMT]MSP[N]
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
error ( EXIT_FAILURE , errno , lr_27 , g_names [ 0 ] ) ; if ( fclose ( fp2 ) != 0 ) error ( EXIT_FAILURE , errno , lr_27 , g_names [ 1 ] ) ; if ( issued_disorder_warning [ 0 ] || issued_disorder_warning [ 1 ] ) MST[@!ABS$@$]MSP[N]
exit ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] else exit ( EXIT_SUCCESS ) ; }
exit ( EXIT_FAILURE ) ; else exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[N] }
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[STMT!TRAPSTMT]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[STMT!DELSTMT]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; MST[@!ABS$@$]MSP[N] if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[STMT!TRAPSTMT]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[@!ABS$@$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[@!ABS$@$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!CONSTVAL$0$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!ADD$C$-1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[C!ADD$C$1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ;
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[STMT!TRAPSTMT]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[@!ABS$@$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[@!ABS$@$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$-1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$-1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[C!ADD$C$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!BITNOT$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GT$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GE$@2$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!ABS$@1$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!LT$@2$@1$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!GE$@1$@2$]MSP[N]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S]
int operand_status [ 2 ] , int joption_count [ 2 ] , int * nfiles , int * prev_optc_status , int * optc_status ) { int n = * nfiles ; if ( n == 2 ) { bool op0 = ( operand_status [ 0 ] == MUST_BE_OPERAND ) ; MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N]
char * arg = names [ op0 ] ; MST[STMT!TRAPSTMT]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[STMT!DELSTMT]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[A!CONSTVAL$0$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[A!CONSTVAL$0$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PRIGHTDEC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PLEFTINC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; MST[P!PRIGHTINC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; MST[P!PLEFTDEC$P$]MSP[N] switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[STMT!TRAPSTMT]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[@!ABS$@$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[@!ABS$@$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[S] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] usage ( EXIT_FAILURE ) ; case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] case MIGHT_BE_J1_ARG :
char * arg = names [ op0 ] ; switch ( operand_status [ op0 ] ) { case MUST_BE_OPERAND : error ( 0 , 0 , _ ( lr_16 ) , quote ( name ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] case MIGHT_BE_J1_ARG :
joption_count [ 0 ] -- ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; MST[@!ABS$@$]MSP[N] break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[STMT!TRAPSTMT]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[@!ABS$@$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!ADD$C$1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[C!ADD$C$-1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; MST[@!ABS$@$]MSP[N] break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; MST[STMT!TRAPSTMT]MSP[N] break; }
joption_count [ 0 ] -- ; set_join_field ( & join_field_1 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_J2_ARG : joption_count [ 1 ] -- ; set_join_field ( & join_field_2 , string_to_join_field ( arg ) ) ; break; case MIGHT_BE_O_ARG : add_field_list ( arg ) ; break; MST[STMT!TRAPSTMT]MSP[N] }
if ( ! op0 ) MST[STMT!TRAPSTMT]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) MST[@!ABS$@$]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) MST[@!ABS$@$]MSP[N] { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[STMT!TRAPSTMT]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[STMT!DELSTMT]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[@!ABS$@$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!CONSTVAL$0$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$-1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[C!ADD$C$1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[STMT!TRAPSTMT]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[STMT!DELSTMT]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[A!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!CONSTVAL$0$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$-1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[C!ADD$C$1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PRIGHTINC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; MST[P!PLEFTDEC$P$]MSP[N] } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[STMT!TRAPSTMT]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[A!CONSTVAL$0$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[C!CONSTVAL$0$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; MST[C!ADD$C$1$]MSP[N] } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[STMT!TRAPSTMT]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[STMT!DELSTMT]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[@!ABS$@$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[@!ABS$@$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] names [ n ] = name ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[C!ADD$C$-1$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[S] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] names [ n ] = name ;
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[STMT!DELSTMT]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[A!CONSTVAL$0$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[A!CONSTVAL$0$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PRIGHTDEC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[@!ABS$@$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[@!ABS$@$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PRIGHTDEC$P$]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PLEFTINC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PLEFTINC$P$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PRIGHTINC$P$]MSP[N]
if ( ! op0 ) { operand_status [ 0 ] = operand_status [ 1 ] ; names [ 0 ] = names [ 1 ] ; } n = 1 ; } operand_status [ n ] = * prev_optc_status ; names [ n ] = name ; MST[P!PLEFTDEC$P$]MSP[N]
* nfiles = n + 1 ; MST[STMT!TRAPSTMT]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[STMT!DELSTMT]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PRIGHTINC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , MST[P!PLEFTDEC$P$]MSP[N] longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[STMT!TRAPSTMT]MSP[N] switch ( optc ) {
* nfiles = n + 1 ; MST[@!ABS$@$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[@!ABS$@$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[C!CONSTVAL$0$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[C!ADD$C$1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N] switch ( optc ) {
* nfiles = n + 1 ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[STMT!TRAPSTMT]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[@!ABS$@$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[@!ABS$@$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!CONSTVAL$0$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!ADD$C$-1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[C!ADD$C$1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[S] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!CONSTVAL$0$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$-1$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[C!ADD$C$1$]MSP[N] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; MST[STMT!TRAPSTMT]MSP[S] } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; int operand_status [ 2 ] ;
error ( EXIT_FAILURE , 0 , _ ( lr_15 ) , var1 , val1 ) ; } * var = val ; } static void MST[STMT!TRAPSTMT]MSP[N] add_file_name ( char * name , char * names [ 2 ] ,
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[STMT!DELSTMT]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[A!CONSTVAL$0$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PRIGHTDEC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PLEFTINC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PRIGHTINC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; MST[P!PLEFTDEC$P$]MSP[N] if ( line == prevline [ which - 1 ] ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[S] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] switch ( optc ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[N] switch ( optc ) {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[PSUB$A1$@2$!PADD$A1$@2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[A!CONSTVAL$0$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] {
return line ; } static bool get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) MST[C!ADD$C$1$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[A!CONSTVAL$0$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[C!ADD$C$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[S] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[@!ABS$@$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[C!ADD$C$1$]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; MST[STMT!TRAPSTMT]MSP[N] * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[STMT!DELSTMT]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PRIGHTDEC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PLEFTINC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PRIGHTINC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; MST[P!PLEFTDEC$P$]MSP[N] } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
return line ; } static bool MST[STMT!TRAPSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) MST[STMT!TRAPSTMT]MSP[N] reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) MST[@!ABS$@$]MSP[N] reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!TRAPSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!DELSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!TRAPSTMT]MSP[N] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; MST[STMT!DELSTMT]MSP[S] else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[STMT!DELSTMT]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[A!CONSTVAL$0$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PLEFTINC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) )
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[STMT!TRAPSTMT]MSP[N]
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[@!ABS$@$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[@!ABS$@$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[C!ADD$C$-1$]MSP[N]
SWAPLINES ( line , spareline [ which - 1 ] ) ; * linep = line ; } if ( line ) reset_line ( line ) ; else line = init_linep ( linep ) ; if ( ! readlinebuffer_delim ( & line -> buf , fp , eolchar ) ) MST[C!ADD$C$1$]MSP[N]
{ if ( ferror ( fp ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!DELSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[@!ABS$@$]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[N] freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; MST[STMT!TRAPSTMT]MSP[N] return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; MST[STMT!DELSTMT]MSP[N] return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!DELSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[C!ADD$C$-1$]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!TRAPSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; MST[STMT!DELSTMT]MSP[N] } ++ line_no [ which - 1 ] ; xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DELSTMT]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[@!ABS$@$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!ADD$C$1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!CONSTVAL$0$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[C!ADD$C$1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] xfields ( line ) ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] xfields ( line ) ;
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ; MST[STMT!TRAPSTMT]MSP[N]
{ if ( ferror ( fp ) ) error ( EXIT_FAILURE , errno , _ ( lr_9 ) ) ; freeline ( line ) ; return false ; } ++ line_no [ which - 1 ] ; xfields ( line ) ; MST[STMT!DELSTMT]MSP[N]
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!OPERAND$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!TRAPSTMT]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!NEG$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!ABS$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LE$@2$@1$]MSP[S] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!PADD$A1$@2$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[PSUB$A1$@2$!OPERAND$A1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[A!CONSTVAL$0$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[@!ABS$@$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) MST[C!ADD$C$1$]MSP[N] check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DELSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[A!CONSTVAL$0$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[@!ABS$@$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[C!ADD$C$1$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; MST[STMT!TRAPSTMT]MSP[N] prevline [ which - 1 ] = line ; return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEG$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DELSTMT]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!TRAPSTMT]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!NEG$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!ABS$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[SUB$V1$@2$!ASSIGN$V1$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[PSUB$A1$@2$!OPERAND$@2$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[@!ABS$@$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; MST[C!ADD$C$1$]MSP[N] return true ; } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!DELSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[C!CONSTVAL$0$]MSP[N] } static void free_spareline ( void ) { size_t i ;
if ( prevline [ which - 1 ] ) check_order ( prevline [ which - 1 ] , line , which ) ; prevline [ which - 1 ] = line ; return true ; MST[STMT!TRAPSTMT]MSP[N] } static void free_spareline ( void ) { size_t i ;
return line ; } static bool MST[STMT!TRAPSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
return line ; } static bool MST[STMT!DELSTMT]MSP[N] get_line ( FILE * fp , struct line * * linep , int which ) { struct line * line = * linep ; if ( line == prevline [ which - 1 ] ) {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[S] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] {
issued_disorder_warning [ 0 ] = issued_disorder_warning [ 1 ] = false ; check_input_order = CHECK_ORDER_DEFAULT ; while ( ( optc = getopt_long ( argc , argv , lr_17 , longopts , NULL ) ) != - 1 ) { optc_status = MUST_BE_OPERAND ; switch ( optc ) MST[@!ABS$@$]MSP[N] {
case 'v' : print_pairables = false ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[C!ADD$C$-1$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[C!ADD$C$1$]MSP[S] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; MST[STMT!TRAPSTMT]MSP[N] case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$-1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[CALL!SHUFFLEARGS$2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[ASSIGN$V1$@2$!NEQ$V1$@2$]MSP[N] int operand_status [ 2 ] ;
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!NEG$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!CONSTVAL$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OPERAND$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OPERAND$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[AND$@1$@2$!OR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[STMT!TRAPSTMT]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ABS$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!NEG$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!OPERAND$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITOR$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GT$@1$@2$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@2$@1$]MSP[S] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[NEQ$@1$@2$!BITSHR$@2$@1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[@!ABS$@$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$-1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK MST[C!ADD$C$1$]MSP[N] || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 ,
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
case 'v' : print_pairables = false ; case 'a' : { unsigned long int val ; if ( xstrtoul ( optarg , NULL , 10 , & val , lr_10 ) != LONGINT_OK || ( val != 1 && val != 2 ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[STMT!TRAPSTMT]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[@!ABS$@$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[@!ABS$@$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[C!CONSTVAL$0$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[C!ADD$C$1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$-1$]MSP[N] int operand_status [ 2 ] ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
* nfiles = n + 1 ; if ( * prev_optc_status == MIGHT_BE_O_ARG ) * optc_status = MIGHT_BE_O_ARG ; } int main ( int argc , char * * argv ) { int optc_status ; int prev_optc_status = MUST_BE_OPERAND ; MST[C!ADD$C$1$]MSP[N] int operand_status [ 2 ] ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[STMT!TRAPSTMT]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!TRAPSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!DELSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[ASSIGN$V1$@2$!LE$@2$V1$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[STMT!DELSTMT]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!CONSTVAL$0$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[C!CONSTVAL$0$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[C!ADD$C$1$]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!TRAPSTMT]MSP[N] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; MST[STMT!DELSTMT]MSP[S] else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[STMT!TRAPSTMT]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[STMT!DELSTMT]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$-1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$-1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
int joption_count [ 2 ] = { 0 , 0 } ; MST[C!ADD$C$1$]MSP[N] FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[C!CONSTVAL$0$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; MST[C!ADD$C$1$]MSP[N] } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; MST[STMT!TRAPSTMT]MSP[N] case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; MST[STMT!DELSTMT]MSP[N] case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[STMT!TRAPSTMT]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!ABS$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) MST[CALL!SHUFFLEARGS$2$]MSP[N] error ( EXIT_FAILURE , 0 ,
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N]
_ ( lr_11 ) , quote ( optarg ) ) ; if ( val == 1 ) print_unpairables_1 = true ; else print_unpairables_2 = true ; } break; case 'e' : if ( empty_filler && ! STREQ ( empty_filler , optarg ) ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_18 ) ) ; empty_filler = optarg ; MST[STMT!TRAPSTMT]MSP[N] break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; MST[STMT!DELSTMT]MSP[N] break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; MST[STMT!TRAPSTMT]MSP[N] case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; MST[STMT!DELSTMT]MSP[N] case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[STMT!TRAPSTMT]MSP[S] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[STMT!DELSTMT]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[C!CONSTVAL$0$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; MST[C!ADD$C$1$]MSP[N] break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; MST[STMT!TRAPSTMT]MSP[S] case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; MST[STMT!DELSTMT]MSP[S] case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N] case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; MST[STMT!DELSTMT]MSP[N] case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[STMT!TRAPSTMT]MSP[N] break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[STMT!DELSTMT]MSP[N] break;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; MST[@!ABS$@$]MSP[N] break;
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break; MST[STMT!TRAPSTMT]MSP[N]
_ ( lr_18 ) ) ; empty_filler = optarg ; break; case 'i' : ignore_case = true ; break; case '1' : set_join_field ( & join_field_1 , string_to_join_field ( optarg ) ) ; break; case '2' : set_join_field ( & join_field_2 , string_to_join_field ( optarg ) ) ; break; MST[STMT!DELSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!AND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!DIV$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$@1$@2$!GE$@1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[C!ADD$C$-1$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[STMT!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[S] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; MST[C!ADD$C$1$]MSP[N] int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[@!ABS$@$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$-1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[C!ADD$C$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!OPERAND$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITNOT$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!CONSTVAL$1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!CONSTVAL$0$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITAND$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEG$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITXOR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!ADD$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHL$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!EQ$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHL$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!TRAPSTMT]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!NEG$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!ABS$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!MOD$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N]
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITNOT$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!DIV$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!BITSHR$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!GT$@2$@1$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
case 'j' : if ( ( optarg [ 0 ] == '1' || optarg [ 0 ] == '2' ) && ! optarg [ 1 ] MST[SUB$@1$@2$!LE$@1$@2$]MSP[N] && optarg == argv [ optind - 1 ] + 2 ) {
int joption_count [ 2 ] = { 0 , 0 } ; FILE * fp1 , * fp2 ; int optc ; int nfiles = 0 ; int i ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[S] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!TRAPSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!DELSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[A!CONSTVAL$0$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[@!ABS$@$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[S] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] if ( argc < optind + 2 ) { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[STMT!TRAPSTMT]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[@!ABS$@$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[@!ABS$@$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[@!ABS$@$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[@!ABS$@$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[C!CONSTVAL$0$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[C!ADD$C$-1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[C!ADD$C$1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] { if ( argc < optind + 1 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!NEG$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] { if ( argc < optind + 1 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!NEG$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { if ( argc < optind + 1 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!ABS$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] { if ( argc < optind + 1 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { if ( argc < optind + 1 )
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[STMT!TRAPSTMT]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[C!CONSTVAL$0$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[C!ADD$C$1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!NEG$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!ABS$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[S]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( argc < optind + 2 ) { if ( argc < optind + 1 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; MST[STMT!TRAPSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; MST[STMT!DELSTMT]MSP[N] else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } if ( optind + 2 < argc ) {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[STMT!TRAPSTMT]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[@!ABS$@$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[@!ABS$@$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[@!ABS$@$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[@!ABS$@$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[C!CONSTVAL$0$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[C!ADD$C$-1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[C!ADD$C$1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[S] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[S] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] {
error ( 0 , 0 , _ ( lr_4 ) ) ; else error ( 0 , 0 , _ ( lr_5 ) , quote ( argv [ optind ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( optind + 2 < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] {
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[STMT!DELSTMT]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!ADD$C$-1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[C!ADD$C$1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[S] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[S] else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!OPERAND$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!ABS$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MUL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEG$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEG$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; MST[STMT!DELSTMT]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!CONSTVAL$1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; MST[@!ABS$@$]MSP[N] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 )
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , MST[STMT!TRAPSTMT]MSP[N] stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , MST[STMT!DELSTMT]MSP[S] stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[A!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[A!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[A!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[A!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[@!ABS$@$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[C!CONSTVAL$0$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[C!ADD$C$1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[C!ADD$C$-1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[C!ADD$C$1$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PRIGHTDEC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PLEFTINC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PRIGHTINC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PLEFTDEC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PRIGHTDEC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PLEFTINC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PRIGHTINC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[P!PLEFTDEC$P$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!OPERAND$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!ABS$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!NEG$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!NEG$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N]
error ( 0 , 0 , _ ( lr_6 ) , quote ( argv [ optind + 2 ] ) ) ; usage ( EXIT_FAILURE ) ; } if ( link ( argv [ optind ] , argv [ optind + 1 ] ) != 0 ) MST[CALL!SHUFFLEARGS$2$]MSP[N]
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[STMT!TRAPSTMT]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[STMT!DELSTMT]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] } exit ( status ) ; } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[A!CONSTVAL$0$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[A!CONSTVAL$0$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[A!CONSTVAL$0$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[A!CONSTVAL$0$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[@!ABS$@$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[C!CONSTVAL$0$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[C!ADD$C$1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) { initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PRIGHTDEC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PLEFTINC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PRIGHTINC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PLEFTDEC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PRIGHTDEC$P$]MSP[S] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PLEFTINC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PRIGHTINC$P$]MSP[S] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[P!PLEFTDEC$P$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!OPERAND$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!ABS$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!NEG$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!NEG$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[CALL!SHUFFLEARGS$2$]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , MST[STMT!TRAPSTMT]MSP[N] quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[S] }
error ( EXIT_FAILURE , errno , _ ( lr_7 ) , quote_n ( 0 , argv [ optind + 1 ] ) , quote_n ( 1 , argv [ optind ] ) ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[S] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N]
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N] parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!TRAPSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[STMT!DELSTMT]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[A!CONSTVAL$0$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[@!ABS$@$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PRIGHTINC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[P!PLEFTDEC$P$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[N] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
setlocale ( LC_ALL , lr_3 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; parse_long_options ( argc , argv , PROGRAM_NAME , PACKAGE_NAME , Version , MST[CALL!SHUFFLEARGS$2$]MSP[S] usage , AUTHORS , ( char const * ) NULL ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[@!ABS$@$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEG$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEG$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ABS$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!ABS$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!OPERAND$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GE$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!LE$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!BITNOT$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[S]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N]
if ( getopt_long ( argc , argv , lr_3 , NULL , NULL ) != - 1 ) usage ( EXIT_FAILURE ) ; if ( optind < argc ) { error ( 0 , 0 , _ ( lr_4 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; MST[STMT!TRAPSTMT]MSP[S] if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; MST[STMT!DELSTMT]MSP[S] if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) MST[STMT!TRAPSTMT]MSP[S] { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) MST[@!ABS$@$]MSP[N] { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; MST[STMT!TRAPSTMT]MSP[N] exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; MST[STMT!DELSTMT]MSP[N] exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!TRAPSTMT]MSP[N] } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; MST[STMT!DELSTMT]MSP[N] } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!TRAPSTMT]MSP[S] exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; MST[STMT!DELSTMT]MSP[S] exit ( EXIT_FAILURE ) ; }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] }
usage ( EXIT_FAILURE ) ; } cp = getlogin () ; if ( cp ) { puts ( cp ) ; exit ( EXIT_SUCCESS ) ; } error ( 0 , 0 , _ ( lr_5 ) ) ; exit ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[S] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!DELSTMT]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[@!ABS$@$]MSP[N] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S]
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] emit_ancillary_info () ; } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] } exit ( status ) ; } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[N] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[N] } int main ( int argc , char * * argv ) { char * cp ; initialize_main ( & argc , & argv ) ; set_program_name ( argv [ 0 ] ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit ( exit_status ) ; }
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITXOR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITOR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEG$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!EQ$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@1$@2$]MSP[S] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!NEQ$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITNOT$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHL$@2$@1$]MSP[S] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!DIV$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[N] {
exit ( exit_status ) ; MST[STMT!TRAPSTMT]MSP[N] }
exit ( exit_status ) ; MST[STMT!DELSTMT]MSP[N] }
exit ( exit_status ) ; MST[@!ABS$@$]MSP[N] }
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; MST[STMT!DELSTMT]MSP[N] int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; MST[STMT!TRAPSTMT]MSP[N] int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; MST[C!ADD$C$-1$]MSP[S] int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; MST[C!ADD$C$1$]MSP[S] int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; MST[STMT!TRAPSTMT]MSP[N] bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; MST[STMT!DELSTMT]MSP[N] bool set_security_context = false ; initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; MST[STMT!TRAPSTMT]MSP[N] initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; MST[C!ADD$C$-1$]MSP[N] initialize_main ( & argc , & argv ) ;
main ( int argc , char * * argv ) { mode_t newmode ; char const * specified_mode = NULL ; int exit_status = EXIT_SUCCESS ; int optc ; security_context_t scontext = NULL ; bool set_security_context = false ; MST[C!ADD$C$1$]MSP[N] initialize_main ( & argc , & argv ) ;
set_program_name ( argv [ 0 ] ) ; MST[STMT!TRAPSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[STMT!DELSTMT]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[A!CONSTVAL$0$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$-1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[C!ADD$C$1$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PRIGHTINC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; MST[P!PLEFTDEC$P$]MSP[N] setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!TRAPSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; MST[STMT!DELSTMT]MSP[N] bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ;
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!TRAPSTMT]MSP[N]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[STMT!DELSTMT]MSP[N]
set_program_name ( argv [ 0 ] ) ; setlocale ( LC_ALL , lr_5 ) ; bindtextdomain ( PACKAGE , LOCALEDIR ) ; textdomain ( PACKAGE ) ; atexit ( close_stdout ) ; MST[@!ABS$@$]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[STMT!TRAPSTMT]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!NEG$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!OPERAND$V1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[A!CONSTVAL$0$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[@!ABS$@$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[C!ADD$C$-1$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTDEC$P$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTINC$P$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[P!PRIGHTINC$P$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) MST[P!PLEFTDEC$P$]MSP[N] { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[STMT!TRAPSTMT]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!SHUFFLECASESDESTS$2$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[SWITCH!REMOVECASES$1$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) MST[@!ABS$@$]MSP[N] { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; MST[STMT!TRAPSTMT]MSP[N] break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; MST[STMT!DELSTMT]MSP[N] break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; MST[STMT!TRAPSTMT]MSP[N] case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; MST[STMT!DELSTMT]MSP[N] case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) MST[STMT!TRAPSTMT]MSP[N] { scontext = optarg ; }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; MST[STMT!TRAPSTMT]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; MST[STMT!DELSTMT]MSP[N] }
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } MST[STMT!TRAPSTMT]MSP[N]
while ( ( optc = getopt_long ( argc , argv , lr_6 , longopts , NULL ) ) != - 1 ) { switch ( optc ) { case 'm' : specified_mode = optarg ; break; case 'Z' : if ( is_smack_enabled () ) { scontext = optarg ; } MST[STMT!DELSTMT]MSP[N]
else if ( is_selinux_enabled () > 0 ) MST[STMT!TRAPSTMT]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[@!ABS$@$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) MST[@!ABS$@$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[C!ADD$C$-1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[C!ADD$C$1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!MOD$@2$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!BITXOR$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!LE$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!NEG$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!BITNOT$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!ABS$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!LE$@2$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!BITNOT$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!GE$@2$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!EQ$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!GE$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!MOD$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!LT$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!LT$@2$@1$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) MST[GT$@1$@2$!DIV$@1$@2$]MSP[N] { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) MST[STMT!TRAPSTMT]MSP[N] scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; MST[STMT!TRAPSTMT]MSP[N] else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; MST[STMT!DELSTMT]MSP[N] else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; MST[STMT!TRAPSTMT]MSP[N] else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; MST[STMT!DELSTMT]MSP[N] else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; MST[STMT!TRAPSTMT]MSP[N] } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; MST[STMT!DELSTMT]MSP[N] } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; MST[ASSIGN$V1$@2$!GE$@2$V1$]MSP[N] } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; MST[C!CONSTVAL$0$]MSP[N] } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; MST[C!ADD$C$1$]MSP[N] } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } MST[STMT!TRAPSTMT]MSP[N] else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } MST[STMT!DELSTMT]MSP[N] else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , MST[STMT!TRAPSTMT]MSP[S] _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , MST[STMT!DELSTMT]MSP[S] _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } MST[STMT!TRAPSTMT]MSP[S] break; case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; MST[STMT!TRAPSTMT]MSP[N] case_GETOPT_HELP_CHAR ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[S] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; MST[STMT!DELSTMT]MSP[N] case_GETOPT_HELP_CHAR ;
else if ( is_selinux_enabled () > 0 ) { if ( optarg ) scontext = optarg ; else set_security_context = true ; } else if ( optarg ) { error ( 0 , 0 , _ ( lr_7 lr_8 ) ) ; } break; case_GETOPT_HELP_CHAR ; MST[STMT!TRAPSTMT]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!TRAPSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; MST[STMT!DELSTMT]MSP[N] default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[N] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[N] } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!TRAPSTMT]MSP[N] if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } MST[STMT!DELSTMT]MSP[N] if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[@!ABS$@$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$V2$!ASSIGN$V2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHL$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!BITSHR$@1$@2$]MSP[S] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; MST[STMT!DELSTMT]MSP[S] usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!TRAPSTMT]MSP[S] } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; MST[STMT!DELSTMT]MSP[S] } if ( scontext ) { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) MST[STMT!TRAPSTMT]MSP[N] { int ret = 0 ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) MST[@!ABS$@$]MSP[N] { int ret = 0 ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[STMT!TRAPSTMT]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[C!ADD$C$-1$]MSP[N]
case_GETOPT_VERSION_CHAR ( PROGRAM_NAME , AUTHORS ) ; default: usage ( EXIT_FAILURE ) ; } } if ( optind == argc ) { error ( 0 , 0 , _ ( lr_9 ) ) ; usage ( EXIT_FAILURE ) ; } if ( scontext ) { int ret = 0 ; MST[C!ADD$C$1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) MST[STMT!TRAPSTMT]MSP[N] ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[STMT!DELSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[ASSIGN$V1$@2$!ABS$@2$]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[@!ABS$@$]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; MST[STMT!DELSTMT]MSP[N] else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[@!ABS$@$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[STMT!DELSTMT]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$-1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) MST[C!ADD$C$1$]MSP[N] emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; MST[@!ABS$@$]MSP[N] if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!DELSTMT]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[@!ABS$@$]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!TRAPSTMT]MSP[N] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } MST[STMT!TRAPSTMT]MSP[N] newmode = MODE_RW_UGO ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ; MST[STMT!TRAPSTMT]MSP[N]
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ; MST[ASSIGN$V1$@2$!ABS$V1$]MSP[N]
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; MST[STMT!DELSTMT]MSP[S] else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ; MST[C!CONSTVAL$0$]MSP[N]
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ; MST[C!ADD$C$-1$]MSP[N]
if ( is_smack_enabled () ) ret = smack_set_label_for_self ( scontext ) ; else ret = setfscreatecon ( scontext ) ; if ( ret < 0 ) error ( EXIT_FAILURE , errno , _ ( lr_10 ) , quote ( scontext ) ) ; } newmode = MODE_RW_UGO ; MST[C!ADD$C$1$]MSP[N]
if ( specified_mode ) MST[STMT!TRAPSTMT]MSP[N] { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[STMT!DELSTMT]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
if ( specified_mode ) MST[@!ABS$@$]MSP[N] { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; MST[STMT!TRAPSTMT]MSP[N] if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; MST[STMT!DELSTMT]MSP[N] if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; MST[STMT!TRAPSTMT]MSP[S] umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; MST[STMT!DELSTMT]MSP[S] umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; MST[STMT!TRAPSTMT]MSP[N] umask_value = umask ( 0 ) ; umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; MST[STMT!TRAPSTMT]MSP[N] umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; MST[STMT!DELSTMT]MSP[N] umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; MST[ASSIGN$V1$@2$!LT$V1$@2$]MSP[N] umask ( umask_value ) ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; MST[CALL!SHUFFLEARGS$2$]MSP[S] fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] emit_mandatory_arg_note () ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; MST[@!ABS$@$]MSP[N] umask ( umask_value ) ;
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[STMT!DELSTMT]MSP[N]
if ( specified_mode ) { mode_t umask_value ; struct mode_change * change = mode_compile ( specified_mode ) ; if ( ! change ) error ( EXIT_FAILURE , 0 , _ ( lr_11 ) ) ; umask_value = umask ( 0 ) ; umask ( umask_value ) ; MST[@!ABS$@$]MSP[N]
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[STMT!TRAPSTMT]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[STMT!DELSTMT]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[ASSIGN$V1$@2$!BITOR$V1$@2$]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; MST[@!ABS$@$]MSP[N] emit_mandatory_arg_note () ;
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ; MST[STMT!TRAPSTMT]MSP[N]
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[@!ABS$@$]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[@!ABS$@$]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[@!ABS$@$]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; MST[STMT!TRAPSTMT]MSP[N] if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; MST[STMT!DELSTMT]MSP[N] if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
void usage ( int status ) { if ( status != EXIT_SUCCESS ) emit_try_help () ; else { printf ( _ ( lr_1 ) , program_name ) ; fputs ( _ ( lr_2 ) , stdout ) ; emit_mandatory_arg_note () ; MST[STMT!DELSTMT]MSP[S]
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
fputs ( _ ( lr_3 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!BITNOT$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!NEG$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!OPERAND$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!ABS$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[@!ABS$@$]MSP[S] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[C!ADD$C$-1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[C!ADD$C$1$]MSP[S] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) MST[C!ADD$C$1$]MSP[N] error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , MST[STMT!DELSTMT]MSP[N] _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , MST[CALL!SHUFFLEARGS$2$]MSP[N] _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , MST[STMT!TRAPSTMT]MSP[N] _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } MST[STMT!TRAPSTMT]MSP[N] for (; optind < argc ; ++ optind ) {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[STMT!TRAPSTMT]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$V2$!ASSIGN$V2$@1$]MSP[N] {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITXOR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITOR$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEG$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!NEQ$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHL$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!EQ$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ADD$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MUL$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITAND$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@1$]MSP[N] {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!TRAPSTMT]MSP[N] emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!ABS$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!OPERAND$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!MOD$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!CONSTVAL$0$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!SUB$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!LE$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!DIV$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GE$@1$@2$]MSP[N] {
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; MST[STMT!DELSTMT]MSP[S] emit_ancillary_info () ; } exit ( status ) ; } int
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITSHR$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!BITNOT$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[LT$@1$@2$!GT$@1$@2$]MSP[N] {
if ( set_security_context ) MST[STMT!TRAPSTMT]MSP[N] defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) MST[@!ABS$@$]MSP[N] defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) MST[@!ABS$@$]MSP[N] defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[STMT!TRAPSTMT]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[STMT!DELSTMT]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[A!CONSTVAL$0$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[A!CONSTVAL$0$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[@!ABS$@$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[@!ABS$@$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!TRAPSTMT]MSP[N] } exit ( status ) ; } int
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[P!PRIGHTDEC$P$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[P!PLEFTINC$P$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[P!PRIGHTINC$P$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; MST[STMT!DELSTMT]MSP[S] } exit ( status ) ; } int
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[P!PLEFTDEC$P$]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; MST[STMT!TRAPSTMT]MSP[N] if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[S] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[S] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[S] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!TRAPSTMT]MSP[N] } int
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[STMT!DELSTMT]MSP[N] } int
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[C!ADD$C$1$]MSP[S] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; MST[@!ABS$@$]MSP[N] } int
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[P!PRIGHTDEC$P$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[P!PLEFTINC$P$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[P!PRIGHTINC$P$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) MST[P!PLEFTDEC$P$]MSP[N] { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ;
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[STMT!TRAPSTMT]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[STMT!DELSTMT]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[A!CONSTVAL$0$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[@!ABS$@$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTDEC$P$]MSP[S]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTINC$P$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[P!PRIGHTINC$P$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[P!PLEFTDEC$P$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
if ( set_security_context ) defaultcon ( argv [ optind ] , S_IFIFO ) ; if ( mkfifo ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_13 ) , quote ( argv [ optind ] ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N]
exit_status = EXIT_FAILURE ; MST[STMT!TRAPSTMT]MSP[N] } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; MST[ASSIGN$V1$@2$!GT$V1$@2$]MSP[N] } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; MST[C!CONSTVAL$0$]MSP[N] } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; MST[C!ADD$C$1$]MSP[N] } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } MST[STMT!TRAPSTMT]MSP[N] else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } MST[STMT!DELSTMT]MSP[S] else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[STMT!TRAPSTMT]MSP[S] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[AND$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[AND$@1$@2$!CONSTVAL$1$]MSP[S] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[AND$@1$@2$!OPERAND$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[AND$@1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[AND$@1$@2$!OR$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[A!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$A1$@2$!OPERAND$A1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[P!PRIGHTDEC$P$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[P!PLEFTINC$P$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[P!PRIGHTINC$P$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) MST[P!PLEFTDEC$P$]MSP[N] { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } }
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!TRAPSTMT]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[STMT!DELSTMT]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$P1$@2$!PDEREF_LEFTINC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTDEC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$P1$@2$!PDEREF_LEFTDEC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$P1$@2$!PDEREF_RIGHTINC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$A1$@2$!PDEREF_ADD$A1$@2$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD_DEREF$A1$@2$!PDEREF_SUB$A1$@2$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[A!CONSTVAL$0$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[A!CONSTVAL$0$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[@!ABS$@$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[@!ABS$@$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[@!ABS$@$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$A1$@2$!OPERAND$@2$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$A1$@2$!OPERAND$A1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$P1$@2$!PRIGHTDEC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[P!PRIGHTDEC$P$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[P!PLEFTINC$P$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[P!PRIGHTINC$P$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[P!PLEFTDEC$P$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[CALL!SHUFFLEARGS$2$]MSP[N]
fputs ( _ ( lr_3 ) , stdout ) ; fputs ( _ ( lr_4 ) , stdout ) ; fputs ( HELP_OPTION_DESCRIPTION , stdout ) ; fputs ( VERSION_OPTION_DESCRIPTION , stdout ) ; emit_ancillary_info () ; } exit ( status ) ; } int MST[CALL!SHUFFLEARGS$2$]MSP[N]
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; MST[STMT!TRAPSTMT]MSP[N] } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; MST[C!CONSTVAL$0$]MSP[N] } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; MST[C!ADD$C$1$]MSP[N] } }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } MST[STMT!TRAPSTMT]MSP[N] }
exit_status = EXIT_FAILURE ; } else if ( specified_mode && lchmod ( argv [ optind ] , newmode ) != 0 ) { error ( 0 , errno , _ ( lr_14 ) , quote ( argv [ optind ] ) ) ; exit_status = EXIT_FAILURE ; } } MST[STMT!TRAPSTMT]MSP[N]
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[STMT!DELSTMT]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PADD_DEREF$A1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[PDEREF_ADD$A1$@2$!PSUB_DEREF$A1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ASSIGN$V1$@2$!GE$V1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[@!ABS$@$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[C!CONSTVAL$0$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[C!ADD$C$1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$V1$@2$!ASSIGN$V1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!GT$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITSHR$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LT$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!SUB$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@2$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!BITAND$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!ABS$@1$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!LE$@1$@2$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!CONSTVAL$0$]MSP[N] {
newmode = mode_adjust ( newmode , false , umask_value , change , NULL ) ; free ( change ) ; if ( newmode & ~ S_IRWXUGO ) error ( EXIT_FAILURE , 0 , _ ( lr_12 ) ) ; } for (; optind < argc ; ++ optind ) MST[ADD$@1$@2$!MOD$@2$@1$]MSP[N] {
static security_class_t mode_to_security_class ( mode_t m ) { if ( S_ISREG ( m ) ) return string_to_security_class ( lr_1 ) ; if ( S_ISDIR ( m ) ) return string_to_security_class ( lr_2 ) ; if ( S_ISCHR ( m ) ) return string_to_security_class ( lr_3 ) ;
if ( S_ISBLK ( m ) ) return string_to_security_class ( lr_4 ) ; if ( S_ISFIFO ( m ) ) return string_to_security_class ( lr_5 ) ; if ( S_ISLNK ( m ) ) return string_to_security_class ( lr_6 ) ; if ( S_ISSOCK ( m ) )
return string_to_security_class ( lr_7 ) ; errno = EINVAL ; return 0 ; } static int computecon ( char const * path , mode_t mode , security_context_t * con ) { security_context_t scon = NULL ; security_context_t tcon = NULL ; security_class_t tclass ; int rc = - 1 ;
char * dir = dir_name ( path ) ; if ( ! dir ) goto quit; if ( getcon ( & scon ) < 0 ) goto quit; if ( getfilecon ( dir , & tcon ) < 0 ) goto quit; tclass = mode_to_security_class ( mode ) ;
if ( ! tclass ) goto quit; rc = security_compute_create ( scon , tcon , tclass , con ) ; quit: free ( dir ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } int
defaultcon ( char const * path , mode_t mode ) { int rc = - 1 ; security_context_t scon = NULL , tcon = NULL ; context_t scontext = 0 , tcontext = 0 ; const char * contype ; char * constr ; char * newpath = NULL ;
if ( ! IS_ABSOLUTE_FILE_NAME ( path ) ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ; if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; path = newpath ; }
if ( matchpathcon ( path , mode , & scon ) < 0 ) { if ( errno == ENOENT ) errno = ENODATA ; goto quit; } if ( computecon ( path , mode , & tcon ) < 0 ) goto quit;
if ( ! ( scontext = context_new ( scon ) ) ) goto quit; if ( ! ( tcontext = context_new ( tcon ) ) ) goto quit; if ( ! ( contype = context_type_get ( scontext ) ) ) goto quit;
if ( context_type_set ( tcontext , contype ) ) goto quit; if ( ! ( constr = context_str ( tcontext ) ) ) goto quit; rc = setfscreatecon ( constr ) ; quit: context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ;
freecon ( tcon ) ; free ( newpath ) ; return rc ; } static int restorecon_private ( char const * path , bool local ) { int rc = - 1 ; struct stat sb ; security_context_t scon = NULL , tcon = NULL ;
context_t scontext = 0 , tcontext = 0 ; const char * contype ; char * constr ; int fd ; if ( local ) { if ( getfscreatecon ( & tcon ) < 0 ) return rc ; rc = lsetfilecon ( path , tcon ) ;
freecon ( tcon ) ; return rc ; } fd = open ( path , O_RDONLY | O_NOFOLLOW ) ; if ( fd == - 1 && ( errno != ELOOP ) ) goto quit; if ( fd != - 1 ) {
if ( fstat ( fd , & sb ) < 0 ) goto quit; } else { if ( lstat ( path , & sb ) < 0 ) goto quit; } if ( matchpathcon ( path , sb . st_mode , & scon ) < 0 ) {
if ( errno == ENOENT ) errno = ENODATA ; goto quit; } if ( ! ( scontext = context_new ( scon ) ) ) goto quit; if ( fd != - 1 ) { if ( fgetfilecon ( fd , & tcon ) < 0 ) goto quit; }
else { if ( lgetfilecon ( path , & tcon ) < 0 ) goto quit; } if ( ! ( tcontext = context_new ( tcon ) ) ) goto quit; if ( ! ( contype = context_type_get ( scontext ) ) ) goto quit;
if ( context_type_set ( tcontext , contype ) ) goto quit; if ( ! ( constr = context_str ( tcontext ) ) ) goto quit; if ( fd != - 1 ) rc = fsetfilecon ( fd , constr ) ; else
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) {
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
}
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; MST[STMT!TRAPSTMT]MSP[N] FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; MST[STMT!DELSTMT]MSP[N] FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; MST[STMT!TRAPSTMT]MSP[N] if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; MST[STMT!DELSTMT]MSP[N] if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; MST[C!CONSTVAL$0$]MSP[N] if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; MST[C!ADD$C$1$]MSP[N] if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[STMT!TRAPSTMT]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[@!ABS$@$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[@!ABS$@$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[@!ABS$@$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[C!ADD$C$-1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[C!ADD$C$1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[C!CONSTVAL$0$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[C!ADD$C$-1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[C!ADD$C$1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITNOT$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!MUL$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITAND$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!CONSTVAL$1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITSHL$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!NEQ$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!ADD$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!SUB$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!OPERAND$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITXOR$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!NEG$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!ABS$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!SUB$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!CONSTVAL$0$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!MOD$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GT$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!BITSHR$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LE$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!MOD$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!DIV$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GT$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LE$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!DIV$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GE$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LT$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!LT$@2$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$@1$@2$!GE$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[EQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[OR$@1$@2$!OPERAND$@1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[OR$@1$@2$!AND$@1$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[OR$@1$@2$!OPERAND$@2$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[OR$@1$@2$!CONSTVAL$1$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[OR$@1$@2$!CONSTVAL$0$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[STMT!TRAPSTMT]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[@!ABS$@$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) MST[@!ABS$@$]MSP[N] { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ;
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ; MST[STMT!TRAPSTMT]MSP[N]
restorecon ( char const * path , bool recurse , bool local ) { char * newpath = NULL ; FTS * fts ; bool ok = true ; if ( ! IS_ABSOLUTE_FILE_NAME ( path ) && ! local ) { newpath = canonicalize_filename_mode ( path , CAN_MISSING ) ; MST[STMT!DELSTMT]MSP[N]
if ( ! newpath ) MST[STMT!TRAPSTMT]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) {
if ( ! newpath ) MST[@!ABS$@$]MSP[N] error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) {
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[STMT!TRAPSTMT]MSP[N]
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[STMT!DELSTMT]MSP[N]
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[@!ABS$@$]MSP[N]
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[CALL!SHUFFLEARGS$2$]MSP[N]
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[CALL!SHUFFLEARGS$2$]MSP[N]
rc = lsetfilecon ( path , constr ) ; quit: if ( fd != - 1 ) close ( fd ) ; context_free ( scontext ) ; context_free ( tcontext ) ; freecon ( scon ) ; freecon ( tcon ) ; return rc ; } bool MST[STMT!TRAPSTMT]MSP[N]
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } MST[STMT!TRAPSTMT]MSP[N] const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[A!CONSTVAL$0$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[C!ADD$C$-1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[C!ADD$C$1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[@!ABS$@$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!TRAPSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PLEFTINC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PRIGHTINC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[STMT!DELSTMT]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[A!CONSTVAL$0$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[A!CONSTVAL$0$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[C!CONSTVAL$0$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[C!ADD$C$1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[PADD$A1$@2$!OPERAND$@2$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[PADD$A1$@2$!PSUB$A1$@2$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[PADD$P1$@2$!PLEFTINC$P1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[PADD$P1$@2$!PRIGHTINC$P1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[PADD$P1$@2$!PLEFTDEC$P1$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PRIGHTDEC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PLEFTINC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; MST[P!PLEFTDEC$P$]MSP[N] if ( ! recurse ) {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) MST[STMT!TRAPSTMT]MSP[N] {
if ( ! newpath ) error ( EXIT_FAILURE , errno , _ ( lr_8 ) , quote ( path ) ) ; } const char * ftspath [ 2 ] = { newpath ? newpath : path , NULL } ; if ( ! recurse ) MST[@!ABS$@$]MSP[N] {
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[STMT!TRAPSTMT]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[STMT!DELSTMT]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!ABS$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!NEG$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[A!CONSTVAL$0$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[@!ABS$@$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[@!ABS$@$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[@!ABS$@$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[@!ABS$@$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[C!ADD$C$-1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[C!ADD$C$1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; MST[C!ADD$C$-1$]MSP[N] free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; MST[STMT!TRAPSTMT]MSP[N] return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; MST[STMT!DELSTMT]MSP[N] return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; MST[STMT!TRAPSTMT]MSP[N] } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; MST[ASSIGN$V1$@2$!BITNOT$V1$]MSP[N] } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; MST[@!ABS$@$]MSP[N] } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; MST[STMT!TRAPSTMT]MSP[N] } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; MST[STMT!DELSTMT]MSP[N] } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; MST[STMT!TRAPSTMT]MSP[N] while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; MST[STMT!DELSTMT]MSP[N] while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; MST[A!CONSTVAL$0$]MSP[N] while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; MST[C!ADD$C$-1$]MSP[N] while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; MST[C!ADD$C$1$]MSP[N] while ( 1 ) { FTSENT * ent ;
ok = restorecon_private ( * ftspath , local ) != - 1 ; free ( newpath ) ; return ok ; } fts = xfts_open ( ( char * const * ) ftspath , FTS_PHYSICAL , NULL ) ; while ( 1 ) MST[STMT!TRAPSTMT]MSP[N] { FTSENT * ent ;
ent = fts_read ( fts ) ; MST[STMT!DELSTMT]MSP[N] if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) MST[STMT!TRAPSTMT]MSP[N] { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) MST[@!ABS$@$]MSP[N] { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[STMT!TRAPSTMT]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$V1$@2$!ASSIGN$V1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; MST[STMT!TRAPSTMT]MSP[N] ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; MST[STMT!DELSTMT]MSP[N] ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; MST[@!ABS$@$]MSP[N] ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; MST[STMT!TRAPSTMT]MSP[N] } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; MST[STMT!DELSTMT]MSP[N] } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; MST[C!ADD$C$-1$]MSP[N] } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; MST[C!ADD$C$1$]MSP[N] } break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } MST[STMT!TRAPSTMT]MSP[N] break; }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; MST[STMT!TRAPSTMT]MSP[N] }
ent = fts_read ( fts ) ; if ( ent == NULL ) { if ( errno != 0 ) { error ( 0 , errno , _ ( lr_9 ) ) ; ok = false ; } break; MST[STMT!DELSTMT]MSP[N] }
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[STMT!TRAPSTMT]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[STMT!DELSTMT]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!ABS$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!BITXOR$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!BITAND$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!ADD$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!OPERAND$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!NEG$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!SUB$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!MUL$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$V1$@2$!ASSIGN$V1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!NEQ$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!NEG$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!SUB$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITXOR$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!ADD$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!NEG$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITOR$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHL$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!EQ$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!ABS$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!MUL$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!SUB$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHL$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!MOD$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!MOD$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHR$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!BITSHR$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!DIV$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!GE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LT$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LE$@1$@2$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!DIV$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LT$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[BITAND$@1$@2$!LE$@2$@1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[ASSIGN$V1$@2$!LT$@2$V1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[A!CONSTVAL$0$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[@!ABS$@$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[@!ABS$@$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[@!ABS$@$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[@!ABS$@$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[@!ABS$@$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[C!ADD$C$-1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[C!ADD$C$1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[C!ADD$C$-1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[C!ADD$C$-1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; MST[C!ADD$C$1$]MSP[N] } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } MST[STMT!TRAPSTMT]MSP[N] if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } MST[STMT!DELSTMT]MSP[N] if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!ABS$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!CONSTVAL$0$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!BITNOT$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!SUB$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!EQ$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!MOD$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!DIV$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GT$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LT$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!LE$@1$@2$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[NEQ$@1$@2$!GE$@2$@1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[@!ABS$@$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[C!ADD$C$-1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) MST[C!ADD$C$1$]MSP[N] { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; MST[STMT!TRAPSTMT]MSP[N] ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; MST[STMT!DELSTMT]MSP[N] ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; MST[@!ABS$@$]MSP[N] ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; MST[CALL!SHUFFLEARGS$2$]MSP[N] ok = false ; } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; MST[STMT!TRAPSTMT]MSP[N] } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; MST[ASSIGN$V1$@2$!EQ$V1$@2$]MSP[N] } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; MST[C!ADD$C$-1$]MSP[N] } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; MST[C!ADD$C$1$]MSP[N] } free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } MST[STMT!TRAPSTMT]MSP[N] free ( newpath ) ; return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; MST[STMT!TRAPSTMT]MSP[N] return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; MST[STMT!DELSTMT]MSP[N] return ok ;
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ; MST[STMT!TRAPSTMT]MSP[N]
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ; MST[ASSIGN$V1$@2$!NEG$@2$]MSP[N]
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ; MST[@!ABS$@$]MSP[N]
ok &= restorecon_private ( fts -> fts_path , local ) != - 1 ; } if ( fts_close ( fts ) != 0 ) { error ( 0 , errno , _ ( lr_10 ) ) ; ok = false ; } free ( newpath ) ; return ok ; MST[STMT!TRAPSTMT]MSP[N]
} MST[STMT!TRAPSTMT]MSP[N]
} MST[STMT!DELSTMT]MSP[N]
