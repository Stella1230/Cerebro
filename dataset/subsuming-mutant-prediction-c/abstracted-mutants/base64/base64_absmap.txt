"rb"	,	lr_13
DEC_B64BLOCKSIZE	,	vl_11
stdin	,	vl_25
"%s"	,	lr_14
optind	,	vl_23
usage	,	fn_1
program_name	,	vl_2
optarg	,	vl_18
size_t	,	tp_1
decode	,	vr_26
uintmax_t	,	tp_2
do_decode	,	fn_10
long_options	,	vl_17
quote	,	fn_22
len	,	vr_3
PACKAGE	,	vl_14
ENC_BLOCKSIZE	,	vl_9
LOCALEDIR	,	vl_15
buffer	,	vr_2
written	,	vr_7
"invalid wrap size: %s"	,	lr_10
DEC_BLOCKSIZE	,	vl_12
to_write	,	vr_9
ENC_B64BLOCKSIZE	,	vl_10
errno	,	vl_6
in	,	vr_10
ctx	,	vr_17
FADVISE_SEQUENTIAL	,	vl_26
close_stdout	,	vl_16
base64_decode_ctx	,	fn_13
textdomain	,	fn_17
VERSION_OPTION_DESCRIPTION	,	vl_4
wrap_write	,	fn_5
do_encode	,	fn_7
LONGINT_OK	,	vl_19
"invalid input"	,	lr_7
opt	,	vr_23
MIN	,	fn_6
SIZE_MAX	,	vl_7
set_program_name	,	fn_15
fadvise	,	fn_25
EXIT_FAILURE	,	vl_5
LC_ALL	,	vl_13
EXIT_SUCCESS	,	vl_1
"-"	,	lr_12
case_GETOPT_VERSION_CHAR	,	fn_21
"\(NL)\n\(NL)With no FILE, or when FILE is -, read standard input.\n"	,	lr_3
xstrtoumax	,	fn_19
"\(NL)\n\(NL)The data are encoded as described for the base64 alphabet in RFC 3548.\n\(NL)When decoding, the input may contain newlines in addition to the bytes of\n\(NL)the formal base64 alphabet.  Use --ignore-garbage to attempt to recover\n\(NL)from any other non-alphabet bytes in the encoded stream.\n"	,	lr_4
status	,	vr_1
""	,	lr_8
quotearg	,	fn_20
bindtextdomain	,	fn_16
STREQ	,	fn_23
O_BINARY	,	vl_24
PROGRAM_NAME	,	vl_21
ignore_garbage	,	vr_15
BASE64_LENGTH	,	fn_9
wrap_column	,	vr_4
sum	,	vr_13
"extra operand %s"	,	lr_11
infile	,	vr_25
base64_decode_context	,	vr_16
argv	,	vr_22
out	,	vr_6
emit_ancillary_info	,	fn_4
inbuf	,	vr_11
base64_decode_ctx_init	,	fn_11
input_fh	,	vr_24
emit_mandatory_arg_note	,	fn_3
FILE	,	tp_3
ok	,	vr_18
"\(NL)Usage: %s [OPTION]... [FILE]\n\(NL)Base64 encode or decode FILE, or standard input, to standard output.\n\(NL)"	,	lr_1
EOF	,	vl_8
"closing standard input"	,	lr_15
HELP_OPTION_DESCRIPTION	,	vl_3
argc	,	vr_21
getopt_long	,	fn_18
base64_encode	,	fn_8
i	,	vr_20
initialize_main	,	fn_14
AUTHORS	,	vl_22
"read error"	,	lr_6
k	,	vr_19
current_column	,	vr_5
n	,	vr_14
"diw:"	,	lr_9
emit_try_help	,	fn_2
outbuf	,	vr_12
"\(NL)  -d, --decode          decode data\n\(NL)  -i, --ignore-garbage  when decoding, ignore non-alphabet characters\n\(NL)  -w, --wrap=COLS       wrap encoded lines after COLS character (default 76).\n\(NL)                          Use 0 to disable line wrapping\n\(NL)\n\(NL)"	,	lr_2
cols_remaining	,	vr_8
isbase64	,	fn_12
"write error"	,	lr_5
case_GETOPT_HELP_CHAR	,	vl_20
xfreopen	,	fn_24
