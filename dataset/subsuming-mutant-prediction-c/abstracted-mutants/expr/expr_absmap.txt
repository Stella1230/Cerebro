mpz_out_str	,	fn_18
mempcpy	,	fn_47
pv	,	vr_24
"!="	,	lr_43
"error in regular expression matcher"	,	lr_18
b0	,	vr_7
RE_SYNTAX_POSIX_BASIC	,	vl_24
num_regs	,	vr_33
"\(NL)\n\(NL)Beware that many operators need to be escaped or quoted for shells.\n\(NL)Comparisons are arithmetic if both ARGs are numbers, else lexicographical.\n\(NL)Pattern matches return the string matched between \\( and \\) or null; if\n\(NL)\\( and \\) are not used, they return the number of characters matched or 0.\n\(NL)"	,	lr_8
len	,	vr_48
" %s"	,	lr_17
llen	,	vr_47
"\(NL)\n\(NL)Print the value of EXPRESSION to standard output.  A blank line below\n\(NL)separates increasing precedence groups.  EXPRESSION may be:\n\(NL)\n\(NL)  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2\n\(NL)\n\(NL)  ARG1 &amp; ARG2       ARG1 if neither argument is null or 0, otherwise 0\n\(NL)"	,	lr_2
errno	,	vl_27
str	,	vr_11
MIN	,	fn_46
"length"	,	lr_24
"%"	,	lr_33
""	,	lr_12
minus	,	vr_55
PROGRAM_NAME	,	vl_16
nomoreargs	,	fn_31
integer_overflow	,	fn_6
"%s:"	,	lr_16
fastmap	,	vr_29
HAVE_GMP	,	vl_20
"\(NL)\n\(NL)Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null\n\(NL)or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.\n\(NL)"	,	lr_9
pos	,	vr_46
re_buffer	,	vr_28
freev	,	fn_35
newline_anchor	,	vr_39
looks_like_integer	,	fn_36
a	,	vr_8
b	,	vr_9
"&gt;="	,	lr_44
sv	,	vr_23
mpz_clear	,	fn_1
re_registers	,	vr_30
xstrdup	,	fn_13
i	,	vr_2
AUTHORS	,	vl_19
l	,	vr_43
"\(NL)\n\(NL)  STRING : REGEXP   anchored pattern match of REGEXP in STRING\n\(NL)\n\(NL)  match STRING REGEXP        same as STRING : REGEXP\n\(NL)  substr STRING POS LENGTH   substring of STRING, POS counted from 1\n\(NL)  index STRING CHARS         index in STRING where any CHARS is found, or 0\n\(NL)  length STRING              length of STRING\n\(NL)"	,	lr_6
cp	,	vr_21
vlim	,	vr_50
r	,	vr_5
buf	,	vr_12
s	,	vr_3
u	,	vr_20
v	,	vr_18
toarith	,	fn_37
z	,	vr_1
less_equal	,	vr_57
program_name	,	vl_6
"eval7"	,	lr_19
PACKAGE	,	vl_13
ul	,	vr_22
"missing operand"	,	lr_14
"\(NL)Usage: %s EXPRESSION\n\(NL)  or:  %s OPTION\n\(NL)"	,	lr_1
nextarg	,	fn_39
"("	,	lr_20
re_regs	,	vr_31
close_stdout	,	vl_15
"&amp;"	,	lr_50
eval	,	fn_30
docolon	,	fn_41
xstrtoimax	,	fn_4
mpz_mul	,	fn_8
regoff_t	,	tp_8
")"	,	lr_21
STREQ	,	fn_29
"|"	,	lr_52
":"	,	lr_29
argv	,	vr_17
int_value	,	fn_33
eval2	,	fn_51
eval3	,	fn_50
emit_ancillary_info	,	fn_21
eval1	,	fn_54
"set LC_ALL='C' to work around the problem"	,	lr_47
strintcmp	,	fn_52
initialize_exit_failure	,	fn_27
greater_than	,	vr_61
end	,	vr_35
divide	,	vr_52
"*"	,	lr_31
eval6	,	fn_45
multiply	,	vr_51
EOF	,	vl_4
eval7	,	fn_44
eval4	,	fn_49
eval5	,	fn_48
argc	,	vr_16
"\(NL)\n\(NL)  ARG1 * ARG2       arithmetic product of ARG1 and ARG2\n\(NL)  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2\n\(NL)  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2\n\(NL)"	,	lr_5
start	,	vr_34
i1	,	vr_44
quotearg_n_style	,	fn_53
i2	,	vr_45
initialize_main	,	fn_23
re_syntax_options	,	vl_23
equal	,	vr_58
not_equal	,	vr_59
mpz_get_str	,	fn_11
parse_long_options	,	fn_28
"+"	,	lr_23
PACKAGE_NAME	,	vl_17
"syntax error"	,	lr_10
base	,	vr_4
printv	,	fn_32
mod	,	vr_53
mpz_fits_ulong_p	,	fn_16
EXPR_INVALID	,	vl_9
usage	,	fn_19
"eval3"	,	lr_36
val	,	vr_10
_GL_ATTRIBUTE_PURE	,	tp_5
mpz_init_set_ui	,	fn_2
"&lt;="	,	lr_40
"="	,	lr_41
errmsg	,	vr_26
INT_BUFSIZE_BOUND	,	fn_12
textdomain	,	fn_26
VERSION_OPTION_DESCRIPTION	,	vl_8
"--"	,	lr_13
"=="	,	lr_42
mpz_sub	,	fn_7
SIZE_MAX	,	vl_21
UCHAR_MAX	,	vl_22
set_program_name	,	fn_24
LC_ALL	,	vl_12
"eval4"	,	lr_30
EXIT_SUCCESS	,	vl_5
"-"	,	lr_37
mpz_init_set_str	,	fn_3
syntax_error	,	fn_22
evaluate	,	vr_41
status	,	vr_14
bindtextdomain	,	fn_25
cmp	,	vr_62
"eval5"	,	lr_28
stream	,	vr_13
less_than	,	vr_56
mpz_t	,	tp_1
mpz_get_ui	,	fn_17
u_argc	,	vr_19
FILE	,	tp_3
"&lt;"	,	lr_39
HELP_OPTION_DESCRIPTION	,	vl_7
"\(NL)  + TOKEN                    interpret TOKEN as a string, even if it is a\n\(NL)                               keyword like 'match' or an operator like '/'\n\(NL)\n\(NL)  ( EXPRESSION )             value of EXPRESSION\n\(NL)"	,	lr_7
emit_try_help	,	fn_20
"eval6"	,	lr_22
"&gt;"	,	lr_45
"/"	,	lr_32
VERSION	,	vl_18
"substr"	,	lr_27
RE_CONTEXT_INVALID_DUP	,	vl_25
"%s"	,	lr_15
matchlen	,	vr_32
"non-integer argument"	,	lr_34
VALUE	,	tp_4
size_t	,	tp_6
"division by zero"	,	lr_35
translate	,	vr_38
greater_equal	,	vr_60
mpz_add	,	fn_5
mpz_sgn	,	fn_15
ERANGE	,	vl_11
LOCALEDIR	,	vl_14
ULONG_MAX	,	vl_3
buffer	,	vr_36
IF_LINT	,	vr_25
"\(NL)\n\(NL)  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2\n\(NL)  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2\n\(NL)"	,	lr_4
intmax_t	,	tp_2
re_compile_pattern	,	fn_42
LONGINT_OK	,	vl_1
plus	,	vr_54
re_pattern_buffer	,	vr_27
"%c"	,	lr_11
"\(NL)\n\(NL)  ARG1 &lt; ARG2       ARG1 is less than ARG2\n\(NL)  ARG1 &lt;= ARG2      ARG1 is less than or equal to ARG2\n\(NL)  ARG1 = ARG2       ARG1 is equal to ARG2\n\(NL)  ARG1 != ARG2      ARG1 is unequal to ARG2\n\(NL)  ARG1 &gt;= ARG2      ARG1 is greater than or equal to ARG2\n\(NL)  ARG1 &gt; ARG2       ARG1 is greater than ARG2\n\(NL)"	,	lr_3
"match"	,	lr_25
mpz_tdiv_r	,	fn_10
getsize	,	fn_38
INTMAX_MAX	,	vl_2
mpz_tdiv_q	,	fn_9
"index"	,	lr_26
re_nsub	,	vr_40
imaxtostr	,	fn_14
trace	,	fn_40
EXPR_FAILURE	,	vl_10
"eval1"	,	lr_49
RE_NO_EMPTY_RANGES	,	vl_26
re_match	,	fn_43
fxn	,	tp_7
allocated	,	vr_37
op	,	vr_15
"string comparison failed"	,	lr_46
vlen	,	vr_49
locale_quoting_style	,	vl_29
EOVERFLOW	,	vl_28
a0	,	vr_6
"eval"	,	lr_51
EVAL_TRACE	,	vr_42
str_value	,	fn_34
"eval2"	,	lr_38
"the strings compared were %s and %s"	,	lr_48
