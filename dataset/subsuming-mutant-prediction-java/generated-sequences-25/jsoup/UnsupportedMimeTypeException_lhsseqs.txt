return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[experimental.NakedReceiverMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[experimental.NakedReceiverMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
public String fn_1 () { return vl_1 ; MST[EmptyObjectReturnValsMutator]MSP[] } public String fn_2 () { return vl_2 ; } @Override public String toString () {
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[experimental.NakedReceiverMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[ConstructorCallMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[experimental.NakedReceiverMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[NonVoidMethodCallMutator]MSP[] }
public String fn_1 () { return vl_1 ; } public String fn_2 () { return vl_2 ; MST[EmptyObjectReturnValsMutator]MSP[] } @Override public String toString () {
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[experimental.NakedReceiverMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[EmptyObjectReturnValsMutator]MSP[] }
return super . toString () + lr_1 + vl_1 + lr_2 + vl_2 ; MST[ReturnValsMutator]MSP[] }
public String fn_1 () { return vl_1 ; MST[ReturnValsMutator]MSP[] } public String fn_2 () { return vl_2 ; } @Override public String toString () {
public String fn_1 () { return vl_1 ; } public String fn_2 () { return vl_2 ; MST[ReturnValsMutator]MSP[] } @Override public String toString () {
