protected vr_1 < vt_1 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public vt_1 fn_2 () { return iterator . fn_2 () ; MST[ReturnValsMutator]MSP[N] } @Override public int fn_3 () { return iterator . fn_3 () ;
protected vr_1 < vt_1 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] }
} @Override public boolean fn_4 () { return iterator . fn_4 () ; MST[BooleanFalseReturnValsMutator]MSP[S] } @Override public vt_1 fn_5 () {
iterator . fn_7 ( vr_2 ) ; MST[VoidMethodCallMutator]MSP[N] } @Override public void add ( final vt_1 vr_2 ) { iterator . add ( vr_2 ) ;
iterator . fn_7 ( vr_2 ) ; } @Override public void add ( final vt_1 vr_2 ) { iterator . add ( vr_2 ) ; MST[VoidMethodCallMutator]MSP[S]
} @Override public boolean fn_4 () { return iterator . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public vt_1 fn_5 () {
protected vr_1 < vt_1 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[N] }
} @Override public boolean fn_4 () { return iterator . fn_4 () ; MST[ReturnValsMutator]MSP[N] } @Override public vt_1 fn_5 () {
return iterator . fn_5 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public int fn_6 () { return iterator . fn_6 () ; } @Override
return iterator . fn_5 () ; } @Override public int fn_6 () { return iterator . fn_6 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override
return iterator . fn_5 () ; MST[NullReturnValsMutator]MSP[S] } @Override public int fn_6 () { return iterator . fn_6 () ; } @Override
@Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public int fn_3 () { return iterator . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[S]
return iterator . fn_5 () ; } @Override public int fn_6 () { return iterator . fn_6 () ; MST[PrimitiveReturnsMutator]MSP[S] } @Override
return iterator . fn_5 () ; MST[ReturnValsMutator]MSP[N] } @Override public int fn_6 () { return iterator . fn_6 () ; } @Override
@Override public vt_1 fn_2 () { return iterator . fn_2 () ; MST[NullReturnValsMutator]MSP[N] } @Override public int fn_3 () { return iterator . fn_3 () ;
} @Override public boolean fn_4 () { return iterator . fn_4 () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public vt_1 fn_5 () {
public void remove () { iterator . remove () ; MST[VoidMethodCallMutator]MSP[S] } @Override public void fn_7 ( final vt_1 vr_2 ) {
@Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public int fn_3 () { return iterator . fn_3 () ; MST[ReturnValsMutator]MSP[S]
protected vr_1 < vt_1 > fn_1 () { return iterator ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[N] }
@Override public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public int fn_3 () { return iterator . fn_3 () ; MST[PrimitiveReturnsMutator]MSP[S]
return iterator . fn_5 () ; } @Override public int fn_6 () { return iterator . fn_6 () ; MST[ReturnValsMutator]MSP[S] } @Override
protected vr_1 < vt_1 > fn_1 () { return iterator ; MST[NullReturnValsMutator]MSP[S] } @Override public boolean hasNext () { return iterator . hasNext () ; }
protected vr_1 < vt_1 > fn_1 () { return iterator ; MST[ReturnValsMutator]MSP[S] } @Override public boolean hasNext () { return iterator . hasNext () ; }
