if ( vr_2 instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[N] @SuppressWarnings ( lr_1 )
return new vr_4 <> ( vr_2 ) ; } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_5 () ; MST[VoidMethodCallMutator]MSP[N]
return vr_19 . vr_20 ( vr_18 ) ; MST[ReturnValsMutator]MSP[N] } @Override public vr_16 < vt_1 > fn_10 () {
if ( vr_2 instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] @SuppressWarnings ( lr_1 )
return vr_24 . vr_25 ( vr_23 ) ; MST[EmptyObjectReturnValsMutator]MSP[S] }
out . fn_2 ( vr_2 ) ; MST[VoidMethodCallMutator]MSP[S] } @SuppressWarnings ( lr_1 ) private void fn_3 ( final tp_2 vr_6 ) throws IOException , vl_2 {
final vr_16 < vt_1 > vr_18 = super . fn_10 () ; return vr_21 . vr_22 ( vr_18 ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } @Override
vr_6 . vr_7 () ; vr_2 = ( vr_8 < vt_1 , vt_2 > ) vr_6 . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override
public void fn_8 ( final vr_8 < ? extends vt_1 , ? extends vt_2 > vr_15 ) { throw new fn_6 () ; MST[ConstructorCallMutator]MSP[S] } @Override
final vr_16 < vt_1 > vr_18 = super . fn_10 () ; return vr_21 . vr_22 ( vr_18 ) ; MST[ReturnValsMutator]MSP[N] } @Override
return vr_24 . vr_25 ( vr_23 ) ; MST[ArgumentPropagationMutator]MSP[N] }
vr_6 . vr_7 () ; MST[VoidMethodCallMutator]MSP[N] vr_2 = ( vr_8 < vt_1 , vt_2 > ) vr_6 . fn_3 () ; } @Override
final vr_1 < vt_1 , vt_2 > vr_3 = ( vr_1 < vt_1 , vt_2 > ) vr_2 ; return vr_3 ; MST[NullReturnValsMutator]MSP[S] }
final vr_16 < vr_8 . vr_17 < vt_1 , vt_2 > > vr_18 = super . fn_9 () ; MST[NonVoidMethodCallMutator]MSP[N]
final vr_16 < vt_1 > vr_18 = super . fn_10 () ; return vr_21 . vr_22 ( vr_18 ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
return vr_24 . vr_25 ( vr_23 ) ; MST[NonVoidMethodCallMutator]MSP[N] }
if ( vr_2 instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] @SuppressWarnings ( lr_1 )
public Collection < vt_2 > fn_11 () { final Collection < vt_2 > vr_23 = super . fn_11 () ; MST[NonVoidMethodCallMutator]MSP[N]
final vr_16 < vt_1 > vr_18 = super . fn_10 () ; MST[NonVoidMethodCallMutator]MSP[N] return vr_21 . vr_22 ( vr_18 ) ; } @Override
if ( vr_2 instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[N] @SuppressWarnings ( lr_1 )
return vr_11 . vr_12 ( vr_10 ) ; } @Override public void clear () { throw new fn_6 () ; MST[ConstructorCallMutator]MSP[S] } @Override
return new vr_4 <> ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_5 () ;
public vt_2 remove ( final Object vr_13 ) { throw new fn_6 () ; MST[ConstructorCallMutator]MSP[S] } @Override
vr_6 . vr_7 () ; vr_2 = ( vr_8 < vt_1 , vt_2 > ) vr_6 . fn_3 () ; MST[experimental.MemberVariableMutator]MSP[S] } @Override
return vr_19 . vr_20 ( vr_18 ) ; MST[EmptyObjectReturnValsMutator]MSP[S] } @Override public vr_16 < vt_1 > fn_10 () {
final vr_16 < vt_1 > vr_18 = super . fn_10 () ; return vr_21 . vr_22 ( vr_18 ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override
return new vr_4 <> ( vr_2 ) ; MST[ConstructorCallMutator]MSP[N] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_5 () ;
return vr_19 . vr_20 ( vr_18 ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vr_16 < vt_1 > fn_10 () {
return vr_19 . vr_20 ( vr_18 ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override public vr_16 < vt_1 > fn_10 () {
if ( vr_2 instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[S] @SuppressWarnings ( lr_1 )
if ( vr_2 instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[N] @SuppressWarnings ( lr_1 )
if ( vr_2 instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[N] @SuppressWarnings ( lr_1 )
final vr_1 < vt_1 , vt_2 > vr_3 = ( vr_1 < vt_1 , vt_2 > ) vr_2 ; return vr_3 ; MST[ReturnValsMutator]MSP[S] }
if ( vr_2 instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[N] @SuppressWarnings ( lr_1 )
return new vr_4 <> ( vr_2 ) ; MST[NullReturnValsMutator]MSP[N] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_5 () ;
public vt_2 fn_7 ( final vt_1 vr_13 , final vt_2 vr_14 ) { throw new fn_6 () ; MST[ConstructorCallMutator]MSP[S] } @Override
return vr_24 . vr_25 ( vr_23 ) ; MST[ReturnValsMutator]MSP[N] }
