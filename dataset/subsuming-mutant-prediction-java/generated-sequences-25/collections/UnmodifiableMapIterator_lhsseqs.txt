final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; MST[NullReturnValsMutator]MSP[] }
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public vt_1 fn_3 () { return iterator . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[] }
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public vt_1 fn_3 () { return iterator . fn_3 () ; MST[NullReturnValsMutator]MSP[] }
return new vr_5 <> ( iterator ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
@Override public vt_2 fn_4 () { return iterator . fn_4 () ; MST[ReturnValsMutator]MSP[] } @Override public vt_2 fn_5 ( final vt_2 vr_6 ) {
if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_2 )
return new vr_5 <> ( iterator ) ; MST[ConstructorCallMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; MST[ReturnValsMutator]MSP[] }
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[ReturnValsMutator]MSP[] } @Override public vt_1 fn_3 () { return iterator . fn_3 () ; }
return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override
final vr_1 < ? extends vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[]
throw new fn_6 ( lr_3 ) ; MST[ConstructorCallMutator]MSP[] } @Override public void remove () { throw new fn_6 ( lr_4 ) ; }
return new vr_5 <> ( iterator ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
if ( iterator instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_2 )
if ( iterator instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_2 )
if ( iterator instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_2 )
if ( iterator instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_2 )
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[NullReturnValsMutator]MSP[] } @Override public vt_1 fn_3 () { return iterator . fn_3 () ; }
final vr_1 < ? extends vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[]
return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
@Override public vt_2 fn_4 () { return iterator . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public vt_2 fn_5 ( final vt_2 vr_6 ) {
if ( iterator instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_2 )
throw new fn_6 ( lr_3 ) ; } @Override public void remove () { throw new fn_6 ( lr_4 ) ; MST[ConstructorCallMutator]MSP[] }
return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[] } @Override
if ( iterator instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_2 )
return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public vt_1 fn_3 () { return iterator . fn_3 () ; MST[ReturnValsMutator]MSP[] }
@Override public vt_2 fn_4 () { return iterator . fn_4 () ; MST[NullReturnValsMutator]MSP[] } @Override public vt_2 fn_5 ( final vt_2 vr_6 ) {
if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_2 )
