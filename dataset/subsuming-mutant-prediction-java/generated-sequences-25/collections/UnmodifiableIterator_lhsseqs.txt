final Iterator < vt_1 > vr_3 = ( Iterator < vt_1 > ) iterator ; return vr_3 ; MST[NullReturnValsMutator]MSP[] }
return new vr_4 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[] } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[NullReturnValsMutator]MSP[] } @Override public void remove () { throw new fn_3 ( lr_3 ) ;
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[] @SuppressWarnings ( lr_2 )
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] @SuppressWarnings ( lr_2 )
return new vr_4 <> ( iterator ) ; MST[ConstructorCallMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public void remove () { throw new fn_3 ( lr_3 ) ; MST[ConstructorCallMutator]MSP[]
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] @SuppressWarnings ( lr_2 )
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[] @SuppressWarnings ( lr_2 )
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[] @SuppressWarnings ( lr_2 )
return new vr_4 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] } @Override
vr_1 . vr_2 ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[] if ( iterator instanceof vl_1 ) { @SuppressWarnings ( lr_2 )
final Iterator < vt_1 > vr_3 = ( Iterator < vt_1 > ) iterator ; return vr_3 ; MST[ReturnValsMutator]MSP[] }
return new vr_4 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[ReturnValsMutator]MSP[] } @Override public void remove () { throw new fn_3 ( lr_3 ) ;
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[] @SuppressWarnings ( lr_2 )
return new vr_4 <> ( iterator ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
return new vr_4 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[] @SuppressWarnings ( lr_2 )
return new vr_4 <> ( iterator ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
vr_1 . vr_2 ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] if ( iterator instanceof vl_1 ) { @SuppressWarnings ( lr_2 )
vr_1 . vr_2 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[] @SuppressWarnings ( lr_2 )
