@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; MST[NonVoidMethodCallMutator]MSP[] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; fn_3 ( out ) ; }
private void fn_4 ( final tp_2 vr_3 ) throws IOException , vl_1 { vr_3 . vr_4 () ; fn_5 ( vr_3 ) ; MST[VoidMethodCallMutator]MSP[] }
@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; MST[VoidMethodCallMutator]MSP[] fn_3 ( out ) ; }
private void fn_4 ( final tp_2 vr_3 ) throws IOException , vl_1 { vr_3 . vr_4 () ; MST[VoidMethodCallMutator]MSP[] fn_5 ( vr_3 ) ; }
@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; fn_3 ( out ) ; MST[VoidMethodCallMutator]MSP[] }
@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; MST[experimental.NakedReceiverMutator]MSP[] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; fn_3 ( out ) ; }
@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; MST[ReturnValsMutator]MSP[] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; fn_3 ( out ) ; }
@Override public vr_1 < vt_1 , vt_2 > fn_1 () { return ( vr_1 < vt_1 , vt_2 > ) super . fn_1 () ; MST[NullReturnValsMutator]MSP[] } private void fn_2 ( final tp_1 out ) throws IOException { out . vr_2 () ; fn_3 ( out ) ; }
