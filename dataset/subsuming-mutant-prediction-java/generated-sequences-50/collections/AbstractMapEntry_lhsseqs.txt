} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[InlineConstantMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[rv.ROR5Mutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.CRCR3Mutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.CRCR2Mutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; MST[ArgumentPropagationMutator]MSP[] } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR2Mutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[rv.CRCR5Mutator]MSP[] }
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { MST[rv.ROR5Mutator]MSP[] return true ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[rv.CRCR3Mutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.CRCR6Mutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.CRCR4Mutator]MSP[]
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[rv.CRCR5Mutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR5Mutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; MST[ReturnValsMutator]MSP[] } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR4Mutator]MSP[]
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[ReturnValsMutator]MSP[] }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[NegateConditionalsMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NegateConditionalsMutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[rv.CRCR3Mutator]MSP[] }
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[rv.CRCR4Mutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[rv.ROR2Mutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[InlineConstantMutator]MSP[]
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[rv.CRCR1Mutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[NonVoidMethodCallMutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NonVoidMethodCallMutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[NonVoidMethodCallMutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { MST[NegateConditionalsMutator]MSP[] return true ; }
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR3Mutator]MSP[]
if ( vr_2 instanceof vr_3 . vr_4 == false ) { return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return MST[ReturnValsMutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR3Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR2Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR1Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR4Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR5Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NegateConditionalsMutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[rv.CRCR6Mutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[rv.CRCR5Mutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[InlineConstantMutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR5Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; MST[NonVoidMethodCallMutator]MSP[] } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[MathMutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NegateConditionalsMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NonVoidMethodCallMutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[rv.ROR5Mutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[InlineConstantMutator]MSP[] }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[rv.ROR3Mutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NegateConditionalsMutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[ReturnValsMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[rv.ROR5Mutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NonVoidMethodCallMutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[rv.ROR5Mutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[PrimitiveReturnsMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NegateConditionalsMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[rv.CRCR2Mutator]MSP[] }
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[rv.ROR1Mutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[NegateConditionalsMutator]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( vr_2 instanceof vr_3 . vr_4 == false ) { return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return MST[BooleanTrueReturnValsMutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR1Mutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[NegateConditionalsMutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[rv.CRCR3Mutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[rv.CRCR6Mutator]MSP[] }
if ( vr_2 instanceof vr_3 . vr_4 == false ) { MST[rv.ROR4Mutator]MSP[] return false ; } final vr_3 . vr_4 < ? , ? > vr_5 = ( vr_3 . vr_4 < ? , ? > ) vr_2 ; return
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.CRCR5Mutator]MSP[]
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ;
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; }
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; MST[rv.CRCR6Mutator]MSP[] }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR5Mutator]MSP[]
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; MST[NegateConditionalsMutator]MSP[] }
} @Override public int fn_4 () { return ( fn_2 () == null ? 0 : fn_2 () . fn_4 () ) ^ MST[NonVoidMethodCallMutator]MSP[] ( fn_3 () == null ? 0 : fn_3 () . fn_4 () ) ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[NonVoidMethodCallMutator]MSP[]
@Override public tp_1 fn_1 ( final tp_1 vr_1 ) { return super . fn_1 ( vr_1 ) ; MST[NullReturnValsMutator]MSP[] } @Override public boolean equals ( final Object vr_2 ) { if ( vr_2 == this ) { return true ; }
( fn_2 () == null ? vr_5 . fn_2 () == null : fn_2 () . equals ( vr_5 . fn_2 () ) ) && ( fn_3 () == null ? vr_5 . fn_3 () == null : fn_3 () . equals ( vr_5 . fn_3 () ) ) ; MST[rv.ROR5Mutator]MSP[]
