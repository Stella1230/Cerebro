public static < vt_1 > vr_1 < vt_1 > fn_1 ( final vr_2 < vt_1 > vr_3 , final vr_4 < ? super vt_1 > vr_5 ) { return new vr_1 <> ( vr_3 , vr_5 ) ; MST[ConstructorCallMutator]MSP[N] } @Override protected vr_2 < vt_1 > fn_2 () {
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; return new vr_1 <> ( vr_11 , vr_5 ) ; MST[NullReturnValsMutator]MSP[S] }
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; MST[NullReturnValsMutator]MSP[S] }
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; return new vr_1 <> ( vr_11 , vr_5 ) ; MST[ReturnValsMutator]MSP[S] }
return new vr_1 <> ( vr_9 , vr_5 ) ; MST[ConstructorCallMutator]MSP[S] } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; }
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; MST[ReturnValsMutator]MSP[S] }
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final vr_2 < vt_1 > vr_3 , final vr_4 < ? super vt_1 > vr_5 ) { return new vr_1 <> ( vr_3 , vr_5 ) ; MST[NullReturnValsMutator]MSP[N] } @Override protected vr_2 < vt_1 > fn_2 () {
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; MST[NonVoidMethodCallMutator]MSP[S] return new vr_1 <> ( vr_10 , vr_5 ) ; }
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; MST[NonVoidMethodCallMutator]MSP[S] return new vr_1 <> ( vr_10 , vr_5 ) ; }
return ( vr_2 < vt_1 > ) super . fn_2 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; return new vr_1 <> ( vr_11 , vr_5 ) ; MST[ConstructorCallMutator]MSP[S] }
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override
public vt_1 fn_5 () { return fn_2 () . fn_5 () ; } @Override public vr_2 < vt_1 > fn_6 ( final vt_1 vr_7 , final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_9 = fn_2 () . fn_6 ( vr_7 , vr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[N]
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final vr_2 < vt_1 > vr_3 , final vr_4 < ? super vt_1 > vr_5 ) { return new vr_1 <> ( vr_3 , vr_5 ) ; MST[ReturnValsMutator]MSP[N] } @Override protected vr_2 < vt_1 > fn_2 () {
return new vr_1 <> ( vr_9 , vr_5 ) ; MST[ReturnValsMutator]MSP[S] } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; }
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; MST[ConstructorCallMutator]MSP[S] }
return new vr_1 <> ( vr_9 , vr_5 ) ; MST[NullReturnValsMutator]MSP[S] } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; return new vr_1 <> ( vr_10 , vr_5 ) ; }
return ( vr_2 < vt_1 > ) super . fn_2 () ; MST[ReturnValsMutator]MSP[N] } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; MST[ReturnValsMutator]MSP[N] } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; MST[experimental.NakedReceiverMutator]MSP[N] return new vr_1 <> ( vr_11 , vr_5 ) ; }
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; MST[NullReturnValsMutator]MSP[S] } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
public vt_1 fn_5 () { return fn_2 () . fn_5 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public vr_2 < vt_1 > fn_6 ( final vt_1 vr_7 , final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_9 = fn_2 () . fn_6 ( vr_7 , vr_8 ) ;
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; MST[NonVoidMethodCallMutator]MSP[S] return new vr_1 <> ( vr_11 , vr_5 ) ; }
return ( vr_2 < vt_1 > ) super . fn_2 () ; MST[NullReturnValsMutator]MSP[N] } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; } @Override
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; MST[ReturnValsMutator]MSP[S] } @Override
public vt_1 fn_5 () { return fn_2 () . fn_5 () ; MST[NonVoidMethodCallMutator]MSP[S] } @Override public vr_2 < vt_1 > fn_6 ( final vt_1 vr_7 , final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_9 = fn_2 () . fn_6 ( vr_7 , vr_8 ) ;
public vt_1 fn_5 () { return fn_2 () . fn_5 () ; } @Override public vr_2 < vt_1 > fn_6 ( final vt_1 vr_7 , final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_9 = fn_2 () . fn_6 ( vr_7 , vr_8 ) ; MST[NonVoidMethodCallMutator]MSP[S]
return new vr_1 <> ( vr_9 , vr_5 ) ; } @Override public vr_2 < vt_1 > fn_7 ( final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_10 = fn_2 () . fn_7 ( vr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[N] return new vr_1 <> ( vr_10 , vr_5 ) ; }
@Override public vr_2 < vt_1 > fn_8 ( final vt_1 vr_7 ) { final vr_2 < vt_1 > vr_11 = fn_2 () . fn_8 ( vr_7 ) ; MST[NonVoidMethodCallMutator]MSP[S] return new vr_1 <> ( vr_11 , vr_5 ) ; }
return ( vr_2 < vt_1 > ) super . fn_2 () ; } @Override public vr_6 < ? super vt_1 > fn_3 () { return fn_2 () . fn_3 () ; } @Override public vt_1 fn_4 () { return fn_2 () . fn_4 () ; MST[NullReturnValsMutator]MSP[S] } @Override
public vt_1 fn_5 () { return fn_2 () . fn_5 () ; } @Override public vr_2 < vt_1 > fn_6 ( final vt_1 vr_7 , final vt_1 vr_8 ) { final vr_2 < vt_1 > vr_9 = fn_2 () . fn_6 ( vr_7 , vr_8 ) ; MST[NonVoidMethodCallMutator]MSP[S]
