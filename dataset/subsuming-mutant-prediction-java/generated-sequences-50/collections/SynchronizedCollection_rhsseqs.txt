public static < vt_1 > vr_1 < vt_1 > fn_1 ( final Collection < vt_1 > vr_2 ) { return new vr_1 <> ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] } protected Collection < vt_2 > fn_2 () { return collection ; } @Override public boolean add ( final vt_2 object ) {
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; } } @Override
public < vt_1 > vt_1 [] toArray ( final vt_1 [] object ) { synchronized ( vl_1 ) { return fn_2 () . toArray ( object ) ; MST[NullReturnValsMutator]MSP[S] } } @Override public boolean remove ( final Object object ) { synchronized ( vl_1 ) {
public String toString () { synchronized ( vl_1 ) { return fn_2 () . toString () ; MST[ReturnValsMutator]MSP[N] } }
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; MST[ReturnValsMutator]MSP[S] } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; } } @Override
if ( object == this ) { return true ; MST[ReturnValsMutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; MST[BooleanTrueReturnValsMutator]MSP[N] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override
return fn_2 () . remove ( object ) ; } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; } } @Override
public < vt_1 > vt_1 [] toArray ( final vt_1 [] object ) { synchronized ( vl_1 ) { return fn_2 () . toArray ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean remove ( final Object object ) { synchronized ( vl_1 ) {
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; MST[ReturnValsMutator]MSP[N] } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; } } @Override
if ( object == this ) { return true ; MST[InlineConstantMutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; MST[ReturnValsMutator]MSP[N] } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
public String toString () { synchronized ( vl_1 ) { return fn_2 () . toString () ; MST[NonVoidMethodCallMutator]MSP[S] } }
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final Collection < vt_1 > vr_2 ) { return new vr_1 <> ( vr_2 ) ; MST[ConstructorCallMutator]MSP[N] } protected Collection < vt_2 > fn_2 () { return collection ; } @Override public boolean add ( final vt_2 object ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final Collection < vt_1 > vr_2 ) { return new vr_1 <> ( vr_2 ) ; } protected Collection < vt_2 > fn_2 () { return collection ; MST[ReturnValsMutator]MSP[N] } @Override public boolean add ( final vt_2 object ) {
if ( object == this ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR4Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_6 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_6 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean fn_7 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[NegateConditionalsMutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; MST[BooleanFalseReturnValsMutator]MSP[N] } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; MST[ReturnValsMutator]MSP[S] } } @Override
return fn_2 () . remove ( object ) ; MST[ReturnValsMutator]MSP[N] } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR6Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR3Mutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR3Mutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR6Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR2Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public < vt_1 > vt_1 [] toArray ( final vt_1 [] object ) { synchronized ( vl_1 ) { return fn_2 () . toArray ( object ) ; MST[ReturnValsMutator]MSP[S] } } @Override public boolean remove ( final Object object ) { synchronized ( vl_1 ) {
return fn_2 () . remove ( object ) ; } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; MST[ReturnValsMutator]MSP[N] } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; } } @Override
return fn_2 () . remove ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; } } @Override
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final Collection < vt_1 > vr_2 ) { return new vr_1 <> ( vr_2 ) ; MST[NullReturnValsMutator]MSP[N] } protected Collection < vt_2 > fn_2 () { return collection ; } @Override public boolean add ( final vt_2 object ) {
return fn_2 () . remove ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; } } @Override
if ( object == this ) { return true ; MST[rv.CRCR5Mutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; MST[ReturnValsMutator]MSP[N] } } @Override
if ( object == this ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
if ( object == this ) { MST[rv.ROR5Mutator]MSP[S] return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; MST[ReturnValsMutator]MSP[N] } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override
return fn_2 () . remove ( object ) ; } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } } @Override
return fn_2 () . remove ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[InlineConstantMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_6 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_6 ( vr_2 ) ; MST[ReturnValsMutator]MSP[S] } } @Override public boolean fn_7 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[InlineConstantMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR3Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[NegateConditionalsMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; MST[NullReturnValsMutator]MSP[N] } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; } } @Override
public boolean fn_6 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_6 ( vr_2 ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } } @Override public boolean fn_7 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) {
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; MST[ReturnValsMutator]MSP[N] } } @Override
public boolean fn_6 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_6 ( vr_2 ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override public boolean fn_7 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) {
return fn_2 () . fn_7 ( vr_2 ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
public < vt_1 > vt_1 [] toArray ( final vt_1 [] object ) { synchronized ( vl_1 ) { return fn_2 () . toArray ( object ) ; MST[ArgumentPropagationMutator]MSP[N] } } @Override public boolean remove ( final Object object ) { synchronized ( vl_1 ) {
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
public < vt_1 > vt_1 [] toArray ( final vt_1 [] object ) { synchronized ( vl_1 ) { return fn_2 () . toArray ( object ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public boolean remove ( final Object object ) { synchronized ( vl_1 ) {
return fn_2 () . remove ( object ) ; } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; MST[BooleanFalseReturnValsMutator]MSP[S] } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
if ( object == this ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; MST[PrimitiveReturnsMutator]MSP[N] } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; MST[NullReturnValsMutator]MSP[N] } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; MST[PrimitiveReturnsMutator]MSP[N] } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
public String toString () { synchronized ( vl_1 ) { return fn_2 () . toString () ; MST[EmptyObjectReturnValsMutator]MSP[N] } }
if ( object == this ) { MST[NegateConditionalsMutator]MSP[S] return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR5Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; MST[ReturnValsMutator]MSP[N] } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; MST[ReturnValsMutator]MSP[N] } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
public boolean fn_6 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_6 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean fn_7 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR1Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR2Mutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR4Mutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR5Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
return fn_2 () . remove ( object ) ; } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override
public void clear () { synchronized ( vl_1 ) { fn_2 () . clear () ; MST[VoidMethodCallMutator]MSP[N] } } @Override public boolean contains ( final Object object ) { synchronized ( vl_1 ) { return fn_2 () . contains ( object ) ; } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; } } @Override
if ( object == this ) { return true ; MST[rv.CRCR6Mutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; MST[rv.CRCR2Mutator]MSP[S] } return object == this || fn_2 () . equals ( object ) ; } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public Iterator < vt_2 > iterator () { return fn_2 () . iterator () ; } @Override public Object [] toArray () { synchronized ( vl_1 ) { return fn_2 () . toArray () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
return fn_2 () . fn_7 ( vr_2 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public int size () { synchronized ( vl_1 ) { return fn_2 () . size () ; } } @Override public boolean equals ( final Object object ) { synchronized ( vl_1 ) {
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[ReturnValsMutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public String toString () { synchronized ( vl_1 ) { return fn_2 () . toString () ; MST[NonVoidMethodCallMutator]MSP[N] } }
return fn_2 () . remove ( object ) ; MST[NonVoidMethodCallMutator]MSP[S] } } @Override public boolean fn_5 ( final vr_3 < ? super vt_2 > vr_4 ) { synchronized ( vl_1 ) { return fn_2 () . fn_5 ( vr_4 ) ; } } @Override
synchronized ( vl_1 ) { return fn_2 () . add ( object ) ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override public boolean fn_3 ( final Collection < ? extends vt_2 > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_3 ( vr_2 ) ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; MST[BooleanTrueReturnValsMutator]MSP[S] } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; } } @Override
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; MST[NonVoidMethodCallMutator]MSP[N] } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.ROR5Mutator]MSP[N] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR1Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
if ( object == this ) { return true ; } return object == this || fn_2 () . equals ( object ) ; MST[rv.CRCR5Mutator]MSP[S] } } @Override public int fn_8 () { synchronized ( vl_1 ) { return fn_2 () . fn_8 () ; } } @Override
public static < vt_1 > vr_1 < vt_1 > fn_1 ( final Collection < vt_1 > vr_2 ) { return new vr_1 <> ( vr_2 ) ; } protected Collection < vt_2 > fn_2 () { return collection ; MST[EmptyObjectReturnValsMutator]MSP[N] } @Override public boolean add ( final vt_2 object ) {
public boolean fn_4 ( final Collection < ? > vr_2 ) { synchronized ( vl_1 ) { return fn_2 () . fn_4 ( vr_2 ) ; } } @Override public boolean isEmpty () { synchronized ( vl_1 ) { return fn_2 () . isEmpty () ; MST[BooleanTrueReturnValsMutator]MSP[N] } } @Override
