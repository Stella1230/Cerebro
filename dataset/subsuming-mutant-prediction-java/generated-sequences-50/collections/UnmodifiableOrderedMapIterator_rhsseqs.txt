public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[N] @SuppressWarnings ( lr_2 )
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; MST[NullReturnValsMutator]MSP[N] } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; MST[ReturnValsMutator]MSP[N] } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] @SuppressWarnings ( lr_2 )
} @Override public vt_2 fn_6 () { return iterator . fn_6 () ; MST[NullReturnValsMutator]MSP[S] } @Override public vt_2 fn_7 ( final vt_2 vr_6 ) { throw new fn_8 ( lr_3 ) ; } @Override public void remove () { throw new fn_8 ( lr_4 ) ; }
} @Override public vt_2 fn_6 () { return iterator . fn_6 () ; MST[ReturnValsMutator]MSP[S] } @Override public vt_2 fn_7 ( final vt_2 vr_6 ) { throw new fn_8 ( lr_3 ) ; } @Override public void remove () { throw new fn_8 ( lr_4 ) ; }
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[N] } @Override
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; MST[ConstructorCallMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; MST[ArgumentPropagationMutator]MSP[S] if ( iterator instanceof vl_1 ) { @SuppressWarnings ( lr_2 )
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; MST[ReturnValsMutator]MSP[S] } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[S] @SuppressWarnings ( lr_2 )
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( iterator instanceof vl_1 ) { @SuppressWarnings ( lr_2 )
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[N] @SuppressWarnings ( lr_2 )
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; MST[ReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[N] @SuppressWarnings ( lr_2 )
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; MST[ReturnValsMutator]MSP[N] } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
} @Override public vt_2 fn_6 () { return iterator . fn_6 () ; } @Override public vt_2 fn_7 ( final vt_2 vr_6 ) { throw new fn_8 ( lr_3 ) ; MST[ConstructorCallMutator]MSP[S] } @Override public void remove () { throw new fn_8 ( lr_4 ) ; }
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; MST[NullReturnValsMutator]MSP[S] } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[ReturnValsMutator]MSP[N] } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public static < vt_1 , vt_2 > vr_1 < vt_1 , vt_2 > fn_1 ( final vr_1 < vt_1 , ? extends vt_2 > iterator ) { vr_2 . vr_3 ( iterator , lr_1 ) ; if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] @SuppressWarnings ( lr_2 )
final vr_1 < vt_1 , vt_2 > vr_4 = ( vr_1 < vt_1 , vt_2 > ) iterator ; return vr_4 ; } return new vr_5 <> ( iterator ) ; } @Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; MST[BooleanFalseReturnValsMutator]MSP[N] } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; MST[ReturnValsMutator]MSP[S]
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; MST[NullReturnValsMutator]MSP[S]
public vt_1 fn_2 () { return iterator . fn_2 () ; MST[NullReturnValsMutator]MSP[N] } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; MST[BooleanTrueReturnValsMutator]MSP[N] } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ; MST[NonVoidMethodCallMutator]MSP[N]
} @Override public vt_2 fn_6 () { return iterator . fn_6 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vt_2 fn_7 ( final vt_2 vr_6 ) { throw new fn_8 ( lr_3 ) ; } @Override public void remove () { throw new fn_8 ( lr_4 ) ; }
public vt_1 fn_2 () { return iterator . fn_2 () ; } @Override public boolean fn_3 () { return iterator . fn_3 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vt_1 fn_4 () { return iterator . fn_4 () ; } @Override public vt_1 fn_5 () { return iterator . fn_5 () ;
} @Override public vt_2 fn_6 () { return iterator . fn_6 () ; } @Override public vt_2 fn_7 ( final vt_2 vr_6 ) { throw new fn_8 ( lr_3 ) ; } @Override public void remove () { throw new fn_8 ( lr_4 ) ; MST[ConstructorCallMutator]MSP[S] }
