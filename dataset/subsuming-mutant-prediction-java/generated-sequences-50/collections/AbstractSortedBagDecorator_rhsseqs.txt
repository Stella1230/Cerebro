@Override protected vr_1 < vt_1 > fn_1 () { return ( vr_1 < vt_1 > ) super . fn_1 () ; MST[ReturnValsMutator]MSP[N] } @Override public vt_1 fn_2 () { return fn_1 () . fn_2 () ; } @Override public vt_1 fn_3 () { return fn_1 () . fn_3 () ; }
@Override public vr_2 < ? super vt_1 > fn_4 () { return fn_1 () . fn_4 () ; MST[NullReturnValsMutator]MSP[N] }
@Override public vr_2 < ? super vt_1 > fn_4 () { return fn_1 () . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[S] }
@Override public vr_2 < ? super vt_1 > fn_4 () { return fn_1 () . fn_4 () ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public vr_2 < ? super vt_1 > fn_4 () { return fn_1 () . fn_4 () ; MST[ReturnValsMutator]MSP[S] }
@Override protected vr_1 < vt_1 > fn_1 () { return ( vr_1 < vt_1 > ) super . fn_1 () ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public vt_1 fn_2 () { return fn_1 () . fn_2 () ; } @Override public vt_1 fn_3 () { return fn_1 () . fn_3 () ; }
@Override protected vr_1 < vt_1 > fn_1 () { return ( vr_1 < vt_1 > ) super . fn_1 () ; MST[NullReturnValsMutator]MSP[N] } @Override public vt_1 fn_2 () { return fn_1 () . fn_2 () ; } @Override public vt_1 fn_3 () { return fn_1 () . fn_3 () ; }
