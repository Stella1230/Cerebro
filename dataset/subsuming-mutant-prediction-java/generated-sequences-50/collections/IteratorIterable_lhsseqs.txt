@Override public boolean hasNext () { return iterator . hasNext () ; MST[NonVoidMethodCallMutator]MSP[] } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; MST[NullReturnValsMutator]MSP[] } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanFalseReturnValsMutator]MSP[] } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override MST[experimental.MemberVariableMutator]MSP[] public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override public boolean hasNext () { return iterator . hasNext () ; MST[ReturnValsMutator]MSP[] } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override public boolean hasNext () { return iterator . hasNext () ; MST[BooleanTrueReturnValsMutator]MSP[] } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; MST[ReturnValsMutator]MSP[] } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
if ( iterator instanceof vl_1 ) { ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; MST[ReturnValsMutator]MSP[] }
@Override MST[ReturnValsMutator]MSP[] public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[NegateConditionalsMutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; MST[NullReturnValsMutator]MSP[] }
if ( iterator instanceof vl_1 ) { ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; MST[VoidMethodCallMutator]MSP[] } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[rv.ROR5Mutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[rv.ROR4Mutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[rv.ROR2Mutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[rv.ROR1Mutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[rv.ROR3Mutator]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
if ( iterator instanceof vl_1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ( ( vl_1 < ? extends tp_1 > ) iterator ) . fn_2 () ; } return vl_2 ; }
@Override MST[NullReturnValsMutator]MSP[] public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
@Override MST[ConstructorCallMutator]MSP[] public boolean hasNext () { return iterator . hasNext () ; } @Override public tp_1 fn_1 () { return iterator . fn_1 () ; } @Override public void remove () { iterator . remove () ; } @Override public Iterator < tp_1 > iterator () {
