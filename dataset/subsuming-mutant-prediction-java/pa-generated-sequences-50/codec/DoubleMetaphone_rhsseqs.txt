if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.ROR1Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR3Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[NegateConditionalsMutator]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[InlineConstantMutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.AOD1Mutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.AOR3Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.UOI2Mutator]MSP[S]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.ROR4Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.ROR1Mutator]MSP[S] }
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.UOI1Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[NegateConditionalsMutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ; MST[rv.CRCR6Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'H' :
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.CRCR3Mutator]MSP[N] return false ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { MST[rv.ROR1Mutator]MSP[N] return false ;
if ( index == value . length () - 3 && MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else { result . append ( 'S' ) ; MST[rv.CRCR5Mutator]MSP[N] } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR1Mutator]MSP[N] final boolean slavoGermanic ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } return index ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR1Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else { result . append ( 'X' ) ; } index += 2 ; MST[IncrementsMutator]MSP[N] } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; MST[InlineConstantMutator]MSP[N] index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; break; case '\u00C7' :
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.AOD1Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.AOR3Mutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.ABSMutator]MSP[S]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.UOI3Mutator]MSP[S] index += 3 ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' ) ;
for ( final String element : criteria ) { MST[rv.UOI1Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.UOI3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } return index ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.AOD2Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[InlineConstantMutator]MSP[N]
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ROR4Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR3Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOD1Mutator]MSP[S] index = handleGH ( value , result , index ) ;
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { MST[rv.UOI4Mutator]MSP[N] result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'S' ) ; index ++ ; } else {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ABSMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR3Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'H' ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( 'S' ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.ROR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; MST[rv.CRCR3Mutator]MSP[N] } index += 2 ; } else {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; MST[rv.CRCR3Mutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; MST[rv.CRCR3Mutator]MSP[N] index += 2 ; } else {
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ; MST[InlineConstantMutator]MSP[N]
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'Q' : result . append ( 'K' ) ;
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.ROR5Mutator]MSP[N]
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR3Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR2Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] } return index ; }
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[rv.ABSMutator]MSP[N]
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; MST[InlineConstantMutator]MSP[N] index ++ ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
return doubleMetaphone ( value ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { MST[NonVoidMethodCallMutator]MSP[S] result . append ( 'J' ) ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[InlineConstantMutator]MSP[S] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.ROR4Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.UOI3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] break; case '\u00C7' :
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] } index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[InlineConstantMutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR3Mutator]MSP[N]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR6Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR2Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR4Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . append ( 'S' , 'X' ) ; } else {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[S] } return index ; }
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.ROR5Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] result . append ( 'K' ) ; return index + 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] break;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] } return index ; }
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.AOD2Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { MST[rv.ROR1Mutator]MSP[N] return false ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[S] index = handleGH ( value , result , index ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'S' ) ;
return handleCC ( value , result , index ) ; MST[PrimitiveReturnsMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR5Mutator]MSP[N] final boolean slavoGermanic ) {
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[ConditionalsBoundaryMutator]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[rv.ABSMutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR3Mutator]MSP[S] index = handleGH ( value , result , index ) ;
result . append ( 'X' ) ; index += 3 ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; index += 3 ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[S] } return index ; }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR5Mutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR5Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI1Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; MST[rv.UOI2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_4 ) &&
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.UOI2Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { MST[rv.ROR4Mutator]MSP[S] if ( isVowel ( charAt ( value , index + 1 ) ) ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.ROR2Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR1Mutator]MSP[S] } index += 3 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.UOI2Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR6Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR1Mutator]MSP[N] final boolean slavoGermanic ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.AOR2Mutator]MSP[S]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) { MST[rv.ROR5Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N] }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.ABSMutator]MSP[S] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; }
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[InlineConstantMutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[S] index = handleGH ( value , result , index ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR3Mutator]MSP[N]
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI3Mutator]MSP[N]
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] index += 2 ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR2Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI2Mutator]MSP[S] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[InlineConstantMutator]MSP[S]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[NegateConditionalsMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[NegateConditionalsMutator]MSP[S]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[S] break;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.UOI2Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.ABSMutator]MSP[N]
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; }
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' ) ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.UOI4Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ;
result . append ( lr_36 ) ; } index = index + 2 ; MST[rv.CRCR1Mutator]MSP[S] } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { result . append ( lr_40 , lr_41 ) ; index += 2 ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR4Mutator]MSP[S]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR1Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR5Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } return index ; }
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
if ( charAt ( value , index + 1 ) == 'J' ) { index += 2 ; } else { index ++ ; } } return index ; MST[rv.UOI3Mutator]MSP[N] } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.ROR1Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[NonVoidMethodCallMutator]MSP[S]
if ( input . length () == 0 ) { return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; MST[experimental.NakedReceiverMutator]MSP[N] } protected char charAt ( final String value , final int index ) {
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_37 , lr_36 ) ; } else {
index ++ ; result . append ( 'L' ) ; } return index ; MST[ReturnValsMutator]MSP[N] } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR5Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( slavoGermanic ) {
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[VoidMethodCallMutator]MSP[S] } index += 3 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.AOR1Mutator]MSP[N]
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.SwitchMutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[NegateConditionalsMutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR2Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.ROR2Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( index < 0 || index >= value . length () ) { MST[rv.ROR3Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[S]
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.ROR5Mutator]MSP[S]
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR2Mutator]MSP[S] } } else {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.AOR2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ; MST[rv.CRCR4Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR6Mutator]MSP[N]
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.ROR3Mutator]MSP[N]
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR5Mutator]MSP[S] } index += 2 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'J' , ' ' ) ;
if ( charAt ( value , index + 1 ) == 'J' ) { MST[rv.UOI3Mutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index = handleS ( value , result , index , slavoGermanic ) ; break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ; MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ; MST[ReturnValsMutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; MST[rv.CRCR4Mutator]MSP[N] } else { result . append ( 'R' ) ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR2Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'J' ) ; }
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { MST[rv.ROR3Mutator]MSP[N] throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; } @Override public String encode ( final String value ) {
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; MST[rv.UOI1Mutator]MSP[N] }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.UOI1Mutator]MSP[S]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[NonVoidMethodCallMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.AOR3Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[MathMutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[S]
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR1Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[InlineConstantMutator]MSP[N]
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR2Mutator]MSP[S] } index += 3 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR4Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.ROR3Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR4Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
if ( value . startsWith ( element ) ) { result = true ; MST[rv.CRCR5Mutator]MSP[N] break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.CRCR2Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
if ( index == value . length () - 3 && MST[NonVoidMethodCallMutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.UOI2Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.UOI3Mutator]MSP[S] result . append ( 'K' ) ; index += 2 ;
if ( index == value . length () - 3 && MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } return index ; }
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
if ( index == value . length () - 3 && MST[rv.UOI1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N]
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI4Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR5Mutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } return index ; }
for ( final String element : criteria ) { MST[rv.UOI4Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[NegateConditionalsMutator]MSP[S] final boolean slavoGermanic ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ; MST[rv.CRCR4Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[NegateConditionalsMutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , index , 4 , lr_114 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR6Mutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; }
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.UOI4Mutator]MSP[N]
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[rv.ROR3Mutator]MSP[S] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR1Mutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.UOI1Mutator]MSP[S]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
result . append ( 'A' , 'F' ) ; MST[rv.CRCR5Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR5Mutator]MSP[S] if ( slavoGermanic ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR2Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.UOI1Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.ROR5Mutator]MSP[N] }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.ABSMutator]MSP[N] break; case 'H' :
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[rv.UOI3Mutator]MSP[N] }
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI4Mutator]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { index += 3 ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.ROR1Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
if ( index == value . length () - 3 && MST[rv.ROR5Mutator]MSP[S] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[PrimitiveReturnsMutator]MSP[N] }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; MST[VoidMethodCallMutator]MSP[N] } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR4Mutator]MSP[N]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[S] } return index ; }
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
index = handleX ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[NegateConditionalsMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index , 4 , lr_114 ) ) { MST[InlineConstantMutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR1Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] break; case '\u00C7' :
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[PrimitiveReturnsMutator]MSP[N]
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; MST[rv.CRCR5Mutator]MSP[N] index += 2 ; } else { index ++ ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR1Mutator]MSP[N] index += 3 ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.ABSMutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR6Mutator]MSP[N] } index += 2 ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case '\u00C7' :
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.CRCR5Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR2Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR1Mutator]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR4Mutator]MSP[N] index += 3 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( slavoGermanic ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[InlineConstantMutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOR4Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[N]
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR2Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] } return index ; }
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.ROR5Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.AOR1Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' ) ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.AOR1Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOD2Mutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR6Mutator]MSP[N]
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR5Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.CRCR3Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.AOD1Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.UOI4Mutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR4Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR1Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.AOR2Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR2Mutator]MSP[S]
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ABSMutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR1Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR2Mutator]MSP[N]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR2Mutator]MSP[N]
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; MST[InlineConstantMutator]MSP[N] } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'H' ) ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR2Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOD2Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.ROR1Mutator]MSP[N] index = handleGH ( value , result , index ) ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case '\u00C7' :
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.AOR1Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; MST[InlineConstantMutator]MSP[S] } else { index ++ ; result . append ( 'K' ) ; } return index ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[NegateConditionalsMutator]MSP[S]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[NegateConditionalsMutator]MSP[N]
result . append ( 'X' ) ; MST[rv.CRCR3Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[InlineConstantMutator]MSP[N]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] } return index ; }
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[MathMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.AOR1Mutator]MSP[N] return false ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[rv.ROR5Mutator]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
result . append ( 'K' ) ; } index += 2 ; } return index ; MST[rv.UOI1Mutator]MSP[N] } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.UOI3Mutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[InlineConstantMutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.ROR5Mutator]MSP[S]
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N]
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; MST[rv.ABSMutator]MSP[N] break; case 'M' : result . append ( 'M' ) ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR5Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; } public int getMaxCodeLen () { return this . maxCodeLen ; MST[rv.ABSMutator]MSP[N] } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.UOI4Mutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR4Mutator]MSP[N] } else {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.ROR2Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.UOI2Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[InlineConstantMutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR1Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } return contains ( value , index - 1 , 3 , lr_136 ) &&
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.ROR5Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR6Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR5Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'F' ) ; MST[InlineConstantMutator]MSP[S] index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
case '\u00D1' : result . append ( 'N' ) ; MST[InlineConstantMutator]MSP[S] index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; break; case 'Q' : result . append ( 'K' ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR5Mutator]MSP[N]
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.ROR2Mutator]MSP[S] result . append ( lr_37 , lr_36 ) ; } else {
result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] } index += 2 ; } return index ; } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[NonVoidMethodCallMutator]MSP[S] } return index ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] } return index ; }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
result . append ( 'A' , 'F' ) ; MST[rv.CRCR6Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } return index ; }
index = handleS ( value , result , index , slavoGermanic ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ;
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR5Mutator]MSP[S]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.AOR4Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] break; case '\u00C7' :
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.CRCR1Mutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; MST[rv.UOI2Mutator]MSP[N] }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.CRCR6Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
index ++ ; result . append ( 'L' ) ; MST[rv.CRCR6Mutator]MSP[N] } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.UOI4Mutator]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.ROR2Mutator]MSP[S] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.ROR1Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[S] break;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR3Mutator]MSP[N]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[S] } return index ; }
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.UOI4Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI3Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( charAt ( value , index + 1 ) == 'J' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; }
for ( final String element : criteria ) { MST[rv.UOI3Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.UOI4Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR2Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[ConditionalsBoundaryMutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR2Mutator]MSP[S] } index += 2 ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; MST[VoidMethodCallMutator]MSP[N] } else { result . append ( 'K' ) ; } index += 2 ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'M' : result . append ( 'M' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[InlineConstantMutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.ABSMutator]MSP[S]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.ROR1Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) {
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'K' ) ;
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[NonVoidMethodCallMutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; break; case 'Q' : result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.UOI1Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[S] break; case '\u00C7' :
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOR2Mutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR2Mutator]MSP[S]
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[S] index += 2 ; } return index ; }
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . append ( 'K' ) ; return index + 2 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.UOI4Mutator]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.AOD2Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
result . append ( 'X' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; index += 3 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[NonVoidMethodCallMutator]MSP[S] result . append ( 'K' ) ; return index + 2 ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR1Mutator]MSP[S] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR1Mutator]MSP[N]
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[NegateConditionalsMutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.ROR2Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
if ( charAt ( value , index + 1 ) == 'M' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
for ( final String element : criteria ) { if ( target . equals ( element ) ) { MST[rv.ROR3Mutator]MSP[N] result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.AOR3Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
if ( index == value . length () - 3 && MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
result . append ( 'X' ) ; } return index + 2 ; MST[rv.AOD1Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { MST[NegateConditionalsMutator]MSP[S] result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.UOI3Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR6Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.ROR4Mutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ABSMutator]MSP[S] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || contains ( value , 0 , 3 , lr_52 ) ) { MST[rv.ROR1Mutator]MSP[N] result . appendAlternate ( 'F' ) ; index ++ ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( contains ( value , index + 1 , 1 , lr_23 , lr_22 , lr_32 ) || contains ( value , index - 1 , 4 , lr_48 , lr_49 ) ) { MST[NegateConditionalsMutator]MSP[N]
} else if ( index == 0 ) { MST[rv.UOI2Mutator]MSP[S] if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
result . append ( 'X' ) ; } return index + 2 ; MST[rv.CRCR4Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR5Mutator]MSP[S] } else {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index - 1 , 4 , lr_133 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR2Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
index = handleS ( value , result , index , slavoGermanic ) ; break; case 'T' : index = handleT ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'V' : result . append ( 'F' ) ;
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR1Mutator]MSP[N] } } else {
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
result . append ( 'X' ) ; } return index + 2 ; MST[rv.AOR3Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.AOD1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR3Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; index += 3 ; MST[IncrementsMutator]MSP[N] } else { result . append ( lr_33 ) ; index += 2 ; }
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR2Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' ) ;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; MST[InlineConstantMutator]MSP[N] index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ROR3Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[rv.UOI4Mutator]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
index = handleH ( value , result , index ) ; break; case 'J' : index = handleJ ( value , result , index , slavoGermanic ) ; break; case 'K' : result . append ( 'K' ) ; MST[InlineConstantMutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.ROR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.AOD1Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( input . length () == 0 ) { return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; MST[NonVoidMethodCallMutator]MSP[N] } protected char charAt ( final String value , final int index ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( lr_62 , lr_105 ) ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] index += 2 ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.CRCR6Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR6Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.ROR2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; MST[rv.CRCR4Mutator]MSP[N] }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.ROR2Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI2Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.ROR1Mutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.ROR1Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[NegateConditionalsMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.UOI3Mutator]MSP[N]
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[InlineConstantMutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR3Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ; MST[VoidMethodCallMutator]MSP[S]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.UOI3Mutator]MSP[S] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
if ( charAt ( value , index + 1 ) == 'J' ) { MST[rv.ABSMutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; MST[rv.CRCR4Mutator]MSP[N] index ++ ; } return index ; }
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; MST[InlineConstantMutator]MSP[S] index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
index = handleS ( value , result , index , slavoGermanic ) ; break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ; MST[rv.CRCR4Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index ++ ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.ROR2Mutator]MSP[N] break; case '\u00C7' :
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.AOR1Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.UOI1Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.ROR4Mutator]MSP[S] }
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
if ( charAt ( value , index + 1 ) == 'J' ) { index += 2 ; } else { index ++ ; } } return index ; MST[rv.ABSMutator]MSP[N] } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'S' ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI4Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.ROR1Mutator]MSP[S] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[MathMutator]MSP[S] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[NegateConditionalsMutator]MSP[N] return false ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.ROR5Mutator]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.AOR1Mutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR3Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[S] index += 2 ; } return index ; }
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.ROR4Mutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; }
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.AOD1Mutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.AOR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ; MST[rv.CRCR3Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.ROR3Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] } index += 2 ; } return index ; } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[S] break; case '\u00C7' :
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR3Mutator]MSP[S] } index += 2 ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[InlineConstantMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; MST[rv.ABSMutator]MSP[N] }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.ABSMutator]MSP[N]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR6Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR3Mutator]MSP[N]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[NegateConditionalsMutator]MSP[S] } private boolean isSlavoGermanic ( final String value ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR6Mutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.UOI3Mutator]MSP[S] break; case 'H' :
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( charAt ( value , index + 1 ) == 'J' ) { index += 2 ; } else { index ++ ; } } return index ; MST[rv.UOI2Mutator]MSP[N] } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.ROR3Mutator]MSP[S]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR4Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[MathMutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[MathMutator]MSP[N]
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.AOR4Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.ROR4Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[InlineConstantMutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.AOR1Mutator]MSP[N]
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI4Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
public String doubleMetaphone ( final String value ) { MST[experimental.MemberVariableMutator]MSP[N] return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.CRCR3Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; MST[rv.CRCR4Mutator]MSP[N] } index += 2 ; } else {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; MST[rv.CRCR4Mutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; MST[rv.CRCR4Mutator]MSP[N] index += 2 ; } else {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[MathMutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[rv.UOI1Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.UOI2Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { MST[NonVoidMethodCallMutator]MSP[S] index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' &&
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.CRCR5Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ROR3Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; } return index ; MST[ReturnValsMutator]MSP[N] }
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[S] break;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOD2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[MathMutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; MST[rv.CRCR1Mutator]MSP[N] } else { result . append ( 'K' ) ; } index += 2 ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR1Mutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI3Mutator]MSP[N]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( charAt ( value , index + 1 ) == 'J' ) { MST[InlineConstantMutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
result . append ( 'F' ) ; MST[InlineConstantMutator]MSP[N] index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' ) ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR5Mutator]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( index < 0 || index >= value . length () ) { return Character . MIN_VALUE ; } return value . charAt ( index ) ; MST[rv.UOI1Mutator]MSP[N] } protected static boolean contains ( final String value , final int start , final int length ,
for ( final String element : criteria ) { MST[rv.UOI3Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.AOR1Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else { result . append ( 'T' ) ; MST[InlineConstantMutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.AOR4Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[MathMutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR4Mutator]MSP[N]
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR6Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
if ( index == value . length () - 3 && MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.UOI1Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else { result . append ( 'J' , 'H' ) ; } index ++ ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOD2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[NegateConditionalsMutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[NonVoidMethodCallMutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'J' ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.UOI1Mutator]MSP[S]
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; } index += 3 ; MST[IncrementsMutator]MSP[N]
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.UOI4Mutator]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.CRCR2Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR2Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.CRCR1Mutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.UOI1Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ; MST[experimental.NakedReceiverMutator]MSP[S]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.ROR1Mutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[InlineConstantMutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR6Mutator]MSP[S] if ( slavoGermanic ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR4Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[rv.UOI3Mutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' ) ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[S] break; case '\u00C7' :
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.CRCR2Mutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR1Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( index == 0 ) { MST[rv.ABSMutator]MSP[N] if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOR3Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.AOD2Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; } public int getMaxCodeLen () { return this . maxCodeLen ; MST[rv.UOI2Mutator]MSP[N] } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' &&
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR5Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.AOD1Mutator]MSP[N]
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.UOI2Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; MST[rv.UOI2Mutator]MSP[N] } private boolean conditionC0 ( final String value , final int index ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR2Mutator]MSP[N]
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.ROR5Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.UOI4Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[InlineConstantMutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.ABSMutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ; MST[rv.CRCR1Mutator]MSP[S]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; MST[rv.CRCR5Mutator]MSP[N] } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.CRCR2Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR5Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'H' :
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
if ( ! ( ( index == value . length () - 1 ) && MST[InlineConstantMutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[S] } return index ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR2Mutator]MSP[N]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR5Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.ROR2Mutator]MSP[S]
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'A' ) ; } return index + 1 ; } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.UOI1Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'S' ) ;
if ( index == value . length () - 3 && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.UOI4Mutator]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.UOI4Mutator]MSP[S] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.ROR4Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] } index += 2 ;
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ; }
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; MST[rv.CRCR1Mutator]MSP[N] index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[InlineConstantMutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'J' , ' ' ) ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.CRCR6Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[NegateConditionalsMutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR4Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } return index ; }
if ( input . length () == 0 ) { MST[rv.ROR3Mutator]MSP[N] return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; } protected char charAt ( final String value , final int index ) {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR1Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[ArgumentPropagationMutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
result . append ( 'X' , 'S' ) ; MST[rv.CRCR1Mutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR2Mutator]MSP[N]
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR3Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.ABSMutator]MSP[N] break; case 'H' :
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR1Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { MST[rv.ROR4Mutator]MSP[N] throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; } @Override public String encode ( final String value ) {
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'K' ) ; index += 2 ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[InlineConstantMutator]MSP[S] }
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.CRCR5Mutator]MSP[S] result . append ( lr_62 , lr_105 ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR4Mutator]MSP[S] index = handleGH ( value , result , index ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR4Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.ROR1Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; MST[IncrementsMutator]MSP[N] } else { result . append ( 'K' ) ; index += 2 ; } return index ; }
if ( index < 0 || index >= value . length () ) { MST[rv.ROR4Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR5Mutator]MSP[S]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; MST[rv.CRCR5Mutator]MSP[N] } return contains ( value , index - 1 , 3 , lr_136 ) &&
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR3Mutator]MSP[S] } } else {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.ROR5Mutator]MSP[S]
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.ROR5Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR1Mutator]MSP[S] result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR1Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR2Mutator]MSP[S] } index += 3 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_4 ) &&
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.UOI1Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR5Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR1Mutator]MSP[N]
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR6Mutator]MSP[S] } index += 2 ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[NonVoidMethodCallMutator]MSP[S]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[NonVoidMethodCallMutator]MSP[S] }
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ; MST[rv.CRCR1Mutator]MSP[S]
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.AOR3Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOR3Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[VoidMethodCallMutator]MSP[N] } } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ABSMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.ABSMutator]MSP[N] result . appendAlternate ( 'S' ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR5Mutator]MSP[S]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[NonVoidMethodCallMutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR6Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOR4Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.UOI1Mutator]MSP[S] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR4Mutator]MSP[N]
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.UOI3Mutator]MSP[N]
for ( final String element : criteria ) { MST[rv.UOI2Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.UOI3Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI2Mutator]MSP[S] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.UOI4Mutator]MSP[S]
if ( charAt ( value , index + 1 ) == 'M' ) { MST[NonVoidMethodCallMutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.UOI1Mutator]MSP[S]
} else { result . append ( 'X' ) ; MST[rv.CRCR2Mutator]MSP[N] } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR2Mutator]MSP[N]
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[NegateConditionalsMutator]MSP[S] result . append ( 'S' ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'H' ) ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR3Mutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( ( index == 0 && contains ( value , index + 1 , 1 , lr_78 , lr_37 , lr_41 , lr_79 ) ) || contains ( value , index + 1 , 1 , lr_80 ) ) { MST[NegateConditionalsMutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR4Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[rv.ROR2Mutator]MSP[N] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.UOI3Mutator]MSP[N]
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[rv.UOI2Mutator]MSP[N] }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR1Mutator]MSP[N]
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { index += 3 ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[rv.CRCR2Mutator]MSP[N] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.ROR3Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR6Mutator]MSP[S]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.ROR5Mutator]MSP[S]
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.AOR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[InlineConstantMutator]MSP[N]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[InlineConstantMutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI2Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI3Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR1Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[rv.ABSMutator]MSP[N] }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR3Mutator]MSP[N]
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[experimental.NakedReceiverMutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.AOR1Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ; MST[rv.CRCR5Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR6Mutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } return index ; }
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.ROR2Mutator]MSP[S]
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[S]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR2Mutator]MSP[N]
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR2Mutator]MSP[N]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } return index ; }
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ; MST[InlineConstantMutator]MSP[S]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.ROR4Mutator]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR5Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[S] } return index ; }
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[MathMutator]MSP[N] result . appendAlternate ( 'S' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.AOR4Mutator]MSP[N]
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; break; case 'Q' : result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOR1Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { MST[rv.ROR5Mutator]MSP[N] result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; }
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR1Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR2Mutator]MSP[N] } } else {
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[NegateConditionalsMutator]MSP[N]
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'A' , 'F' ) ; MST[rv.CRCR6Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( index == value . length () - 3 && MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'H' ) ;
index = handleS ( value , result , index , slavoGermanic ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( slavoGermanic ) {
if ( index == value . length () - 3 && MST[rv.ROR4Mutator]MSP[S] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR1Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR1Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.CRCR5Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[ConditionalsBoundaryMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.ABSMutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.ROR1Mutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; MST[InlineConstantMutator]MSP[S] index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR6Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[MathMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.UOI2Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR3Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'K' ) ; return index + 2 ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.ROR2Mutator]MSP[S] result . append ( lr_62 , lr_105 ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) { MST[NonVoidMethodCallMutator]MSP[N]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.ROR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
result . append ( 'X' ) ; } return index + 2 ; MST[rv.AOR2Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
! contains ( value , index - 2 , 4 , lr_5 ) ) { MST[NegateConditionalsMutator]MSP[S] result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; MST[rv.CRCR6Mutator]MSP[S] } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) {
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { result . append ( 'J' ) ; MST[InlineConstantMutator]MSP[N] index += 2 ; } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.UOI2Mutator]MSP[S] result . append ( 'K' ) ; index += 2 ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'K' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; }
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[ReturnValsMutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
index = handleX ( value , result , index ) ; MST[rv.UOI2Mutator]MSP[N] break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
final boolean slavoGermanic = isSlavoGermanic ( value ) ; int index = isSilentStart ( value ) ? 1 : 0 ; MST[rv.CRCR6Mutator]MSP[N] final DoubleMetaphoneResult result = new DoubleMetaphoneResult ( this . getMaxCodeLen () ) ;
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.ROR4Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'S' , 'X' ) ; } else {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[MathMutator]MSP[N]
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case '\u00C7' :
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.ROR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ; } else { index ++ ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { result . appendAlternate ( 'S' ) ; MST[InlineConstantMutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR1Mutator]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR2Mutator]MSP[N] index += 3 ;
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.AOD2Mutator]MSP[S] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; MST[rv.CRCR5Mutator]MSP[N] }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ; }
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[MathMutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.ABSMutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; MST[rv.ABSMutator]MSP[N] } private boolean conditionC0 ( final String value , final int index ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . append ( 'J' ) ; }
if ( index == value . length () - 3 && MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI1Mutator]MSP[N]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; }
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ROR2Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.UOI3Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
public String doubleMetaphone ( final String value ) { return doubleMetaphone ( value , false ) ; MST[ReturnValsMutator]MSP[N] } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[S]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR3Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR3Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.ROR3Mutator]MSP[S] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.ROR3Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.CRCR6Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR5Mutator]MSP[N] index += 3 ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR3Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( slavoGermanic ) {
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.ROR3Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.ROR3Mutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) {
} else { result . append ( 'S' ) ; MST[rv.CRCR6Mutator]MSP[N] } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[InlineConstantMutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.AOR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; MST[InlineConstantMutator]MSP[S] index += 2 ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; MST[rv.ABSMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_4 ) &&
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.ABSMutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
contains ( value , index - 1 , 4 , lr_133 ) ) { return true ; MST[rv.CRCR4Mutator]MSP[N] } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[NegateConditionalsMutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.UOI1Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.UOI4Mutator]MSP[S] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[NegateConditionalsMutator]MSP[S]
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; MST[rv.CRCR1Mutator]MSP[N] } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.ROR3Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.UOI2Mutator]MSP[S] contains ( value , index - 2 , 2 , lr_64 ) &&
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[rv.ROR4Mutator]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
for ( final String element : criteria ) { if ( target . equals ( element ) ) { MST[rv.ROR2Mutator]MSP[N] result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] return index + 2 ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR5Mutator]MSP[S] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] } return index ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } return index ; }
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.UOI2Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[MathMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.AOD1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.AOR4Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.ABSMutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[InlineConstantMutator]MSP[N]
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'S' ) ; index ++ ; } else {
result . append ( 'X' ) ; } return index + 2 ; MST[rv.CRCR5Mutator]MSP[S] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; MST[VoidMethodCallMutator]MSP[N] index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; MST[rv.CRCR2Mutator]MSP[N] break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; MST[rv.ABSMutator]MSP[N] }
result . append ( 'X' ) ; MST[rv.CRCR4Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[InlineConstantMutator]MSP[N] index += 3 ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR4Mutator]MSP[N] final boolean slavoGermanic ) {
if ( index == value . length () - 3 && MST[rv.AOR1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR5Mutator]MSP[N] } else {
index = handleS ( value , result , index , slavoGermanic ) ; break; case 'T' : index = handleT ( value , result , index ) ; MST[rv.ABSMutator]MSP[N] break; case 'V' : result . append ( 'F' ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.ROR4Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR6Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) {
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR6Mutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[ReturnValsMutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.CRCR5Mutator]MSP[N]
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.UOI4Mutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[NegateConditionalsMutator]MSP[N] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR2Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR3Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[ConditionalsBoundaryMutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
return handleCC ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR6Mutator]MSP[S] index = handleGH ( value , result , index ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[ConditionalsBoundaryMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR4Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[InlineConstantMutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.UOI2Mutator]MSP[S]
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[S] break; case '\u00C7' :
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[MathMutator]MSP[N]
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
if ( conditionC0 ( value , index ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.UOI3Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[NonVoidMethodCallMutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; MST[rv.CRCR3Mutator]MSP[N] index += 2 ; } else { index ++ ;
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.CRCR2Mutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ; MST[rv.CRCR1Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR1Mutator]MSP[N]
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.ROR4Mutator]MSP[N] result . append ( lr_37 , lr_36 ) ; } else {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[NonVoidMethodCallMutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
if ( charAt ( value , index + 1 ) == 'J' ) { MST[NonVoidMethodCallMutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] break;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.CRCR3Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOR2Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR4Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.ABSMutator]MSP[S] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.ABSMutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[MathMutator]MSP[S] break;
} else if ( index == 0 ) { MST[rv.UOI1Mutator]MSP[S] if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.AOR3Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOD1Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { MST[NegateConditionalsMutator]MSP[N] index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; MST[rv.CRCR6Mutator]MSP[N] } return contains ( value , index - 1 , 3 , lr_136 ) &&
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.ROR3Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; }
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.ABSMutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.UOI3Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.ROR1Mutator]MSP[N]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[NegateConditionalsMutator]MSP[N]
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR4Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; MST[InlineConstantMutator]MSP[N] index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'M' : result . append ( 'M' ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR5Mutator]MSP[N] index += 3 ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.UOI2Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[InlineConstantMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.UOI1Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.UOI1Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { result . append ( 'A' ) ; MST[InlineConstantMutator]MSP[N] } return index + 1 ; } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[rv.UOI3Mutator]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR2Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOR2Mutator]MSP[N]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR2Mutator]MSP[S]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR6Mutator]MSP[S] } else {
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.ROR2Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR4Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[NonVoidMethodCallMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.ABSMutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) {
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.CRCR4Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ; MST[rv.CRCR1Mutator]MSP[S]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
result . append ( 'A' , 'F' ) ; MST[rv.CRCR3Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
result . append ( 'X' , 'S' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[MathMutator]MSP[N] return false ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ; MST[rv.CRCR1Mutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'S' ) ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[InlineConstantMutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; MST[rv.UOI1Mutator]MSP[N] } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { result . append ( lr_40 , lr_41 ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.AOD1Mutator]MSP[N]
result . append ( 'X' ) ; } return index + 2 ; MST[rv.AOD2Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
result . append ( lr_36 ) ; } index = index + 2 ; MST[rv.UOI4Mutator]MSP[S] } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
public String doubleMetaphone ( final String value ) { return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; MST[ArgumentPropagationMutator]MSP[N] if ( value == null ) { return null ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[InlineConstantMutator]MSP[N]
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
result . append ( 'J' , 'H' ) ; MST[rv.CRCR6Mutator]MSP[N] } else if ( index == value . length () - 1 ) { result . append ( 'J' , ' ' ) ;
result . append ( 'X' ) ; } return index + 2 ; MST[rv.CRCR3Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.ROR2Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'K' ) ; index += 2 ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.ROR5Mutator]MSP[S]
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; MST[rv.CRCR4Mutator]MSP[N] index += 2 ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.CRCR6Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR6Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR3Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[NegateConditionalsMutator]MSP[S] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR4Mutator]MSP[S] } } else {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.UOI3Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR2Mutator]MSP[N]
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR1Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.AOD1Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'S' ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD2Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; MST[IncrementsMutator]MSP[N] } else {
result . append ( 'X' ) ; } return index + 2 ; MST[rv.CRCR6Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOR3Mutator]MSP[N]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[NonVoidMethodCallMutator]MSP[N]
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.UOI3Mutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'J' ) ; }
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[S] break; case '\u00C7' :
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[MathMutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case '\u00C7' :
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.AOD1Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOD1Mutator]MSP[S]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.ABSMutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( slavoGermanic ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'K' ) ;
return doubleMetaphone ( value ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; MST[rv.CRCR3Mutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.UOI3Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR5Mutator]MSP[N]
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; break; case 'Q' : result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR1Mutator]MSP[N] }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR5Mutator]MSP[S]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR1Mutator]MSP[N] index = handleGH ( value , result , index ) ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( index == value . length () - 3 && MST[rv.AOR3Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[MathMutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
result . append ( 'S' , 'X' ) ; MST[rv.CRCR6Mutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) {
result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] } index += 2 ; } return index ; } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR1Mutator]MSP[S] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.ROR2Mutator]MSP[N] if ( slavoGermanic ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.ROR4Mutator]MSP[S]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
if ( index == value . length () - 3 && MST[rv.UOI2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR5Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( input . length () == 0 ) { MST[rv.ROR4Mutator]MSP[N] return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; } protected char charAt ( final String value , final int index ) {
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; MST[InlineConstantMutator]MSP[N] } else { result . append ( 'L' ) ; } index += 2 ; } else {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR6Mutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.AOR1Mutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.UOI4Mutator]MSP[S] break; case 'H' :
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] break;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[InlineConstantMutator]MSP[S] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; MST[rv.CRCR5Mutator]MSP[N] } else { result . append ( 'R' ) ; }
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] } return index ; }
index = handleS ( value , result , index , slavoGermanic ) ; MST[rv.UOI2Mutator]MSP[N] break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ;
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
if ( value . startsWith ( element ) ) { MST[rv.ROR5Mutator]MSP[N] result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[NegateConditionalsMutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR1Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.UOI3Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.ROR1Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.AOR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR3Mutator]MSP[S]
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR3Mutator]MSP[S]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.CRCR2Mutator]MSP[S]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.ROR3Mutator]MSP[N] break; case '\u00C7' :
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) { MST[rv.CRCR5Mutator]MSP[N]
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; MST[rv.CRCR6Mutator]MSP[N] } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.ROR1Mutator]MSP[S] result . append ( lr_37 , lr_36 ) ; } else {
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
} else if ( index == 0 ) { MST[rv.UOI4Mutator]MSP[S] if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.CRCR5Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR5Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR4Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.ROR1Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.CRCR6Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.ROR5Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR2Mutator]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR4Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
if ( index == value . length () - 3 && MST[InlineConstantMutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR1Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
result . append ( 'X' ) ; MST[rv.CRCR1Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} else if ( conditionCH0 ( value , index ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.ABSMutator]MSP[N]
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[InlineConstantMutator]MSP[N] index += 3 ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.ROR3Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI3Mutator]MSP[S] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; MST[InlineConstantMutator]MSP[N] }
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] final String target = value . substring ( start , start + length ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.UOI3Mutator]MSP[N]
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ; MST[InlineConstantMutator]MSP[S]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.ABSMutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[MathMutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; MST[experimental.RemoveIncrementsMutator]MSP[N] } return index ; }
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'K' , 'J' ) ; index += 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[NegateConditionalsMutator]MSP[S]
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.ROR3Mutator]MSP[N] }
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR2Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR2Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ; MST[rv.CRCR4Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.ROR2Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
for ( final String element : criteria ) { MST[rv.ABSMutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
} else if ( conditionCH0 ( value , index ) ) { MST[rv.UOI2Mutator]MSP[S] result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.CRCR6Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ROR1Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
} else if ( conditionCH0 ( value , index ) ) { MST[rv.ABSMutator]MSP[N] result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'S' ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
for ( final String element : criteria ) { MST[rv.UOI2Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.ROR4Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.CRCR1Mutator]MSP[N] return false ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.UOI2Mutator]MSP[N]
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[InlineConstantMutator]MSP[S]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR4Mutator]MSP[N] index = handleGH ( value , result , index ) ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ROR1Mutator]MSP[S] result . append ( 'S' ) ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.ABSMutator]MSP[N] result . append ( 'J' , 'A' ) ;
if ( index == value . length () - 3 && MST[MathMutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.ROR2Mutator]MSP[S] result . append ( lr_37 , lr_36 ) ; } else {
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.CRCR4Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR4Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR6Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; MST[rv.ROR1Mutator]MSP[N] }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR5Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR4Mutator]MSP[N]
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[NegateConditionalsMutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.ROR2Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.ROR3Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR1Mutator]MSP[S] result . append ( 'H' ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOD1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[rv.UOI4Mutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR6Mutator]MSP[N]
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR5Mutator]MSP[S]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI2Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; MST[rv.CRCR2Mutator]MSP[N] }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR3Mutator]MSP[S] } else {
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; MST[rv.CRCR2Mutator]MSP[N] index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR2Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.UOI3Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; MST[rv.CRCR5Mutator]MSP[N] } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[RemoveConditionalMutator_ORDER_IF]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public String encode ( final String value ) {
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR3Mutator]MSP[S] } index += 3 ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; MST[rv.CRCR2Mutator]MSP[N] } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; }
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[rv.UOI3Mutator]MSP[S]
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[MathMutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[MathMutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR6Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) {
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.UOI3Mutator]MSP[S]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR6Mutator]MSP[S]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR6Mutator]MSP[S] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.ROR3Mutator]MSP[N] } return index ; }
if ( input . length () == 0 ) { return null ; MST[ReturnValsMutator]MSP[N] } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; } protected char charAt ( final String value , final int index ) {
return handleCC ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.AOR1Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.AOD2Mutator]MSP[N]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.UOI2Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; MST[rv.ABSMutator]MSP[N] break; case 'Q' : result . append ( 'K' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; MST[ReturnValsMutator]MSP[N] }
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.ROR4Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.AOR4Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.ABSMutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.AOR2Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[ReturnValsMutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { result . append ( lr_105 , lr_106 ) ; index += 4 ; MST[IncrementsMutator]MSP[N] } else { index ++ ; } } return index ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR5Mutator]MSP[S]
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.AOR4Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR1Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[InlineConstantMutator]MSP[N]
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.AOD2Mutator]MSP[S] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . append ( 'K' ) ; index += 2 ;
for ( final String element : criteria ) { if ( target . equals ( element ) ) { MST[rv.ROR1Mutator]MSP[N] result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[PrimitiveReturnsMutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.ABSMutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.ROR4Mutator]MSP[S]
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.ROR1Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR2Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR1Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR5Mutator]MSP[N] }
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[NonVoidMethodCallMutator]MSP[N]
result . append ( 'A' , 'F' ) ; } else { result . append ( 'A' ) ; MST[VoidMethodCallMutator]MSP[S] } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.ROR5Mutator]MSP[S]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[InlineConstantMutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.UOI3Mutator]MSP[S]
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[rv.UOI1Mutator]MSP[N] }
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] break;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} else { result . append ( 'X' ) ; MST[rv.CRCR3Mutator]MSP[N] } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.AOD2Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.UOI2Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.AOR2Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[S]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.UOI3Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[NonVoidMethodCallMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] } return index ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR6Mutator]MSP[S]
! contains ( value , index - 2 , 4 , lr_5 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) { MST[rv.ROR4Mutator]MSP[N]
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( lr_37 , lr_36 ) ; } else {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.UOI3Mutator]MSP[S] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { MST[rv.UOI3Mutator]MSP[S] result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'S' ) ; index ++ ; } else {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.AOR3Mutator]MSP[N]
return doubleMetaphone ( value ) ; MST[ReturnValsMutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR5Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR3Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'M' : result . append ( 'M' ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR4Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR3Mutator]MSP[N] final boolean slavoGermanic ) {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.AOR2Mutator]MSP[S]
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.UOI3Mutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) {
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_4 ) &&
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[MathMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' &&
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.ROR2Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ; MST[InlineConstantMutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[InlineConstantMutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR4Mutator]MSP[N]
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { MST[NegateConditionalsMutator]MSP[N] return true ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR2Mutator]MSP[N] final boolean slavoGermanic ) {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.AOR1Mutator]MSP[N] result . append ( 'S' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.ROR4Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR6Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[N]
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.CRCR6Mutator]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; MST[rv.CRCR3Mutator]MSP[N] break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; MST[InlineConstantMutator]MSP[N] } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( index == value . length () - 3 && MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.ROR4Mutator]MSP[S] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.AOD1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.AOR3Mutator]MSP[N] return false ;
case '\u00D1' : result . append ( 'N' ) ; index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'Q' : result . append ( 'K' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } return index ; }
if ( input . length () == 0 ) { MST[rv.ROR1Mutator]MSP[N] return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; } protected char charAt ( final String value , final int index ) {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.AOR4Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR2Mutator]MSP[N]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] } return index ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.UOI3Mutator]MSP[S] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[InlineConstantMutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] break;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[InlineConstantMutator]MSP[N] result . appendAlternate ( 'S' ) ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } return index ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.AOD2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.ABSMutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.AOR2Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOD2Mutator]MSP[S] index = handleGH ( value , result , index ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.CRCR3Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR6Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.UOI1Mutator]MSP[S] result . append ( 'K' ) ; index += 2 ;
return doubleMetaphone ( value ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; MST[ReturnValsMutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
public String doubleMetaphone ( final String value ) { return doubleMetaphone ( value , false ) ; MST[rv.CRCR1Mutator]MSP[N] } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; }
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( conditionCH0 ( value , index ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR3Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( index == value . length () - 3 && MST[rv.ABSMutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
if ( conditionC0 ( value , index ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR6Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR6Mutator]MSP[N]
if ( index < 0 || index >= value . length () ) { MST[rv.ROR1Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[MathMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR4Mutator]MSP[N]
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.ROR3Mutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR3Mutator]MSP[N]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] break;
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; MST[rv.UOI3Mutator]MSP[N] }
contains ( value , index - 1 , 4 , lr_133 ) ) { return true ; } else { return false ; MST[ReturnValsMutator]MSP[S] } } private boolean conditionM0 ( final String value , final int index ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( lr_36 , lr_37 ) ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
return doubleMetaphone ( value ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; MST[BooleanTrueReturnValsMutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[rv.ROR4Mutator]MSP[S] result . append ( 'K' ) ; return index + 2 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.ROR2Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[S] } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { result . append ( 'R' ) ; }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.AOR3Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'H' :
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.UOI3Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOD1Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.UOI4Mutator]MSP[S]
final String ... criteria ) { boolean result = false ; MST[InlineConstantMutator]MSP[N] if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ;
if ( ! ( ( index == value . length () - 1 ) && MST[rv.ABSMutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.ROR4Mutator]MSP[S]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'J' , 'H' ) ; MST[rv.CRCR6Mutator]MSP[S] } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.CRCR6Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[NonVoidMethodCallMutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR6Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.UOI1Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else { result . append ( 'S' ) ; MST[rv.CRCR6Mutator]MSP[N] } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; } private boolean conditionC0 ( final String value , final int index ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.ROR4Mutator]MSP[S] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ABSMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI1Mutator]MSP[S] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.AOR4Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
result . append ( 'S' ) ; MST[InlineConstantMutator]MSP[S] index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR6Mutator]MSP[N] index += 3 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.UOI4Mutator]MSP[S]
! contains ( value , index + 2 , 2 , lr_25 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR2Mutator]MSP[N]
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[rv.UOI4Mutator]MSP[S] }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR3Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[rv.CRCR4Mutator]MSP[N] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.ROR1Mutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.AOR3Mutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; MST[rv.UOI2Mutator]MSP[N] }
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.ROR2Mutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.UOI2Mutator]MSP[N]
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { result . append ( 'A' ) ; MST[rv.CRCR6Mutator]MSP[N] } return index + 1 ; } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
} else { result . append ( 'J' , 'H' ) ; MST[rv.CRCR6Mutator]MSP[N] } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[NegateConditionalsMutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR3Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR6Mutator]MSP[N] } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[InlineConstantMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] } return index ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.ABSMutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR5Mutator]MSP[N]
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.ABSMutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI2Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ; MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( lr_62 , lr_105 ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[NonVoidMethodCallMutator]MSP[N]
} else { result . append ( 'X' ) ; MST[VoidMethodCallMutator]MSP[N] } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[NegateConditionalsMutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.CRCR2Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.CRCR5Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[MathMutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[NegateConditionalsMutator]MSP[S] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
if ( index == value . length () - 3 && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[NegateConditionalsMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'H' ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] } } else {
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; }
if ( index < 0 || index >= value . length () ) { return Character . MIN_VALUE ; MST[ReturnValsMutator]MSP[N] } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; MST[IncrementsMutator]MSP[N] } else { index ++ ; } }
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; MST[rv.ABSMutator]MSP[N] }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
if ( conditionC0 ( value , index ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.UOI3Mutator]MSP[N]
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[InlineConstantMutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; MST[rv.CRCR6Mutator]MSP[N] index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { MST[rv.ROR2Mutator]MSP[N] throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; } @Override public String encode ( final String value ) {
result . append ( 'S' ) ; MST[VoidMethodCallMutator]MSP[N] } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { index += 3 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] return index + 2 ;
result . append ( lr_36 ) ; } index = index + 2 ; MST[MathMutator]MSP[N] } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
for ( final String element : criteria ) { if ( target . equals ( element ) ) { MST[rv.ROR4Mutator]MSP[N] result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } return index ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.AOR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.ROR1Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( ! ( ( index == value . length () - 1 ) && MST[rv.UOI2Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.ROR4Mutator]MSP[S]
if ( index == value . length () - 3 && MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { MST[rv.UOI4Mutator]MSP[N] return false ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.UOI2Mutator]MSP[S]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] } return index ; }
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[MathMutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[MathMutator]MSP[S]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( slavoGermanic ) {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[InlineConstantMutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
result . append ( 'X' , 'S' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[NegateConditionalsMutator]MSP[N]
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ; MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR4Mutator]MSP[S]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR4Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.UOI1Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.AOR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'J' , 'A' ) ;
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] } return index ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR4Mutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] return index + 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( slavoGermanic ) {
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[S]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
if ( value . startsWith ( element ) ) { result = true ; MST[rv.CRCR6Mutator]MSP[N] break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.ROR1Mutator]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR3Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR1Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { MST[rv.ROR2Mutator]MSP[N] return false ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.AOR3Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( slavoGermanic ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ROR4Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.ABSMutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; MST[ReturnValsMutator]MSP[N] }
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.UOI2Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.ROR3Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N] } else { index ++ ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[S] } return index ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[InlineConstantMutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOR4Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
final String ... criteria ) { boolean result = false ; MST[rv.CRCR1Mutator]MSP[N] if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( index < 0 || index >= value . length () ) { MST[rv.UOI1Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR5Mutator]MSP[N] } index += 2 ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR1Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
if ( charAt ( value , index + 1 ) == 'J' ) { MST[rv.ROR5Mutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[NonVoidMethodCallMutator]MSP[S] if ( slavoGermanic ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.ROR4Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.AOR1Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[InlineConstantMutator]MSP[N]
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[MathMutator]MSP[N] result . append ( 'J' , ' ' ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.AOD1Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[rv.UOI1Mutator]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR3Mutator]MSP[N] } else {
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.UOI3Mutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.UOI4Mutator]MSP[N] index += 3 ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.ROR5Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( value . startsWith ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { MST[NonVoidMethodCallMutator]MSP[S] if ( isVowel ( charAt ( value , index + 1 ) ) ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[InlineConstantMutator]MSP[S]
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { MST[rv.ROR5Mutator]MSP[N] if ( isVowel ( charAt ( value , index + 1 ) ) ) {
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; MST[NegateConditionalsMutator]MSP[N] }
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.UOI4Mutator]MSP[S] result . append ( lr_37 , lr_36 ) ; } else {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOD1Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOD2Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[InlineConstantMutator]MSP[N]
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.UOI1Mutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR2Mutator]MSP[S] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.UOI3Mutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( index == value . length () - 3 && MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
index = handleS ( value , result , index , slavoGermanic ) ; MST[rv.UOI2Mutator]MSP[N] break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[S] index = handleGH ( value , result , index ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR6Mutator]MSP[N]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR6Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; MST[rv.CRCR1Mutator]MSP[N] }
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_62 , lr_105 ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR2Mutator]MSP[N] }
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[InlineConstantMutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR5Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
contains ( value , index - 1 , 4 , lr_133 ) ) { return true ; MST[rv.CRCR6Mutator]MSP[N] } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; MST[VoidMethodCallMutator]MSP[N] } else { result . append ( '0' , 'T' ) ; } index += 2 ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR1Mutator]MSP[N]
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.AOR2Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.UOI4Mutator]MSP[S] result . append ( 'K' ) ; index += 2 ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { MST[rv.ROR1Mutator]MSP[N] index += 2 ; } else { index ++ ; } }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.ABSMutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.UOI2Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[rv.ROR1Mutator]MSP[S] result . append ( lr_62 , lr_105 ) ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } return index ; }
result . append ( 'A' , 'F' ) ; MST[rv.CRCR5Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; MST[rv.CRCR5Mutator]MSP[S] } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR4Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.CRCR2Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ROR5Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.UOI2Mutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.AOR3Mutator]MSP[S]
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] } index += 2 ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR2Mutator]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR5Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOD1Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] } return index ; }
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR6Mutator]MSP[N]
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[InlineConstantMutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
result . append ( 'A' , 'F' ) ; } else { result . append ( 'A' ) ; MST[rv.CRCR2Mutator]MSP[S] } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.ROR1Mutator]MSP[N]
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'S' ) ;
result . append ( 'K' ) ; } index += 2 ; } return index ; MST[rv.UOI2Mutator]MSP[N] } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
if ( value . startsWith ( element ) ) { MST[NonVoidMethodCallMutator]MSP[N] result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR3Mutator]MSP[N] index += 3 ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[NonVoidMethodCallMutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
if ( charAt ( value , index + 1 ) == 'L' ) { MST[NonVoidMethodCallMutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( charAt ( value , index + 1 ) == 'M' ) { MST[InlineConstantMutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[InlineConstantMutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( ! ( ( index == value . length () - 1 ) && MST[InlineConstantMutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR5Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[MathMutator]MSP[S]
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[NegateConditionalsMutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR6Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.CRCR5Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
index ++ ; result . append ( 'L' ) ; MST[rv.CRCR5Mutator]MSP[N] } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
result . append ( 'X' , 'S' ) ; MST[VoidMethodCallMutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR3Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[ConditionalsBoundaryMutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR5Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; MST[rv.CRCR6Mutator]MSP[N] index ++ ; } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.ROR2Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ; MST[InlineConstantMutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.ROR3Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( index == value . length () - 3 && MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else { if ( index > 0 ) { MST[rv.ROR4Mutator]MSP[N] if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.AOR2Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[NonVoidMethodCallMutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI2Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.ABSMutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[S]
result . append ( 'S' ) ; index ++ ; MST[IncrementsMutator]MSP[S] break; case 'C' : index = handleC ( value , result , index ) ; break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.UOI3Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; MST[rv.UOI3Mutator]MSP[N] } private boolean conditionC0 ( final String value , final int index ) {
public String doubleMetaphone ( final String value ) { MST[rv.CRCR4Mutator]MSP[N] return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[InlineConstantMutator]MSP[N]
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ; MST[ReturnValsMutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.ROR3Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; MST[rv.CRCR1Mutator]MSP[S] } } else {
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
index = handleSC ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N] } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { result . appendAlternate ( 'S' ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR6Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] } return index ; }
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { MST[rv.ROR2Mutator]MSP[N] if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.ABSMutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR3Mutator]MSP[S] } index += 3 ;
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { MST[rv.ROR1Mutator]MSP[N] return true ;
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.UOI2Mutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.ROR1Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; MST[EmptyObjectReturnValsMutator]MSP[N] }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) {
for ( final String element : criteria ) { MST[rv.ABSMutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR6Mutator]MSP[N]
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.AOD2Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[InlineConstantMutator]MSP[S] if ( slavoGermanic ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR4Mutator]MSP[N] index = handleGH ( value , result , index ) ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR2Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.CRCR6Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[NonVoidMethodCallMutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.ROR3Mutator]MSP[S] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
index = handleS ( value , result , index , slavoGermanic ) ; break; case 'T' : index = handleT ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'V' : result . append ( 'F' ) ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOR1Mutator]MSP[N]
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' , ' ' ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[N]
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.CRCR2Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR2Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N]
return index ; MST[ReturnValsMutator]MSP[N] } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) &&
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; MST[rv.CRCR6Mutator]MSP[N] } index += 2 ; } else {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; MST[rv.CRCR6Mutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ; } else {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[MathMutator]MSP[S]
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[S]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[NegateConditionalsMutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.AOR2Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.ROR2Mutator]MSP[N] index = handleGH ( value , result , index ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; }
if ( value . startsWith ( element ) ) { result = true ; MST[rv.CRCR3Mutator]MSP[N] break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.CRCR2Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[InlineConstantMutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
result . append ( 'K' ) ; } index += 2 ; } return index ; MST[rv.ABSMutator]MSP[N] } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.UOI2Mutator]MSP[S]
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) { MST[rv.UOI4Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ; MST[rv.CRCR5Mutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR6Mutator]MSP[S]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.AOR1Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
result . append ( 'X' ) ; MST[rv.CRCR5Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; index += 3 ;
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.AOD1Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR1Mutator]MSP[S]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR1Mutator]MSP[N]
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.AOD2Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.ROR5Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'X' , 'S' ) ;
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.CRCR3Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[NonVoidMethodCallMutator]MSP[N]
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR5Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR5Mutator]MSP[S] if ( slavoGermanic ) {
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.ROR2Mutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.AOR2Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.CRCR1Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.UOI3Mutator]MSP[S] result . append ( 'S' ) ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.CRCR2Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else { result . append ( 'S' ) ; MST[rv.CRCR4Mutator]MSP[N] } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; }
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { MST[rv.ROR5Mutator]MSP[N] throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; } @Override public String encode ( final String value ) {
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( index == value . length () - 3 && MST[rv.AOD2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR1Mutator]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; MST[rv.CRCR3Mutator]MSP[S] } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR6Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.ROR1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[VoidMethodCallMutator]MSP[N] } index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[InlineConstantMutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; MST[rv.CRCR3Mutator]MSP[N] index ++ ; } return index ; }
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.AOD1Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[NonVoidMethodCallMutator]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ROR2Mutator]MSP[N] } return index ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ; MST[InlineConstantMutator]MSP[N]
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[MathMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR2Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
result . append ( 'X' ) ; MST[InlineConstantMutator]MSP[N] } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.AOR2Mutator]MSP[N]
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; MST[NullReturnValsMutator]MSP[N] } @Override public String encode ( final String value ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.ROR5Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[NegateConditionalsMutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { final String target = value . substring ( start , start + length ) ; MST[rv.UOI3Mutator]MSP[N]
result . append ( 'S' ) ; MST[rv.CRCR1Mutator]MSP[S] index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.AOR2Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.AOD2Mutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.ABSMutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } return contains ( value , index - 1 , 3 , lr_136 ) &&
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[ReturnValsMutator]MSP[N]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'S' ) ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ; MST[rv.CRCR2Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.ROR3Mutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.AOD2Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[NonVoidMethodCallMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.ROR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] break;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[NegateConditionalsMutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final boolean slavoGermanic ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.UOI4Mutator]MSP[N]
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { result . append ( 'A' ) ; } return index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.AOR2Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[MathMutator]MSP[N] } return index ; }
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { MST[rv.ROR2Mutator]MSP[N] return false ;
if ( index < 0 || index >= value . length () ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR2Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.UOI3Mutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI2Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else { if ( index > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[NegateConditionalsMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR3Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.AOR2Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI1Mutator]MSP[N] final boolean slavoGermanic ) {
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[MathMutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR1Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR1Mutator]MSP[N] final boolean slavoGermanic ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR4Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( index == value . length () - 3 && MST[rv.ROR2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break; case '\u00C7' :
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR1Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.AOD1Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
if ( index < 0 || index >= value . length () ) { return Character . MIN_VALUE ; } return value . charAt ( index ) ; MST[NonVoidMethodCallMutator]MSP[N] } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; MST[VoidMethodCallMutator]MSP[N] } return index ; }
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.ROR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR3Mutator]MSP[N]
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR2Mutator]MSP[S] index = handleGH ( value , result , index ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR2Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; MST[rv.UOI3Mutator]MSP[N] }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR3Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.UOI1Mutator]MSP[S] index += 3 ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.UOI3Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ; MST[NonVoidMethodCallMutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.AOD2Mutator]MSP[N]
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.AOR4Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[NegateConditionalsMutator]MSP[N]
if ( index < 0 || index >= value . length () ) { MST[rv.ROR5Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; MST[experimental.RemoveIncrementsMutator]MSP[N] result . append ( 'K' ) ; } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI1Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N] } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR3Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
result . append ( 'K' ) ; MST[rv.CRCR3Mutator]MSP[N] } index += 2 ; } return index ; } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR2Mutator]MSP[N] } index += 2 ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.UOI3Mutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.ABSMutator]MSP[S]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'X' , 'S' ) ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[S] } return index ; }
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ROR2Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ABSMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'S' ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ; MST[rv.CRCR6Mutator]MSP[N]
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[PrimitiveReturnsMutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] } return index ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[InlineConstantMutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { result . append ( 'K' ) ; } index += 2 ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } return index ; }
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'K' ) ; index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR2Mutator]MSP[N]
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; MST[rv.CRCR3Mutator]MSP[N] index += 2 ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.ABSMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.AOR2Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.AOR3Mutator]MSP[N]
public String doubleMetaphone ( final String value ) { return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; MST[EmptyObjectReturnValsMutator]MSP[N] }
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( 'H' ) ;
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.ABSMutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; MST[ArgumentPropagationMutator]MSP[N] } @Override public String encode ( final String value ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] index += 3 ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.UOI2Mutator]MSP[N]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR4Mutator]MSP[N]
result . append ( 'F' ) ; MST[rv.CRCR1Mutator]MSP[S] index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
if ( index < 0 || index >= value . length () ) { MST[rv.UOI2Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.CRCR4Mutator]MSP[N]
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; MST[ReturnValsMutator]MSP[N] } private boolean conditionC0 ( final String value , final int index ) {
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR1Mutator]MSP[N]
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( lr_37 , lr_36 ) ; } else {
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.UOI1Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
if ( ! ( ( index == value . length () - 1 ) && MST[InlineConstantMutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] }
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.AOD2Mutator]MSP[N] return false ;
if ( ! ( ( index == value . length () - 1 ) && MST[rv.AOR1Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[NegateConditionalsMutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.ROR5Mutator]MSP[S] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[InlineConstantMutator]MSP[N]
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.UOI4Mutator]MSP[S] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.ROR3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[InlineConstantMutator]MSP[S] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.AOR2Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.ROR4Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] } return index ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR6Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { result . append ( 'J' ) ; index += 2 ; MST[IncrementsMutator]MSP[N] } else {
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.ROR2Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'S' ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.ABSMutator]MSP[N]
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[S]
case '\u00D1' : result . append ( 'N' ) ; MST[rv.CRCR1Mutator]MSP[S] index ++ ; break; case 'P' : index = handleP ( value , result , index ) ; break; case 'Q' : result . append ( 'K' ) ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; MST[VoidMethodCallMutator]MSP[N] }
result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[N] } index += 2 ; } return index ; } private int handleH ( final String value , final DoubleMetaphoneResult result , int index ) {
if ( charAt ( value , index + 1 ) == 'J' ) { MST[rv.ROR4Mutator]MSP[S] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
! contains ( value , index - 2 , 4 , lr_5 ) ) { MST[rv.ROR2Mutator]MSP[S] result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.ROR3Mutator]MSP[N]
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.ROR3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
if ( index == value . length () - 3 && MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.CRCR3Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.UOI1Mutator]MSP[S] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[S] } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.AOR4Mutator]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.UOI2Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( slavoGermanic ) {
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[InlineConstantMutator]MSP[S] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[MathMutator]MSP[S] index += 3 ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.ROR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.UOI4Mutator]MSP[S]
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.AOR4Mutator]MSP[N] return false ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[S] } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR6Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.AOR3Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.UOI3Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; MST[ReturnValsMutator]MSP[N] }
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.AOR3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; MST[rv.CRCR4Mutator]MSP[N] } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[InlineConstantMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ROR1Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case '\u00C7' :
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[ConditionalsBoundaryMutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { MST[rv.ROR5Mutator]MSP[S] result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[InlineConstantMutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.AOD2Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] } return index ; }
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_98 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'R' ) ; index += 2 ; } else {
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { result . append ( 'S' ) ; MST[rv.CRCR6Mutator]MSP[N] index ++ ; } else {
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[rv.ROR2Mutator]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.ABSMutator]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.AOR1Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
if ( ! ( ( index == value . length () - 1 ) && MST[rv.UOI3Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR3Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { MST[rv.ROR1Mutator]MSP[S] result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[NonVoidMethodCallMutator]MSP[N] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.AOD2Mutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) {
final boolean slavoGermanic = isSlavoGermanic ( value ) ; int index = isSilentStart ( value ) ? 1 : 0 ; MST[rv.CRCR3Mutator]MSP[N] final DoubleMetaphoneResult result = new DoubleMetaphoneResult ( this . getMaxCodeLen () ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} return index ; MST[rv.ABSMutator]MSP[N] } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR4Mutator]MSP[S]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.UOI1Mutator]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.ROR2Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR3Mutator]MSP[N]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.CRCR1Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR6Mutator]MSP[N] index = handleGH ( value , result , index ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR6Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; MST[rv.CRCR1Mutator]MSP[N] index += 3 ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ROR3Mutator]MSP[S] result . append ( 'S' ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR1Mutator]MSP[S]
for ( final String element : criteria ) { MST[rv.UOI4Mutator]MSP[N] if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.ROR5Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
result . append ( 'S' ) ; } index += 2 ; MST[IncrementsMutator]MSP[N] } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { index += 3 ;
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' , 'A' ) ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' ) ;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR5Mutator]MSP[N]
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'K' , 'J' ) ; index += 2 ;
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.UOI4Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'J' , ' ' ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'K' , 'J' ) ; index += 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[InlineConstantMutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
} else if ( ! contains ( value , index + 2 , 2 , lr_38 ) && charAt ( value , index + 1 ) != 'Y' && ! slavoGermanic ) { MST[rv.UOI3Mutator]MSP[S] result . append ( lr_37 , lr_36 ) ; } else {
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.UOI2Mutator]MSP[N] if ( slavoGermanic ) {
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.UOI4Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR4Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.ROR2Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'J' , ' ' ) ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.ABSMutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.ROR2Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; MST[rv.CRCR1Mutator]MSP[N] index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.ABSMutator]MSP[N] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
if ( ! ( ( index == value . length () - 1 ) && MST[rv.ROR1Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] } index += 2 ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { MST[rv.ROR4Mutator]MSP[N] return false ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[NegateConditionalsMutator]MSP[N] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ROR5Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case '\u00C7' :
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR4Mutator]MSP[N] index += 3 ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.CRCR5Mutator]MSP[S]
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.ROR1Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.UOI2Mutator]MSP[S]
if ( charAt ( value , index + 1 ) == 'L' ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[S] break; case '\u00C7' :
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[S]
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR5Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR6Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR5Mutator]MSP[N]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR4Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR6Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[NegateConditionalsMutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[InlineConstantMutator]MSP[N]
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR6Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD2Mutator]MSP[N] final boolean slavoGermanic ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.CRCR6Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.ROR5Mutator]MSP[N]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'S' ) ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[S] break;
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR6Mutator]MSP[S]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
contains ( value , index - 1 , 4 , lr_133 ) ) { return true ; } else { return false ; MST[rv.CRCR3Mutator]MSP[S] } } private boolean conditionM0 ( final String value , final int index ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( index < 0 || index >= value . length () ) { MST[NonVoidMethodCallMutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.ROR4Mutator]MSP[N]
result . append ( 'X' ) ; } return index + 2 ; MST[MathMutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.ABSMutator]MSP[N]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOD1Mutator]MSP[N] final boolean slavoGermanic ) {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.ABSMutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { result . append ( 'J' ) ; MST[rv.CRCR1Mutator]MSP[N] index += 2 ; } else {
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[S] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.CRCR3Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR3Mutator]MSP[N]
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ; MST[VoidMethodCallMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[NonVoidMethodCallMutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.AOR3Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[rv.CRCR3Mutator]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.UOI2Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'H' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR1Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR4Mutator]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR2Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'S' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ; MST[rv.CRCR3Mutator]MSP[N]
index = handleX ( value , result , index ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[BooleanFalseReturnValsMutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR3Mutator]MSP[N]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.AOR1Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( slavoGermanic ) {
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; MST[VoidMethodCallMutator]MSP[N] index ++ ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } return index ; }
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.AOD2Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR5Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
index = handleH ( value , result , index ) ; break; case 'J' : index = handleJ ( value , result , index , slavoGermanic ) ; break; case 'K' : result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.AOR4Mutator]MSP[N]
index = handleH ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'J' : index = handleJ ( value , result , index , slavoGermanic ) ; break; case 'K' : result . append ( 'K' ) ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; MST[rv.CRCR5Mutator]MSP[N] } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.ROR2Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; MST[PrimitiveReturnsMutator]MSP[N] }
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR2Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.ABSMutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'S' ) ; index ++ ; } else {
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.AOD2Mutator]MSP[N]
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[NonVoidMethodCallMutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.CRCR3Mutator]MSP[N]
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { MST[rv.AOR1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'K' ) ; } index += 2 ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI4Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR1Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOD2Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[S] break; case '\u00C7' :
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR6Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
! contains ( value , index - 4 , 2 , lr_65 , lr_66 ) ) { result . appendAlternate ( 'R' ) ; } else { result . append ( 'R' ) ; MST[rv.CRCR2Mutator]MSP[N] }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[InlineConstantMutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.AOD1Mutator]MSP[N]
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { MST[NegateConditionalsMutator]MSP[S] result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) {
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ; MST[rv.CRCR2Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { MST[InlineConstantMutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR5Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.CRCR4Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.ROR5Mutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.ROR5Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
result . append ( lr_28 ) ; } else { result . append ( 'X' ) ; MST[InlineConstantMutator]MSP[N] } index += 3 ; } else { result . append ( 'K' ) ; index += 2 ; } return index ; }
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ; MST[rv.CRCR4Mutator]MSP[N]
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] } return index ; }
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[InlineConstantMutator]MSP[N]
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[InlineConstantMutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[InlineConstantMutator]MSP[N]
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR2Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR6Mutator]MSP[N] index += 3 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[N] } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
if ( index == value . length () - 3 && MST[rv.AOR2Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.ABSMutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'H' ) ;
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { result . append ( 'A' ) ; MST[rv.CRCR5Mutator]MSP[N] } return index + 1 ; } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR5Mutator]MSP[S] } index += 2 ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[NegateConditionalsMutator]MSP[S] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.UOI4Mutator]MSP[S]
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.UOI4Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR4Mutator]MSP[S]
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; } return index ; MST[rv.ABSMutator]MSP[N] }
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.AOR2Mutator]MSP[S]
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ; MST[rv.CRCR3Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR3Mutator]MSP[N]
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.AOR1Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.UOI4Mutator]MSP[N] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.ROR2Mutator]MSP[S] }
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR6Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( slavoGermanic ) {
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'S' :
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR6Mutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR4Mutator]MSP[S] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.CRCR1Mutator]MSP[N]
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[rv.ROR1Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.UOI2Mutator]MSP[N] result . append ( 'S' ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR3Mutator]MSP[N] }
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.AOR3Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.AOR3Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[InlineConstantMutator]MSP[N]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR2Mutator]MSP[N] result . append ( 'S' ) ;
public String doubleMetaphone ( final String value ) { return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return null ; }
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; MST[VoidMethodCallMutator]MSP[N] index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.UOI1Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR5Mutator]MSP[N]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.ROR5Mutator]MSP[N] if ( slavoGermanic ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[rv.CRCR1Mutator]MSP[N] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[NonVoidMethodCallMutator]MSP[N]
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.CRCR2Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.ROR4Mutator]MSP[N]
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { return false ; } else { return true ; MST[rv.CRCR5Mutator]MSP[N] } } private boolean conditionCH1 ( final String value , final int index ) {
! contains ( value , index + 2 , 2 , lr_25 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
final boolean slavoGermanic = isSlavoGermanic ( value ) ; int index = isSilentStart ( value ) ? 1 : 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] final DoubleMetaphoneResult result = new DoubleMetaphoneResult ( this . getMaxCodeLen () ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ABSMutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.UOI4Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else { result . append ( 'J' , 'H' ) ; MST[rv.CRCR4Mutator]MSP[S] } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR6Mutator]MSP[S] }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[NegateConditionalsMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[N] } else { result . append ( 'X' , 'K' ) ; } } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOD2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; MST[VoidMethodCallMutator]MSP[N] return index + 2 ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ; MST[InlineConstantMutator]MSP[S]
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] break; case '\u00C7' :
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] } return index ; }
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.AOR3Mutator]MSP[N]
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] } return index ; }
! contains ( value , index - 1 , 1 , lr_23 , lr_22 ) && MST[rv.CRCR1Mutator]MSP[S] ! contains ( value , index - 1 , 3 , lr_46 , lr_47 ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR6Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.ROR4Mutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; MST[VoidMethodCallMutator]MSP[N] index += 3 ;
if ( input . length () == 0 ) { return null ; } return input . toUpperCase ( java . util . Locale . ENGLISH ) ; MST[EmptyObjectReturnValsMutator]MSP[N] } protected char charAt ( final String value , final int index ) {
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ; MST[rv.CRCR2Mutator]MSP[N]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR3Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[NonVoidMethodCallMutator]MSP[N] index += 3 ;
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.ROR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR4Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { result . append ( 'K' ) ; MST[rv.CRCR2Mutator]MSP[N] index += 2 ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; MST[InlineConstantMutator]MSP[N] } else { result . append ( 'K' ) ; } index += 2 ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.UOI2Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
result . append ( 'S' ) ; index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; MST[rv.UOI3Mutator]MSP[N] break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
index = handleS ( value , result , index , slavoGermanic ) ; MST[rv.UOI4Mutator]MSP[N] break; case 'T' : index = handleT ( value , result , index ) ; break; case 'V' : result . append ( 'F' ) ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; MST[rv.CRCR3Mutator]MSP[N] } else { result . append ( 'K' ) ; } index += 2 ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || MST[rv.AOR4Mutator]MSP[S] charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
result . append ( 'X' ) ; } return index + 2 ; MST[rv.CRCR1Mutator]MSP[N] } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) {
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) { MST[rv.UOI1Mutator]MSP[S]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[rv.ROR1Mutator]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
result . append ( 'F' ) ; MST[VoidMethodCallMutator]MSP[S] index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ;
public String doubleMetaphone ( final String value ) { MST[rv.CRCR1Mutator]MSP[N] return doubleMetaphone ( value , false ) ; } public String doubleMetaphone ( String value , final boolean alternate ) { value = cleanInput ( value ) ; if ( value == null ) { return null ; }
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOD2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[NegateConditionalsMutator]MSP[S]
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; MST[ReturnValsMutator]MSP[N] } input = input . trim () ;
if ( charAt ( value , index + 1 ) == 'J' ) { MST[MathMutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.UOI2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR2Mutator]MSP[S] } index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[NegateConditionalsMutator]MSP[N] index = handleGH ( value , result , index ) ;
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; MST[ReturnValsMutator]MSP[N] } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.ABSMutator]MSP[N]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
} else { result . append ( 'J' , 'H' ) ; } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ; MST[InlineConstantMutator]MSP[S]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' ) ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { MST[rv.UOI4Mutator]MSP[N] return false ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.ABSMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } private boolean isSlavoGermanic ( final String value ) {
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[ConditionalsBoundaryMutator]MSP[S] }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR6Mutator]MSP[N] final boolean slavoGermanic ) {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.AOR4Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.UOI4Mutator]MSP[N]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR4Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.CRCR4Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
index ++ ; result . append ( 'L' ) ; } return index ; MST[rv.UOI3Mutator]MSP[N] } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
} else { result . append ( 'X' ) ; MST[rv.CRCR5Mutator]MSP[N] } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] } return index ; }
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] } return index ; }
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; MST[rv.CRCR2Mutator]MSP[N] index += 2 ; } else { index ++ ;
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.AOR2Mutator]MSP[N]
contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; MST[rv.CRCR3Mutator]MSP[N] } index += 2 ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
result . append ( 'F' ) ; MST[rv.CRCR2Mutator]MSP[N] index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
return doubleMetaphone ( value ) ; } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 ) { return isDoubleMetaphoneEqual ( value1 , value2 , false ) ; MST[rv.CRCR5Mutator]MSP[N] } public boolean isDoubleMetaphoneEqual ( final String value1 , final String value2 , final boolean alternate ) {
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; MST[IncrementsMutator]MSP[N] } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[InlineConstantMutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; index ++ ;
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.CRCR3Mutator]MSP[N] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.UOI1Mutator]MSP[S] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.UOI2Mutator]MSP[N]
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[NegateConditionalsMutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] } return index ; }
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.CRCR1Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[NonVoidMethodCallMutator]MSP[S]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[MathMutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[rv.ROR2Mutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } return index ; }
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 2 , lr_7 ) && MST[InlineConstantMutator]MSP[N] ! ( index == 1 && charAt ( value , 0 ) == 'M' ) ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.AOR4Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.AOR1Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.CRCR3Mutator]MSP[N]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.CRCR6Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR6Mutator]MSP[N]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; } return index ; MST[rv.UOI3Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.CRCR2Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.UOI1Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.ROR4Mutator]MSP[S] } return index ; }
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) || MST[rv.CRCR1Mutator]MSP[N]
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.CRCR4Mutator]MSP[N]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] } return index ; }
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR1Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.ROR5Mutator]MSP[N] break; case '\u00C7' :
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.ROR3Mutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[rv.UOI2Mutator]MSP[N] result . append ( 'K' ) ; return index + 2 ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[NegateConditionalsMutator]MSP[N] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[InlineConstantMutator]MSP[S] result . append ( 'H' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[InlineConstantMutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOD2Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR4Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR3Mutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR2Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.AOR1Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[rv.AOR3Mutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.ROR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.CRCR2Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
} else { if ( index > 0 ) { MST[rv.UOI2Mutator]MSP[N] if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; } else { result . append ( 'X' , 'K' ) ; } } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( index == value . length () - 3 && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[rv.ROR5Mutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[NonVoidMethodCallMutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] } return index ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.ROR5Mutator]MSP[S]
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[rv.CRCR5Mutator]MSP[S] } index += 3 ;
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } return index ; }
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR5Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.ROR4Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.UOI2Mutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'J' ) ; MST[rv.CRCR4Mutator]MSP[N] index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
if ( ! ( ( index == value . length () - 1 ) && MST[rv.CRCR4Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ; MST[rv.CRCR3Mutator]MSP[S]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR6Mutator]MSP[N] index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.ABSMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
if ( value . startsWith ( element ) ) { result = true ; MST[rv.CRCR2Mutator]MSP[N] break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
result . append ( 'A' , 'F' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[InlineConstantMutator]MSP[S]
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[NegateConditionalsMutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
result . append ( 'X' , 'S' ) ; MST[rv.CRCR3Mutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
index = charAt ( value , index + 1 ) == 'Q' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'R' : index = handleR ( value , result , index , slavoGermanic ) ; break; case 'S' :
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR2Mutator]MSP[S] final boolean slavoGermanic ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[MathMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[MathMutator]MSP[N] result . appendAlternate ( 'S' ) ;
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.UOI3Mutator]MSP[S] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} else if ( ( index == 0 && contains ( value , index + 1 , 1 , lr_78 , lr_37 , lr_41 , lr_79 ) ) || contains ( value , index + 1 , 1 , lr_80 ) ) { MST[rv.ROR2Mutator]MSP[N]
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.UOI4Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) {
if ( ! ( ( index == value . length () - 1 ) && MST[rv.AOR4Mutator]MSP[N] ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) {
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.ROR5Mutator]MSP[N] } return index ; }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.AOD2Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) ) { result . append ( 'T' ) ; } else { result . append ( '0' , 'T' ) ; } index += 2 ;
} else if ( index == 0 ) { if ( charAt ( value , index + 2 ) == 'I' ) { result . append ( 'J' ) ; } else { result . append ( 'K' ) ; MST[rv.CRCR4Mutator]MSP[S] } index += 2 ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
return handleCC ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_8 , lr_9 , lr_10 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.CRCR5Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index - 1 , 5 , lr_100 , lr_101 , lr_102 , lr_103 ) || contains ( value , 0 , 3 , lr_52 ) ) { result . appendAlternate ( 'F' ) ; MST[rv.CRCR1Mutator]MSP[N] index ++ ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.ABSMutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
result . append ( 'X' , 'S' ) ; MST[InlineConstantMutator]MSP[N] } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { result . append ( 'S' ) ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR6Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; MST[rv.CRCR1Mutator]MSP[N] index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; break; case '\u00C7' :
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.AOR1Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR6Mutator]MSP[N]
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.UOI4Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[NegateConditionalsMutator]MSP[N] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[S] break;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR1Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.UOI2Mutator]MSP[N] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.ROR2Mutator]MSP[S]
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; MST[rv.UOI2Mutator]MSP[N] break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; }
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[InlineConstantMutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.ROR4Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { throw new EncoderException ( lr_1 ) ; } return doubleMetaphone ( ( String ) obj ) ; MST[ReturnValsMutator]MSP[N] } @Override public String encode ( final String value ) {
if ( index == value . length () - 3 && MST[rv.AOR1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.CRCR3Mutator]MSP[N] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
index ++ ; result . append ( 'L' ) ; MST[rv.CRCR3Mutator]MSP[N] } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
! contains ( value , index + 2 , 2 , lr_25 ) ) { MST[rv.ROR5Mutator]MSP[N] if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[ReturnValsMutator]MSP[N] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { MST[rv.CRCR6Mutator]MSP[S] index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) &&
result . append ( lr_89 , lr_90 ) ; } else { result . append ( lr_90 ) ; } } else { if ( index == 0 && ! isVowel ( charAt ( value , 3 ) ) && charAt ( value , 3 ) != 'W' ) { MST[rv.UOI1Mutator]MSP[N]
if ( index == value . length () - 3 && MST[InlineConstantMutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.AOD2Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
index ++ ; result . append ( 'L' ) ; } return index ; } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.AOD2Mutator]MSP[S]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] } return index ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.AOR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR5Mutator]MSP[N]
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.UOI1Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.ABSMutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR4Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[InlineConstantMutator]MSP[N]
if ( index == value . length () - 3 && MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
! contains ( value , index - 2 , 4 , lr_5 ) ) { result . append ( 'S' , 'X' ) ; index += 2 ; } else if ( contains ( value , index + 1 , 3 , lr_6 ) ) { MST[rv.AOR2Mutator]MSP[S]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.AOR2Mutator]MSP[N] } return index ; }
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOD2Mutator]MSP[N]
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' ) ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[S] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR1Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.AOR3Mutator]MSP[N]
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR4Mutator]MSP[N]
result . append ( 'S' ) ; index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; MST[rv.ABSMutator]MSP[N] break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.ROR2Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[rv.CRCR5Mutator]MSP[N]
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.AOD1Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[InlineConstantMutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.ROR3Mutator]MSP[N]
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[InlineConstantMutator]MSP[N]
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' ) ;
result . append ( 'X' ) ; MST[rv.CRCR3Mutator]MSP[N] index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { result . append ( 'X' ) ; index += 3 ;
if ( charAt ( value , index + 1 ) == 'L' ) { if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; MST[rv.CRCR6Mutator]MSP[N] } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'K' ) ; return index + 2 ;
index = handleAEIOUY ( result , index ) ; break; case 'B' : result . append ( 'P' ) ; index = charAt ( value , index + 1 ) == 'B' ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[S] break; case '\u00C7' :
private int handleX ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index == 0 ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'S' ) ; index ++ ; } else {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.ROR3Mutator]MSP[N] result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[NonVoidMethodCallMutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( lr_62 , lr_105 ) ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( slavoGermanic ) {
@Override public Object encode ( final Object obj ) throws EncoderException { if ( ! ( obj instanceof String ) ) { throw new EncoderException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[S] } return doubleMetaphone ( ( String ) obj ) ; } @Override public String encode ( final String value ) {
if ( conditionC0 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[S] index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.UOI3Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.ROR5Mutator]MSP[S] } private boolean isSlavoGermanic ( final String value ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR4Mutator]MSP[N] final boolean slavoGermanic ) {
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
if ( charAt ( value , index + 1 ) == 'J' ) { MST[rv.CRCR2Mutator]MSP[N] index += 2 ; } else { index ++ ; } } return index ; } private int handleL ( final String value , final DoubleMetaphoneResult result , int index ) {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
private int handleW ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( contains ( value , index , 2 , lr_98 ) ) { result . append ( 'R' ) ; index += 2 ; } else {
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ; MST[ReturnValsMutator]MSP[S]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[InlineConstantMutator]MSP[N]
} else { if ( index > 0 ) { if ( contains ( value , 0 , 2 , lr_30 ) ) { result . append ( 'K' ) ; MST[rv.CRCR5Mutator]MSP[N] } else { result . append ( 'X' , 'K' ) ; } } else {
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR5Mutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
result . append ( 'S' ) ; index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; break; case 'D' : index = handleD ( value , result , index ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'F' :
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.AOD1Mutator]MSP[S] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; MST[rv.ROR1Mutator]MSP[N] break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; break;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.UOI3Mutator]MSP[S]
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[NonVoidMethodCallMutator]MSP[N]
result . append ( 'X' ) ; index += 3 ; } else if ( contains ( value , index , 3 , lr_92 , lr_93 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'X' ) ; index += 3 ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_12]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_13]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_14]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[rv.CRCR3Mutator]MSP[N]
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_15]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.AOR3Mutator]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_10]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_11]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.UOI2Mutator]MSP[N] } return index ; }
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; MST[rv.AOD2Mutator]MSP[S] return ( c != 'I' && c != 'E' ) ||
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.AOR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[NegateConditionalsMutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
if ( index == value . length () - 3 && MST[rv.CRCR5Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.CRCR3Mutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.UOI1Mutator]MSP[S]
result . append ( 'F' ) ; index += 2 ; } else { result . append ( 'P' ) ; index = contains ( value , index + 1 , 1 , lr_63 , lr_55 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } return index ;
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'H' ) ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[NonVoidMethodCallMutator]MSP[S] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[NonVoidMethodCallMutator]MSP[N]
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] } return index ; }
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_17]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_18]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_19]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_23]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
! contains ( value , index + 2 , 2 , lr_25 ) ) { MST[NegateConditionalsMutator]MSP[N] if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_24]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_25]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[MathMutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_26]MSP[S] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || MST[rv.UOI1Mutator]MSP[S] ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) &&
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_20]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_21]MSP[N] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_22]MSP[S] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR4Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
if ( index == value . length () - 3 && MST[rv.UOI3Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
result . append ( 'F' ) ; index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.CRCR5Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ; MST[rv.CRCR3Mutator]MSP[N]
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[rv.AOR1Mutator]MSP[S] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR3Mutator]MSP[N] result . append ( 'S' ) ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[rv.UOI3Mutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[S] } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; MST[PrimitiveReturnsMutator]MSP[N] }
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) { MST[rv.CRCR2Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR4Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
} else { result . append ( lr_90 ) ; } return index + 3 ; MST[rv.UOI1Mutator]MSP[N] } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && MST[rv.CRCR6Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_64 ) &&
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR6Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
while ( ! result . isComplete () && index <= value . length () - 1 ) { switch ( value . charAt ( index ) ) { MST[experimental.RemoveSwitchMutator_27]MSP[S] case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.ROR2Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
result . append ( 'S' ) ; MST[rv.CRCR2Mutator]MSP[S] index ++ ; break; case 'C' : index = handleC ( value , result , index ) ; break; case 'D' : index = handleD ( value , result , index ) ; break; case 'F' :
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[InlineConstantMutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
if ( charAt ( value , index + 1 ) == 'M' ) { MST[rv.CRCR5Mutator]MSP[N] return true ; } return contains ( value , index - 1 , 3 , lr_136 ) &&
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) { MST[NegateConditionalsMutator]MSP[N]
result . append ( 'A' , 'F' ) ; MST[rv.CRCR3Mutator]MSP[N] } else { result . append ( 'A' ) ; } index ++ ; } else if ( ( index == value . length () - 1 && isVowel ( charAt ( value , index - 1 ) ) ) ||
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ABSMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( index < 0 || index >= value . length () ) { MST[rv.ROR4Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[NegateConditionalsMutator]MSP[S]
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.ROR3Mutator]MSP[N]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; } else if ( contains ( value , index , 2 , lr_81 ) ) { MST[rv.ROR3Mutator]MSP[N]
if ( index == value . length () - 3 && contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { MST[rv.ROR3Mutator]MSP[N] return true ;
if ( index == value . length () - 3 && MST[rv.ROR1Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR5Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
return StringUtils . equals ( doubleMetaphone ( value1 , alternate ) , doubleMetaphone ( value2 , alternate ) ) ; MST[rv.UOI4Mutator]MSP[S] } public int getMaxCodeLen () { return this . maxCodeLen ; } public void setMaxCodeLen ( final int maxCodeLen ) { this . maxCodeLen = maxCodeLen ; }
index += 2 ; } else if ( contains ( value , index , 2 , lr_3 ) ) { index = handleCH ( value , result , index ) ; } else if ( contains ( value , index , 2 , lr_4 ) && MST[rv.CRCR5Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.CRCR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.UOI3Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
private int handleAEIOUY ( final DoubleMetaphoneResult result , final int index ) { if ( index == 0 ) { MST[rv.UOI1Mutator]MSP[N] result . append ( 'A' ) ; } return index + 1 ; } private int handleC ( final String value , final DoubleMetaphoneResult result , int index ) {
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[rv.AOD1Mutator]MSP[S] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
if ( index == value . length () - 3 && MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} else { result . append ( lr_90 ) ; MST[VoidMethodCallMutator]MSP[S] } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI4Mutator]MSP[N] final boolean slavoGermanic ) {
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'S' ) ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
private boolean isVowel ( final char ch ) { return VOWELS . indexOf ( ch ) != - 1 ; MST[rv.ABSMutator]MSP[N] } private boolean isSilentStart ( final String value ) { boolean result = false ; for ( final String element : SILENT_START ) {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[S] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; }
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.AOR3Mutator]MSP[N] break;
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[rv.CRCR3Mutator]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[ConditionalsBoundaryMutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
result . append ( lr_28 ) ; } index = contains ( value , index + 1 , 1 , lr_19 , lr_89 ) ? index + 2 : index + 1 ; MST[rv.AOR1Mutator]MSP[N] } return index ; }
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; MST[rv.CRCR4Mutator]MSP[N] index += 2 ;
if ( contains ( value , index , 4 , lr_114 ) ) { return true ; } else if ( index <= 1 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR3Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
contains ( value , index - 3 , 1 , lr_19 , lr_57 , lr_41 , lr_58 , lr_59 ) ) { result . append ( 'F' ) ; } else if ( index > 0 && charAt ( value , index - 1 ) != 'I' ) { MST[rv.UOI1Mutator]MSP[S]
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.UOI4Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
if ( conditionC0 ( value , index ) ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ; } else if ( index == 0 && contains ( value , index , 6 , lr_2 ) ) { result . append ( 'S' ) ;
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( 'X' , 'S' ) ;
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.CRCR6Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.CRCR5Mutator]MSP[N]
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.CRCR5Mutator]MSP[S]
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[rv.UOI4Mutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
} else if ( ( index > 1 && contains ( value , index - 2 , 1 , lr_55 , lr_24 , lr_56 ) ) || ( index > 2 && contains ( value , index - 3 , 1 , lr_55 , lr_24 , lr_56 ) ) || MST[rv.AOR1Mutator]MSP[S]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'S' ) ;
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[InlineConstantMutator]MSP[N] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR4Mutator]MSP[N]
} else if ( charAt ( value , index + 1 ) == 'G' ) { MST[rv.CRCR3Mutator]MSP[S] index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
} return index ; MST[rv.UOI1Mutator]MSP[N] } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[rv.AOR2Mutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.ROR1Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR3Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || MST[rv.ROR4Mutator]MSP[S] contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) {
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.CRCR4Mutator]MSP[N] if ( slavoGermanic ) {
} else { result . append ( 'T' ) ; MST[VoidMethodCallMutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; } return index ; }
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR6Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
result . append ( 'X' ) ; } return index + 2 ; } } private int handleD ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 2 , lr_31 ) ) { MST[rv.CRCR5Mutator]MSP[N]
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; MST[rv.CRCR6Mutator]MSP[S] } index += 2 ;
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; MST[rv.CRCR4Mutator]MSP[N] }
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR4Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.AOR4Mutator]MSP[S]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.AOD1Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[BooleanTrueReturnValsMutator]MSP[S]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
if ( index == value . length () - 3 && MST[rv.UOI4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR3Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { MST[rv.CRCR3Mutator]MSP[N] index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; MST[experimental.RemoveIncrementsMutator]MSP[S] result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; } return index ; }
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR6Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.UOI3Mutator]MSP[N]
if ( charAt ( value , index + 1 ) == 'L' ) { MST[rv.UOI1Mutator]MSP[N] if ( conditionL0 ( value , index ) ) { result . appendPrimary ( 'L' ) ; } else { result . append ( 'L' ) ; } index += 2 ; } else {
if ( ( index == 0 || isVowel ( charAt ( value , index - 1 ) ) ) && MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] isVowel ( charAt ( value , index + 1 ) ) ) { result . append ( 'H' ) ; index += 2 ; } else { index ++ ;
} else if ( charAt ( value , index + 1 ) == 'G' ) { index += 2 ; result . append ( 'K' ) ; } else { index ++ ; result . append ( 'K' ) ; MST[rv.CRCR6Mutator]MSP[N] } return index ; }
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR1Mutator]MSP[N] index += 3 ;
} else { result . append ( lr_90 ) ; } return index + 3 ; } private int handleT ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index , 4 , lr_91 ) ) { MST[rv.ROR4Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR3Mutator]MSP[N]
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.CRCR4Mutator]MSP[N]
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; MST[rv.CRCR1Mutator]MSP[N] return index + 2 ;
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.UOI4Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
index = charAt ( value , index + 1 ) == 'V' ? index + 2 : index + 1 ; MST[rv.CRCR4Mutator]MSP[N] break; case 'W' : index = handleW ( value , result , index ) ; break; case 'X' :
result . append ( 'X' , 'S' ) ; } else { result . append ( 'X' ) ; } } } else if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ABSMutator]MSP[N] result . append ( 'S' ) ;
} else if ( conditionCH0 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ; MST[InlineConstantMutator]MSP[N] } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[rv.ROR2Mutator]MSP[S]
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR5Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.ROR2Mutator]MSP[N] final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) {
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR6Mutator]MSP[N]
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_32 ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'J' ) ; index += 3 ; } else { result . append ( lr_33 ) ; index += 2 ; }
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[rv.AOR1Mutator]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
} else if ( charAt ( value , index + 1 ) == 'N' ) { if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { MST[NonVoidMethodCallMutator]MSP[N] result . append ( lr_36 , lr_37 ) ;
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; MST[rv.CRCR2Mutator]MSP[S] } else {
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , MST[InlineConstantMutator]MSP[N] final boolean slavoGermanic ) {
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR6Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] result . append ( 'X' , 'S' ) ;
index = charAt ( value , index + 1 ) == 'K' ? index + 2 : index + 1 ; MST[rv.UOI1Mutator]MSP[N] break; case 'L' : index = handleL ( value , result , index ) ; break; case 'M' : result . append ( 'M' ) ;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.AOD1Mutator]MSP[N]
contains ( value , index - 1 , 4 , lr_133 ) ) { MST[rv.ROR1Mutator]MSP[N] return true ; } else { return false ; } } private boolean conditionM0 ( final String value , final int index ) {
if ( index < 0 || index >= value . length () ) { MST[rv.UOI1Mutator]MSP[N] return Character . MIN_VALUE ; } return value . charAt ( index ) ; } protected static boolean contains ( final String value , final int start , final int length ,
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[InlineConstantMutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.CRCR1Mutator]MSP[N] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . appendAlternate ( 'S' ) ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[InlineConstantMutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.ROR1Mutator]MSP[S]
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { MST[rv.ROR3Mutator]MSP[N] if ( slavoGermanic ) {
return index ; } private int handleCC ( final String value , final DoubleMetaphoneResult result , int index ) { if ( contains ( value , index + 2 , 1 , lr_22 , lr_23 , lr_24 ) && MST[rv.CRCR5Mutator]MSP[N]
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) { MST[rv.ROR5Mutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) && MST[rv.CRCR6Mutator]MSP[N]
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; MST[rv.UOI3Mutator]MSP[N] } private String cleanInput ( String input ) { if ( input == null ) { return null ; } input = input . trim () ;
if ( contains ( value , index , 4 , lr_114 ) ) { MST[rv.CRCR3Mutator]MSP[N] return true ; } else if ( index <= 1 ) { return false ; } else if ( isVowel ( charAt ( value , index - 2 ) ) ) { return false ;
} else if ( ! contains ( value , index + 1 , 5 , lr_118 , lr_119 ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index + 1 , 3 , lr_120 , lr_121 , lr_122 , lr_123 ) ) { return false ;
} else if ( isVowel ( charAt ( value , index - 1 ) ) && ! slavoGermanic && ( charAt ( value , index + 1 ) == 'A' || charAt ( value , index + 1 ) == 'O' ) ) { MST[rv.ROR1Mutator]MSP[S]
final String ... criteria ) { boolean result = false ; if ( start >= 0 && start + length <= value . length () ) { MST[rv.ROR5Mutator]MSP[N] final String target = value . substring ( start , start + length ) ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.CRCR3Mutator]MSP[N] index = handleGH ( value , result , index ) ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) &&
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR5Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[NegateConditionalsMutator]MSP[S] } private boolean isSlavoGermanic ( final String value ) {
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { MST[rv.CRCR1Mutator]MSP[N] return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) ||
index = handleH ( value , result , index ) ; break; case 'J' : index = handleJ ( value , result , index , slavoGermanic ) ; MST[rv.UOI1Mutator]MSP[N] break; case 'K' : result . append ( 'K' ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.UOI3Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.AOD2Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] break;
index = conditionM0 ( value , index ) ? index + 2 : index + 1 ; break; case 'N' : result . append ( 'N' ) ; index = charAt ( value , index + 1 ) == 'N' ? index + 2 : index + 1 ; MST[rv.CRCR1Mutator]MSP[S] break;
contains ( value , index + 2 , 1 , lr_59 , lr_62 ) || ( ( contains ( value , index - 1 , 1 , lr_128 , lr_129 , lr_130 , lr_23 ) || index == 0 ) && MST[rv.AOR4Mutator]MSP[S]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { MST[rv.CRCR4Mutator]MSP[N] result . append ( 'S' ) ;
! contains ( value , index + 2 , 2 , lr_25 ) ) { if ( ( index == 1 && charAt ( value , index - 1 ) == 'A' ) || MST[rv.ROR1Mutator]MSP[N] contains ( value , index - 1 , 5 , lr_26 , lr_27 ) ) {
result . append ( lr_36 ) ; } index = index + 2 ; } else if ( contains ( value , index + 1 , 2 , lr_39 ) && ! slavoGermanic ) { MST[rv.CRCR6Mutator]MSP[N] result . append ( lr_40 , lr_41 ) ; index += 2 ;
private int handleG ( final String value , final DoubleMetaphoneResult result , int index , MST[rv.UOI2Mutator]MSP[S] final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { index = handleGH ( value , result , index ) ;
index = handleX ( value , result , index ) ; break; case 'Z' : index = handleZ ( value , result , index , slavoGermanic ) ; break; default: index ++ ; break; } } return alternate ? result . getAlternate () : result . getPrimary () ; MST[rv.UOI2Mutator]MSP[N] }
private int handleCH ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( index > 0 && contains ( value , index , 4 , lr_29 ) ) { MST[rv.CRCR1Mutator]MSP[N] result . append ( 'K' , 'X' ) ; return index + 2 ;
} else if ( ! contains ( value , index - 1 , 3 , lr_115 ) ) { return false ; } else { final char c = charAt ( value , index + 2 ) ; return ( c != 'I' && c != 'E' ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; } return index ; MST[rv.UOI3Mutator]MSP[N] }
if ( value . startsWith ( element ) ) { result = true ; break; } } return result ; } private String cleanInput ( String input ) { if ( input == null ) { MST[NegateConditionalsMutator]MSP[N] return null ; } input = input . trim () ;
} else if ( ( contains ( value , index + 1 , 2 , lr_42 ) || charAt ( value , index + 1 ) == 'Y' ) && ! contains ( value , 0 , 6 , lr_43 , lr_44 , lr_45 ) && MST[InlineConstantMutator]MSP[N]
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { MST[rv.ROR4Mutator]MSP[N] result . append ( 'K' ) ; index += 2 ;
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] if ( isVowel ( charAt ( value , index + 1 ) ) ) {
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[rv.ROR4Mutator]MSP[N]
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) { MST[rv.ROR4Mutator]MSP[S]
if ( contains ( value , index + 1 , 2 , lr_111 , lr_112 , lr_113 ) || MST[rv.ROR2Mutator]MSP[N] ( slavoGermanic && ( index > 0 && charAt ( value , index - 1 ) != 'T' ) ) ) { result . append ( lr_62 , lr_105 ) ;
contains ( value , index - 2 , 6 , lr_116 , lr_117 ) ; MST[InlineConstantMutator]MSP[N] } } private boolean conditionCH0 ( final String value , final int index ) { if ( index != 0 ) { return false ;
if ( ! ( ( index == value . length () - 1 ) && ( contains ( value , index - 3 , 3 , lr_107 , lr_108 ) || MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] contains ( value , index - 2 , 2 , lr_109 , lr_110 ) ) ) ) {
} else if ( conditionCH0 ( value , index ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( 'K' ) ; return index + 2 ; } else if ( conditionCH1 ( value , index ) ) { result . append ( 'K' ) ; return index + 2 ;
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR3Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else { result . append ( 'S' ) ; } index = contains ( value , index + 1 , 1 , lr_62 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.CRCR3Mutator]MSP[N] } return index ; }
( index > 3 && contains ( value , index - 4 , 1 , lr_55 , lr_24 ) ) ) { index += 2 ; } else { if ( index > 2 && charAt ( value , index - 1 ) == 'U' && MST[rv.CRCR4Mutator]MSP[N]
index ++ ; } else if ( contains ( value , index , 2 , lr_70 ) ) { MST[rv.CRCR2Mutator]MSP[N] if ( contains ( value , index + 1 , 4 , lr_71 , lr_72 , lr_73 , lr_74 ) ) { result . append ( 'S' ) ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.AOR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[InlineConstantMutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR1Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else if ( contains ( value , index , 2 , lr_94 ) || contains ( value , index , 3 , lr_95 ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( contains ( value , index + 2 , 2 , lr_96 , lr_97 ) ||
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { MST[InlineConstantMutator]MSP[N] if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { result . append ( 'S' , 'X' ) ; } else {
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR5Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
} else { result . append ( 'T' ) ; MST[rv.CRCR1Mutator]MSP[N] index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; } return index ; }
return charAt ( value , index + 1 ) == 'R' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] } private int handleS ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) {
} else { result . append ( 'S' ) ; MST[rv.CRCR4Mutator]MSP[N] } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; } return index ; } private boolean conditionC0 ( final String value , final int index ) {
private int handleZ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( charAt ( value , index + 1 ) == 'H' ) { MST[rv.ROR2Mutator]MSP[N] result . append ( 'J' ) ; index += 2 ; } else {
if ( ( index == 0 && ( charAt ( value , index + 4 ) == ' ' ) || MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] value . length () == 4 ) || contains ( value , 0 , 4 , lr_61 ) ) { result . append ( 'H' ) ;
index ++ ; result . append ( 'L' ) ; } return index ; MST[rv.UOI2Mutator]MSP[N] } private int handleP ( final String value , final DoubleMetaphoneResult result , int index ) { if ( charAt ( value , index + 1 ) == 'H' ) {
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR3Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
} else { result . append ( 'X' ) ; MST[rv.CRCR6Mutator]MSP[N] } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) {
private int handleSC ( final String value , final DoubleMetaphoneResult result , final int index ) { if ( charAt ( value , index + 2 ) == 'H' ) { MST[rv.AOR1Mutator]MSP[N]
if ( contains ( value , index + 3 , 2 , lr_84 , lr_42 , lr_85 , lr_86 , lr_87 , lr_88 ) ) { MST[rv.CRCR6Mutator]MSP[N] if ( contains ( value , index + 3 , 2 , lr_42 , lr_85 ) ) {
result . append ( 'S' ) ; } index += 2 ; } else { result . append ( 'K' ) ; if ( contains ( value , index + 1 , 2 , lr_16 , lr_17 , lr_18 ) ) { MST[rv.CRCR5Mutator]MSP[N] index += 3 ;
} else if ( contains ( value , index + 1 , 3 , lr_54 ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] result . append ( 'J' ) ; } else { result . append ( 'J' , 'K' ) ; } index += 2 ;
private int handleGH ( final String value , final DoubleMetaphoneResult result , int index ) { MST[rv.CRCR3Mutator]MSP[N] if ( index > 0 && ! isVowel ( charAt ( value , index - 1 ) ) ) { result . append ( 'K' ) ; index += 2 ;
final boolean slavoGermanic = isSlavoGermanic ( value ) ; int index = isSilentStart ( value ) ? 1 : 0 ; MST[rv.ROR1Mutator]MSP[N] final DoubleMetaphoneResult result = new DoubleMetaphoneResult ( this . getMaxCodeLen () ) ;
} else if ( contains ( value , index , 4 , lr_5 , lr_104 ) ) { MST[rv.UOI3Mutator]MSP[N] result . append ( lr_105 , lr_106 ) ; index += 4 ; } else { index ++ ; } } return index ; }
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || MST[InlineConstantMutator]MSP[N] contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { result . append ( 'K' , 'J' ) ; index += 2 ;
result . append ( 'J' , 'H' ) ; } else if ( index == value . length () - 1 ) { MST[InlineConstantMutator]MSP[N] result . append ( 'J' , ' ' ) ;
} else { result . append ( 'J' , 'H' ) ; MST[rv.CRCR4Mutator]MSP[N] } index ++ ; } else { if ( index == 0 && ! contains ( value , index , 4 , lr_60 ) ) { result . append ( 'J' , 'A' ) ;
if ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , 0 , 3 , lr_52 ) || contains ( value , index + 1 , 2 , lr_53 ) ) { result . append ( 'K' ) ;
} else { result . append ( 'S' ) ; } index = charAt ( value , index + 1 ) == 'Z' ? index + 2 : index + 1 ; MST[rv.AOR4Mutator]MSP[N] } return index ; } private boolean conditionC0 ( final String value , final int index ) {
} return index ; } private int handleJ ( final String value , final DoubleMetaphoneResult result , int index , final boolean slavoGermanic ) { if ( contains ( value , index , 4 , lr_60 ) || contains ( value , 0 , 4 , lr_61 ) ) { MST[rv.CRCR5Mutator]MSP[N]
} else if ( contains ( value , index , 2 , lr_34 , lr_35 ) ) { result . append ( 'T' ) ; index += 2 ; } else { result . append ( 'T' ) ; index ++ ; } return index ; MST[rv.UOI4Mutator]MSP[N] }
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
if ( index == 0 && ( isVowel ( charAt ( value , index + 1 ) ) || contains ( value , index , 2 , lr_99 ) ) ) { if ( isVowel ( charAt ( value , index + 1 ) ) ) { MST[MathMutator]MSP[N]
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[MathMutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
} else if ( contains ( value , 0 , 5 , lr_124 ) ) { MST[rv.CRCR5Mutator]MSP[N] return false ; } else { return true ; } } private boolean conditionCH1 ( final String value , final int index ) {
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) || MST[rv.CRCR5Mutator]MSP[N]
return value . indexOf ( 'W' ) > - 1 || value . indexOf ( 'K' ) > - 1 || MST[InlineConstantMutator]MSP[S] value . indexOf ( lr_4 ) > - 1 || value . indexOf ( lr_104 ) > - 1 ; }
} else if ( charAt ( value , index + 1 ) == 'N' ) { MST[rv.CRCR5Mutator]MSP[S] if ( index == 1 && isVowel ( charAt ( value , 0 ) ) && ! slavoGermanic ) { result . append ( lr_36 , lr_37 ) ;
} else { result . append ( 'T' ) ; index = contains ( value , index + 1 , 1 , lr_59 , lr_56 ) ? index + 2 : index + 1 ; MST[rv.ROR3Mutator]MSP[N] } return index ; }
( contains ( value , index + 2 , 1 , L_R_N_M_B_H_F_V_W_SPACE ) || index + 1 == value . length () - 1 ) ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } private boolean conditionL0 ( final String value , final int index ) {
if ( index == value . length () - 3 && MST[rv.AOR4Mutator]MSP[N] contains ( value , index - 1 , 4 , lr_131 , lr_132 , lr_133 ) ) { return true ;
if ( charAt ( value , index + 1 ) == 'M' ) { return true ; } return contains ( value , index - 1 , 3 , lr_136 ) && MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
result . append ( 'S' , 'X' ) ; index = contains ( value , index + 1 , 1 , lr_80 ) ? index + 2 : index + 1 ; MST[rv.UOI3Mutator]MSP[S] } else if ( contains ( value , index , 2 , lr_81 ) ) {
} else if ( contains ( value , index + 1 , 1 , lr_19 , lr_20 , lr_21 ) && MST[rv.CRCR5Mutator]MSP[N] ! contains ( value , index + 1 , 2 , lr_12 , lr_11 ) ) { index += 2 ; } else { index ++ ; } }
} else if ( contains ( value , index , 2 , lr_11 , lr_12 , lr_13 ) ) { if ( contains ( value , index , 3 , lr_14 , lr_15 , lr_6 ) ) { MST[InlineConstantMutator]MSP[N] result . append ( 'S' , 'X' ) ; } else {
} private int handleR ( final String value , final DoubleMetaphoneResult result , final int index , final boolean slavoGermanic ) { if ( index == value . length () - 1 && ! slavoGermanic && contains ( value , index - 2 , 2 , lr_64 ) && MST[rv.CRCR2Mutator]MSP[N]
} else if ( ! contains ( value , index + 1 , 1 , L_T_K_S_N_M_B_Z ) && MST[InlineConstantMutator]MSP[N] ! contains ( value , index - 1 , 1 , lr_62 , lr_20 , lr_41 ) ) { result . append ( 'J' ) ; }
result . append ( 'S' ) ; } else { result . append ( 'S' , 'X' ) ; MST[InlineConstantMutator]MSP[S] } index += 3 ;
} else if ( ( contains ( value , value . length () - 2 , 2 , lr_134 , lr_135 ) || MST[rv.CRCR2Mutator]MSP[N] contains ( value , value . length () - 1 , 1 , lr_128 , lr_129 ) ) &&
result . append ( 'F' ) ; MST[rv.CRCR1Mutator]MSP[N] index = charAt ( value , index + 1 ) == 'F' ? index + 2 : index + 1 ; break; case 'G' : index = handleG ( value , result , index , slavoGermanic ) ; break; case 'H' :
} else if ( index == 0 && ( charAt ( value , index + 1 ) == 'Y' || contains ( value , index + 1 , 2 , ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER ) ) ) { MST[rv.ROR5Mutator]MSP[N] result . append ( 'K' , 'J' ) ; index += 2 ;
} else { result . append ( 'X' ) ; } index += 2 ; } else if ( contains ( value , index , 3 , lr_75 , lr_76 ) || contains ( value , index , 4 , lr_77 ) ) { if ( slavoGermanic ) { MST[rv.ROR5Mutator]MSP[S]
( ( index + 1 ) == value . length () - 1 || contains ( value , index + 2 , 2 , lr_42 ) ) ; MST[rv.CRCR2Mutator]MSP[N] } private boolean isSlavoGermanic ( final String value ) {
while ( ! result . isComplete () && index <= value . length () - 1 ) { MST[rv.AOR3Mutator]MSP[N] switch ( value . charAt ( index ) ) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : case 'Y' :
index = handleSC ( value , result , index ) ; } else { if ( index == value . length () - 1 && contains ( value , index - 2 , 2 , lr_82 , lr_83 ) ) { result . appendAlternate ( 'S' ) ; MST[rv.CRCR1Mutator]MSP[N]
if ( contains ( value , index - 1 , 3 , lr_67 , lr_68 ) ) { index ++ ; } else if ( index == 0 && contains ( value , index , 5 , lr_69 ) ) { result . append ( 'X' , 'S' ) ; MST[rv.CRCR4Mutator]MSP[N]
return ( ( contains ( value , 0 , 4 , lr_50 , lr_51 ) || contains ( value , 0 , 3 , lr_52 ) ) || MST[rv.CRCR3Mutator]MSP[N] contains ( value , index - 2 , 6 , lr_125 , lr_126 , lr_127 ) ||
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } public String getPrimary () {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[VoidMethodCallMutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
this . alternate . length () >= this . maxLength ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[ConditionalsBoundaryMutator]MSP[N] this . primary . append ( value ) ; } else {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ROR2Mutator]MSP[N] this . primary . append ( value ) ; } else {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOD1Mutator]MSP[N]
public void append ( final String value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; } public void append ( final String primary , final String alternate ) { appendPrimary ( primary ) ; MST[VoidMethodCallMutator]MSP[N] appendAlternate ( alternate ) ; }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ROR4Mutator]MSP[N] this . primary . append ( value ) ; } else {
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } public String getPrimary () {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.AOR4Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
if ( value . length () <= addChars ) { MST[rv.ROR5Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.UOI1Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . alternate . length () >= this . maxLength ; MST[rv.CRCR6Mutator]MSP[N] }
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.ABSMutator]MSP[N] } } public String getPrimary () {
if ( value . length () <= addChars ) { MST[rv.ROR1Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
if ( value . length () <= addChars ) { MST[rv.ROR3Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.UOI3Mutator]MSP[N] this . primary . append ( value ) ; } else {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.UOI4Mutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOR3Mutator]MSP[N]
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[ReturnValsMutator]MSP[N]
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } public String getPrimary () {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.UOI2Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
this . primary . append ( value ) ; MST[rv.UOI2Mutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR1Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[rv.UOI2Mutator]MSP[N] appendAlternate ( value ) ;
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.UOI3Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR5Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[NonVoidMethodCallMutator]MSP[S] this . alternate . append ( value ) ; } }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] this . primary . append ( value ) ; } else {
this . alternate . length () >= this . maxLength ; MST[InlineConstantMutator]MSP[N] }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { this . primary . append ( value ) ; MST[NonVoidMethodCallMutator]MSP[N] } else {
if ( value . length () <= addChars ) { MST[NegateConditionalsMutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI2Mutator]MSP[N] } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.UOI4Mutator]MSP[S] }
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[rv.ABSMutator]MSP[N] appendAlternate ( value ) ;
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[MathMutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.UOI1Mutator]MSP[N]
this . primary . append ( value ) ; MST[rv.ABSMutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI3Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[rv.ABSMutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.UOI4Mutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.CRCR3Mutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[rv.UOI2Mutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[VoidMethodCallMutator]MSP[N] appendAlternate ( value ) ;
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[NonVoidMethodCallMutator]MSP[N] } }
return this . primary . toString () ; MST[ReturnValsMutator]MSP[N] } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[rv.UOI3Mutator]MSP[N]
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[rv.UOI2Mutator]MSP[N] } }
this . alternate . length () >= this . maxLength ; MST[rv.ROR4Mutator]MSP[N] }
this . alternate . length () >= this . maxLength ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] this . alternate . append ( value ) ; } }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ROR2Mutator]MSP[N]
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ROR4Mutator]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[rv.UOI1Mutator]MSP[N]
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[InlineConstantMutator]MSP[N] } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.ROR2Mutator]MSP[S] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ROR1Mutator]MSP[N]
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ROR3Mutator]MSP[N]
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[ConditionalsBoundaryMutator]MSP[N] this . alternate . append ( value ) ; } }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[rv.UOI2Mutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
if ( value . length () <= addChars ) { MST[rv.UOI2Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[rv.UOI3Mutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[NonVoidMethodCallMutator]MSP[N]
this . primary . append ( value ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { this . primary . append ( value ) ; MST[experimental.NakedReceiverMutator]MSP[N] } else {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[rv.UOI4Mutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
this . primary . append ( value ) ; MST[rv.UOI3Mutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
public void append ( final String value ) { appendPrimary ( value ) ; MST[VoidMethodCallMutator]MSP[N] appendAlternate ( value ) ; } public void append ( final String primary , final String alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; }
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR1Mutator]MSP[N] } } public String getPrimary () {
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[rv.UOI4Mutator]MSP[N] appendAlternate ( value ) ;
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR6Mutator]MSP[N] } } public String getPrimary () {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.UOI3Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N]
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ROR2Mutator]MSP[N] this . alternate . append ( value ) ; } }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.UOI1Mutator]MSP[N] this . primary . append ( value ) ; } else {
public void append ( final String value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; } public void append ( final String primary , final String alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[VoidMethodCallMutator]MSP[N] }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ROR5Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI1Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } public String getPrimary () {
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.ABSMutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
this . alternate . length () >= this . maxLength ; MST[rv.UOI2Mutator]MSP[S] }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.UOI2Mutator]MSP[N]
if ( value . length () <= addChars ) { MST[rv.ROR2Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ABSMutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.CRCR5Mutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.UOI1Mutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.CRCR1Mutator]MSP[N] }
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[experimental.NakedReceiverMutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOD2Mutator]MSP[N]
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ROR1Mutator]MSP[N] this . primary . append ( value ) ; } else {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ROR3Mutator]MSP[N] this . primary . append ( value ) ; } else {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; MST[ReturnValsMutator]MSP[N] } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
if ( value . length () <= addChars ) { MST[ConditionalsBoundaryMutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ROR5Mutator]MSP[N] this . primary . append ( value ) ; } else {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.ABSMutator]MSP[N] this . primary . append ( value ) ; } else {
return this . primary . toString () ; MST[NonVoidMethodCallMutator]MSP[N] } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
if ( value . length () <= addChars ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[NegateConditionalsMutator]MSP[N] }
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI3Mutator]MSP[N] } } public String getPrimary () {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.UOI2Mutator]MSP[N]
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[NegateConditionalsMutator]MSP[N]
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; MST[NonVoidMethodCallMutator]MSP[N] } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI4Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI2Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI1Mutator]MSP[N] } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.CRCR6Mutator]MSP[N] }
this . alternate . length () >= this . maxLength ; MST[rv.CRCR4Mutator]MSP[N] }
this . alternate . length () >= this . maxLength ; MST[rv.CRCR2Mutator]MSP[N] }
if ( value . length () <= addChars ) { MST[NonVoidMethodCallMutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.UOI3Mutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOR2Mutator]MSP[N]
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.UOI4Mutator]MSP[N] this . primary . append ( value ) ; } else {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[NegateConditionalsMutator]MSP[N]
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[NegateConditionalsMutator]MSP[N] this . primary . append ( value ) ; } else {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.UOI1Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[MathMutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.UOI4Mutator]MSP[N]
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR3Mutator]MSP[N] } } public String getPrimary () {
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.UOI2Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[rv.ABSMutator]MSP[N] } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ROR3Mutator]MSP[N] this . alternate . append ( value ) ; } }
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.AOR3Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ROR1Mutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.ROR5Mutator]MSP[S] }
if ( value . length () <= addChars ) { MST[rv.ROR4Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.ROR1Mutator]MSP[N] }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ROR5Mutator]MSP[S]
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.ABSMutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[InlineConstantMutator]MSP[N] }
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[rv.UOI1Mutator]MSP[N] appendAlternate ( value ) ;
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[NonVoidMethodCallMutator]MSP[S]
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[VoidMethodCallMutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
if ( value . length () <= addChars ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value ) ; MST[rv.UOI1Mutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[rv.UOI1Mutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
if ( value . length () <= addChars ) { MST[rv.UOI3Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.CRCR3Mutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ROR4Mutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[rv.UOI4Mutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.ABSMutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
public void append ( final String value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[VoidMethodCallMutator]MSP[N] } public void append ( final String primary , final String alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; MST[EmptyObjectReturnValsMutator]MSP[N] } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[ConditionalsBoundaryMutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[InlineConstantMutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[rv.UOI4Mutator]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[rv.UOI2Mutator]MSP[N]
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[rv.UOI1Mutator]MSP[N] } }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[NonVoidMethodCallMutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.ABSMutator]MSP[S] }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ROR4Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ABSMutator]MSP[N] this . alternate . append ( value ) ; } }
this . alternate . length () >= this . maxLength ; MST[NonVoidMethodCallMutator]MSP[N] }
this . primary . append ( value ) ; MST[NonVoidMethodCallMutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[NegateConditionalsMutator]MSP[N] this . alternate . append ( value ) ; } }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; MST[NonVoidMethodCallMutator]MSP[N] } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
this . alternate . length () >= this . maxLength ; MST[rv.UOI3Mutator]MSP[N] }
this . alternate . length () >= this . maxLength ; MST[rv.UOI1Mutator]MSP[N] }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[ConditionalsBoundaryMutator]MSP[N]
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.UOI3Mutator]MSP[N]
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.UOI1Mutator]MSP[N]
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[rv.UOI1Mutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[experimental.NakedReceiverMutator]MSP[N] } }
if ( value . length () <= addChars ) { MST[rv.UOI4Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ABSMutator]MSP[N]
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ROR5Mutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[ConditionalsBoundaryMutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; MST[rv.ABSMutator]MSP[N] appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR5Mutator]MSP[N] } } public String getPrimary () {
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.UOI2Mutator]MSP[N]
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[rv.UOI2Mutator]MSP[N] this . primary . append ( value ) ; } else {
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOR1Mutator]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; appendAlternate ( value ) ; MST[VoidMethodCallMutator]MSP[N]
this . primary . append ( value ) ; MST[rv.UOI4Mutator]MSP[N] } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; } }
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[BooleanTrueReturnValsMutator]MSP[N]
this . primary . append ( value . substring ( 0 , addChars ) ) ; } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ; MST[rv.AOR4Mutator]MSP[N]
for ( final String element : criteria ) { if ( target . equals ( element ) ) { result = true ; break; } } } return result ; } public void append ( final char value ) { appendPrimary ( value ) ; MST[rv.UOI3Mutator]MSP[N] appendAlternate ( value ) ;
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.UOI4Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[NonVoidMethodCallMutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR3Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[experimental.NakedReceiverMutator]MSP[S] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.AOR2Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.ROR1Mutator]MSP[N] this . alternate . append ( value ) ; } }
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { MST[rv.UOI4Mutator]MSP[N] this . alternate . append ( value ) ; } }
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; MST[experimental.NakedReceiverMutator]MSP[N] } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value ) ; } } public void appendAlternate ( final char value ) { if ( this . alternate . length () < this . maxLength ) { this . alternate . append ( value ) ; MST[rv.UOI3Mutator]MSP[N] } }
if ( value . length () <= addChars ) { MST[rv.ABSMutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
return this . primary . toString () ; } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength && MST[rv.ROR3Mutator]MSP[N]
if ( value . length () <= addChars ) { MST[rv.UOI1Mutator]MSP[N] this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; } } public String getPrimary () {
this . primary . append ( value . substring ( 0 , addChars ) ) ; MST[rv.CRCR6Mutator]MSP[N] } } public void appendAlternate ( final String value ) { final int addChars = this . maxLength - this . alternate . length () ;
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; MST[rv.AOD2Mutator]MSP[N] if ( value . length () <= addChars ) { this . primary . append ( value ) ; } else {
if ( value . length () <= addChars ) { this . alternate . append ( value ) ; } else { this . alternate . append ( value . substring ( 0 , addChars ) ) ; MST[rv.UOI4Mutator]MSP[N] } } public String getPrimary () {
this . alternate . length () >= this . maxLength ; MST[rv.ROR3Mutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) { MST[rv.ROR2Mutator]MSP[N]
this . alternate . length () >= this . maxLength ; MST[rv.CRCR5Mutator]MSP[N] }
} public void append ( final char primary , final char alternate ) { appendPrimary ( primary ) ; appendAlternate ( alternate ) ; MST[rv.UOI3Mutator]MSP[N] } public void appendPrimary ( final char value ) { if ( this . primary . length () < this . maxLength ) {
return this . primary . toString () ; MST[EmptyObjectReturnValsMutator]MSP[N] } public String getAlternate () { return this . alternate . toString () ; } public boolean isComplete () { return this . primary . length () >= this . maxLength &&
public void appendPrimary ( final String value ) { final int addChars = this . maxLength - this . primary . length () ; if ( value . length () <= addChars ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] this . primary . append ( value ) ; } else {
