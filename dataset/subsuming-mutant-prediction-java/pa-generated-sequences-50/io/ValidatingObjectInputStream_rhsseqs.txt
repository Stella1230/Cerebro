for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[rv.CRCR2Mutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI2Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR6Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR5Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
private void validateClassName ( final String name ) throws InvalidClassException { MST[experimental.MemberVariableMutator]MSP[N] for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ;
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ROR1Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ROR4Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ROR2Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ROR3Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; MST[ReturnValsMutator]MSP[S] }
throw new InvalidClassException ( lr_1 + className ) ; } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; MST[ReturnValsMutator]MSP[N] }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[InlineConstantMutator]MSP[N] } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR1Mutator]MSP[S] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[S] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI2Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; MST[NullReturnValsMutator]MSP[S] } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR4Mutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR2Mutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR3Mutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ROR5Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; MST[ConstructorCallMutator]MSP[S] return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[S] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.ABSMutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[S] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR3Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR1Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[ConstructorCallMutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[NonVoidMethodCallMutator]MSP[S] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final ClassNameMatcher m ) { rejectMatchers . add ( m ) ; return this ; MST[ReturnValsMutator]MSP[S] }
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; MST[NonVoidMethodCallMutator]MSP[S] return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; MST[ReturnValsMutator]MSP[S] } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI2Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ; MST[rv.CRCR6Mutator]MSP[N]
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR5Mutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[InlineConstantMutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; MST[NullReturnValsMutator]MSP[N] }
throw new InvalidClassException ( lr_1 + className ) ; } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; MST[NonVoidMethodCallMutator]MSP[N] return super . resolveClass ( osc ) ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[NonVoidMethodCallMutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; MST[VoidMethodCallMutator]MSP[N] } } boolean ok = false ;
throw new InvalidClassException ( lr_1 + className ) ; MST[experimental.NakedReceiverMutator]MSP[S] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI2Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; MST[NullReturnValsMutator]MSP[N] } public ValidatingObjectInputStream reject ( final String ... patterns ) {
for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[rv.CRCR5Mutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[rv.CRCR3Mutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR6Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR3Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR2Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[NegateConditionalsMutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.UOI4Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR6Mutator]MSP[N] } return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ; MST[rv.CRCR1Mutator]MSP[N]
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.UOI3Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR5Mutator]MSP[N] } return this ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[S] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[ConstructorCallMutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; MST[NonVoidMethodCallMutator]MSP[S] return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI2Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[ConstructorCallMutator]MSP[N] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI3Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; MST[NullReturnValsMutator]MSP[S] }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ; MST[rv.CRCR5Mutator]MSP[N]
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR1Mutator]MSP[N] } return this ; }
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; MST[ReturnValsMutator]MSP[N] } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[InlineConstantMutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR4Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final ClassNameMatcher m ) { rejectMatchers . add ( m ) ; return this ; MST[NullReturnValsMutator]MSP[S] }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[NegateConditionalsMutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; MST[ReturnValsMutator]MSP[N] }
for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[rv.CRCR4Mutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
throw new InvalidClassException ( lr_1 + className ) ; } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; MST[VoidMethodCallMutator]MSP[N] return super . resolveClass ( osc ) ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[S] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
for ( final String pattern : patterns ) { MST[rv.UOI3Mutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI2Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR5Mutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
private void validateClassName ( final String name ) throws InvalidClassException { MST[ConstructorCallMutator]MSP[N] for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ;
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR3Mutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR4Mutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR2Mutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; MST[ConstructorCallMutator]MSP[N] } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR6Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR5Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final ClassNameMatcher m ) { rejectMatchers . add ( m ) ; MST[NonVoidMethodCallMutator]MSP[S] return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ; MST[InlineConstantMutator]MSP[N]
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] invalidClassNameFound ( name ) ; } } boolean ok = false ;
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[NonVoidMethodCallMutator]MSP[N] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[InlineConstantMutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR3Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; MST[NullReturnValsMutator]MSP[N] }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; MST[VoidMethodCallMutator]MSP[N] } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[experimental.NakedReceiverMutator]MSP[N] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
throw new InvalidClassException ( lr_1 + className ) ; } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; MST[NullReturnValsMutator]MSP[N] } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; MST[NonVoidMethodCallMutator]MSP[S] return this ; } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR4Mutator]MSP[N] } return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[NegateConditionalsMutator]MSP[N] invalidClassNameFound ( name ) ; } } boolean ok = false ;
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] } return this ; }
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[N] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { MST[rv.UOI2Mutator]MSP[S] acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR5Mutator]MSP[N] } return this ; }
throw new InvalidClassException ( lr_1 + className ) ; } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; MST[NullReturnValsMutator]MSP[N] }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[InlineConstantMutator]MSP[N] } return this ; }
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; MST[ConstructorCallMutator]MSP[N] } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.UOI2Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI2Mutator]MSP[S] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[rv.UOI1Mutator]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final String pattern : patterns ) { rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; MST[ReturnValsMutator]MSP[S] }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI4Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; MST[ConstructorCallMutator]MSP[S] return this ; } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; }
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[N] acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
throw new InvalidClassException ( lr_1 + className ) ; MST[ConstructorCallMutator]MSP[N] } @Override protected Class < ? > resolveClass ( final ObjectStreamClass osc ) throws IOException , ClassNotFoundException { validateClassName ( osc . getName () ) ; return super . resolveClass ( osc ) ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; MST[ReturnValsMutator]MSP[N] }
public ValidatingObjectInputStream reject ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { MST[rv.UOI1Mutator]MSP[N] rejectMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; } return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { invalidClassNameFound ( name ) ; } } boolean ok = false ; MST[rv.CRCR3Mutator]MSP[N]
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR3Mutator]MSP[N] } return this ; }
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; break; } } if ( ! ok ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[rv.CRCR2Mutator]MSP[N] } return this ; }
public ValidatingObjectInputStream reject ( final Pattern pattern ) { rejectMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; } public ValidatingObjectInputStream accept ( final ClassNameMatcher m ) { acceptMatchers . add ( m ) ; return this ; MST[NullReturnValsMutator]MSP[S] }
for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[N] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
private void validateClassName ( final String name ) throws InvalidClassException { for ( final ClassNameMatcher m : rejectMatchers ) { if ( m . matches ( name ) ) { MST[rv.ROR1Mutator]MSP[S] invalidClassNameFound ( name ) ; } } boolean ok = false ;
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] ok = true ; break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
for ( final ClassNameMatcher m : acceptMatchers ) { if ( m . matches ( name ) ) { ok = true ; MST[rv.CRCR6Mutator]MSP[N] break; } } if ( ! ok ) { invalidClassNameFound ( name ) ; } } protected void invalidClassNameFound ( final String className ) throws InvalidClassException {
public ValidatingObjectInputStream accept ( final String ... patterns ) { for ( final String pattern : patterns ) { acceptMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; MST[ReturnValsMutator]MSP[N] } public ValidatingObjectInputStream reject ( final String ... patterns ) {
public ValidatingObjectInputStream accept ( final Class < ? > ... classes ) { for ( final Class < ? > c : classes ) { acceptMatchers . add ( new FullClassNameMatcher ( c . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[N] } return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI1Mutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final String pattern : patterns ) { MST[rv.ABSMutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
for ( final String pattern : patterns ) { MST[rv.UOI4Mutator]MSP[S] rejectMatchers . add ( new WildcardClassNameMatcher ( pattern ) ) ; } return this ; } public ValidatingObjectInputStream accept ( final Pattern pattern ) { acceptMatchers . add ( new RegexpClassNameMatcher ( pattern ) ) ; return this ; }
