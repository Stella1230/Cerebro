@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[experimental.NakedReceiverMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[experimental.NakedReceiverMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; MST[PrimitiveReturnsMutator]MSP[N] } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[experimental.NakedReceiverMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[NonVoidMethodCallMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[ConstructorCallMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[experimental.NakedReceiverMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[ReturnValsMutator]MSP[N] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; MST[NonVoidMethodCallMutator]MSP[N] } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; MST[EmptyObjectReturnValsMutator]MSP[S] }
@Override public int compare ( final File file1 , final File file2 ) { return caseSensitivity . checkCompareTo ( file1 . getPath () , file2 . getPath () ) ; MST[ReturnValsMutator]MSP[N] } @Override public String toString () { return super . toString () + lr_1 + caseSensitivity + lr_2 ; }
