: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[ReturnValsMutator]MSP[] } } public static File toFile ( final URL url ) {
if ( ! srcDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
writeLines ( file , null , lines , lineEnding , append ) ; MST[rv.UOI3Mutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
return lineIterator ( file , null ) ; MST[ReturnValsMutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI4Mutator]MSP[] destDir . mkdirs () ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; throw new IllegalArgumentException ( message ) ; MST[ConstructorCallMutator]MSP[] } final File [] files = directory . listFiles () ; if ( files == null ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI3Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[rv.ROR5Mutator]MSP[] if ( srcFile . isDirectory () ) {
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; MST[NegateConditionalsMutator]MSP[] writeStringToFile ( file , str , encoding , append ) ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR4Mutator]MSP[] boolean wasInterrupted = false ; try {
return false ; } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_54 ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[NegateConditionalsMutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[ReturnValsMutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[rv.ROR3Mutator]MSP[] bytes . flip () ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; MST[ReturnValsMutator]MSP[] } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
while ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR3Mutator]MSP[] filename = decodeUrl ( filename ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ROR3Mutator]MSP[]
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ABSMutator]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR5Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; MST[NullReturnValsMutator]MSP[] } return BigInteger . valueOf ( fileOrDir . length () ) ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI2Mutator]MSP[]
checksum ( file , crc ) ; MST[ArgumentPropagationMutator]MSP[] return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR5Mutator]MSP[] destDir . mkdirs () ; }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[rv.CRCR6Mutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOD2Mutator]MSP[] boolean wasInterrupted = false ; try {
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[rv.ROR1Mutator]MSP[]
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; MST[rv.ROR5Mutator]MSP[] writeStringToFile ( file , str , encoding , append ) ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[NonVoidMethodCallMutator]MSP[] } return urls ;
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[NegateConditionalsMutator]MSP[] if ( srcFile . isDirectory () ) {
return false ; } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_54 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI3Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] destDir . mkdirs () ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[NonVoidMethodCallMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
return readFileToString ( file , Charset . defaultCharset () ) ; } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { final long fileLength = file . length () ; MST[NonVoidMethodCallMutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[MathMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] final String message = lr_50 + directory + lr_51
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[rv.ROR5Mutator]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR3Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR5Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.ABSMutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR4Mutator]MSP[] return false ; }
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[NonVoidMethodCallMutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.UOI1Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[InlineConstantMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
writeLines ( file , encoding , lines , null , false ) ; MST[rv.CRCR3Mutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] final String message = lr_50 + directory + lr_51
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR1Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; MST[NullReturnValsMutator]MSP[] } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[rv.CRCR2Mutator]MSP[] }
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[rv.CRCR3Mutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
try { if ( in != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] in . close () ; } } catch ( final IOException e ) { ex . addSuppressed ( e ) ; } throw ex ; } } public static LineIterator lineIterator ( final File file ) throws IOException {
return isFileNewer ( file , date . getTime () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ROR4Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR4Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[rv.UOI3Mutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[VoidMethodCallMutator]MSP[] }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; MST[VoidMethodCallMutator]MSP[] } } catch ( final Exception ignored ) { } try { return file . delete () ;
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null MST[rv.ROR5Mutator]MSP[] ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI1Mutator]MSP[] } return urls ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.UOI1Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; }
if ( ! file . exists () ) { MST[NegateConditionalsMutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.ABSMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR1Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; MST[VoidMethodCallMutator]MSP[] } } return true ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI3Mutator]MSP[] } return suffixes ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[InlineConstantMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ROR1Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[rv.UOI4Mutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[InlineConstantMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
if ( null != exception ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR4Mutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[InlineConstantMutator]MSP[] }
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null MST[NegateConditionalsMutator]MSP[] ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[NonVoidMethodCallMutator]MSP[] filename = decodeUrl ( filename ) ;
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
if ( file . exists () ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR4Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[ConstructorCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( includeSubDirectories ) {
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[rv.UOI1Mutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
return readLines ( file , Charsets . toCharset ( encoding ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Deprecated public static List < String > readLines ( final File file ) throws IOException { return readLines ( file , Charset . defaultCharset () ) ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
if ( file == null ) { return false ; MST[ReturnValsMutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ABSMutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; if ( parent == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[rv.ROR5Mutator]MSP[]
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[experimental.NakedReceiverMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR1Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final File dstFile = new File ( destDir , srcFile . getName () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_2 ) ; } File file = directory ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ABSMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; MST[NonVoidMethodCallMutator]MSP[] writeStringToFile ( file , str , encoding , append ) ;
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[ConstructorCallMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[InlineConstantMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR2Mutator]MSP[] final int n = url . length () ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; MST[NonVoidMethodCallMutator]MSP[] } return decoded ;
if ( ! srcDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; MST[VoidMethodCallMutator]MSP[] if ( srcFile . isDirectory () ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[InlineConstantMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[InlineConstantMutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; MST[VoidMethodCallMutator]MSP[] }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[NegateConditionalsMutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI4Mutator]MSP[] } return suffixes ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[rv.ROR5Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR6Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR5Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; MST[rv.ABSMutator]MSP[] } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[rv.ROR2Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[rv.CRCR4Mutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] DirectoryFileFilter . INSTANCE ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[NegateConditionalsMutator]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[ReturnValsMutator]MSP[] }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.ROR3Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR2Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR4Mutator]MSP[] }
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR6Mutator]MSP[] } @Deprecated
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
File file = null ; for ( final String name : names ) { if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; MST[NullReturnValsMutator]MSP[] }
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[rv.ROR1Mutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] if ( ! isSymlink ( file ) ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.UOI4Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
public static Iterator < File > iterateFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFilesAndDirs ( directory , fileFilter , dirFilter ) . iterator () ; MST[NullReturnValsMutator]MSP[] } private static String [] toSuffixes ( final String [] extensions ) {
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[ConstructorCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
final String canonicalParent = directory . getCanonicalPath () ; MST[NonVoidMethodCallMutator]MSP[] final String canonicalChild = child . getCanonicalPath () ; return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; } public static void cleanDirectory ( final File directory ) throws IOException {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; MST[ArgumentPropagationMutator]MSP[] } }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR1Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ; MST[experimental.NakedReceiverMutator]MSP[]
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
File file = null ; for ( final String name : names ) { MST[rv.ABSMutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ROR4Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[rv.CRCR3Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI2Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
if ( ! srcDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR5Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[rv.ROR4Mutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[rv.ROR3Mutator]MSP[] if ( file . isDirectory () ) {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI1Mutator]MSP[]
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] destDir . mkdirs () ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[rv.UOI4Mutator]MSP[] i += 3 ;
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; MST[NullReturnValsMutator]MSP[] } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] if ( includeSubDirectories ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[NonVoidMethodCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI1Mutator]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR1Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[ConstructorCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR2Mutator]MSP[] return false ; }
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_26 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.UOI3Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[ReturnValsMutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR4Mutator]MSP[]
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
try ( OutputStream out = openOutputStream ( destination ) ) { IOUtils . copy ( source , out ) ; } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[InlineConstantMutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR2Mutator]MSP[] } try ( Reader input1 = charsetName == null
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
if ( destDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( date == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[InlineConstantMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[NonVoidMethodCallMutator]MSP[] } return suffixes ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.CRCR1Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI2Mutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return lineIterator ( file , null ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ROR1Mutator]MSP[] try { do {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[experimental.NakedReceiverMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { IOUtils . copy ( in , new NullOutputStream () ) ; } return checksum ; MST[ReturnValsMutator]MSP[] } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR5Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
} while ( i < n && url . charAt ( i ) == '%' ); MST[ConditionalsBoundaryMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ABSMutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[ReturnValsMutator]MSP[] } try ( Reader input1 = charsetName == null
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; MST[ArgumentPropagationMutator]MSP[] }
size += sizeOf0 ( file ) ; MST[rv.AOR3Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
File file = null ; for ( final String name : names ) { MST[rv.UOI2Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR5Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[InlineConstantMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR2Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter , final boolean includeSubDirectories ) { validateListFilesParameters ( directory , fileFilter ) ; final IOFileFilter effFileFilter = setUpEffectiveFileFilter ( fileFilter ) ; final IOFileFilter effDirFilter = setUpEffectiveDirFilter ( dirFilter ) ; MST[ArgumentPropagationMutator]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI3Mutator]MSP[] } return urls ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[NonVoidMethodCallMutator]MSP[]
return false ; MST[InlineConstantMutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[rv.ROR2Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.UOI1Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ABSMutator]MSP[] try { do {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR6Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; MST[VoidMethodCallMutator]MSP[] } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ; MST[EmptyObjectReturnValsMutator]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ROR1Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
if ( ! destDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ROR2Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[VoidMethodCallMutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR3Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] return sizeOfDirectory0 ( file ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR5Mutator]MSP[] return true ; }
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[NegateConditionalsMutator]MSP[]
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[rv.ROR4Mutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
if ( ! destDir . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[rv.ROR4Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[ConstructorCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR1Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
size += sizeOf0 ( file ) ; MST[rv.AOD1Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
throws IOException { final boolean file1Exists = file1 . exists () ; MST[NonVoidMethodCallMutator]MSP[] if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[NonVoidMethodCallMutator]MSP[] final int n = url . length () ;
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( ! file . exists () ) { MST[rv.ROR5Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[NegateConditionalsMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[experimental.NakedReceiverMutator]MSP[] filename = decodeUrl ( filename ) ;
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[InlineConstantMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
if ( null != exception ) { throw exception ; } } private static File [] verifiedListFiles ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = directory + lr_42 ; throw new IllegalArgumentException ( message ) ; }
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI4Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.CRCR5Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectoryOnExit ( file ) ; MST[VoidMethodCallMutator]MSP[] } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ABSMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[NonVoidMethodCallMutator]MSP[]
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; }
if ( ! directory . exists () ) { MST[rv.ROR5Mutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[rv.CRCR6Mutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[ConstructorCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
checksum ( file , crc ) ; return crc . getValue () ; MST[PrimitiveReturnsMutator]MSP[] } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_2 ) ; } File file = directory ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR3Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.CRCR5Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.CRCR1Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
if ( files == null ) { MST[NegateConditionalsMutator]MSP[] return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[rv.UOI1Mutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[ConstructorCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( includeSubDirectories ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[rv.CRCR5Mutator]MSP[] }
if ( ! directory . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[NonVoidMethodCallMutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI1Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ABSMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR5Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
if ( ! directory . exists () ) { MST[NegateConditionalsMutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NegateConditionalsMutator]MSP[] destDir . mkdirs () ; }
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; MST[ArgumentPropagationMutator]MSP[] } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; MST[NonVoidMethodCallMutator]MSP[] final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ;
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { MST[ConstructorCallMutator]MSP[] IOUtils . copy ( in , new NullOutputStream () ) ; } return checksum ; } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( srcFile . isDirectory () ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[rv.UOI3Mutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
if ( file . exists () ) { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[ConstructorCallMutator]MSP[] }
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR5Mutator]MSP[] }
throw new IllegalArgumentException ( lr_20 + directory ) ; } if ( fileFilter == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_21 ) ; } } private static IOFileFilter setUpEffectiveFileFilter ( final IOFileFilter fileFilter ) {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR4Mutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ; MST[ConstructorCallMutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[experimental.NakedReceiverMutator]MSP[] } return suffixes ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . isDirectory () ) {
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[InlineConstantMutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
if ( ! destDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[NegateConditionalsMutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
return isFileNewer ( file , reference . lastModified () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; }
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[rv.UOI2Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI4Mutator]MSP[] } else {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] DirectoryFileFilter . INSTANCE ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[rv.ROR2Mutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[NonVoidMethodCallMutator]MSP[] } }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[NegateConditionalsMutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.UOI3Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.UOI2Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; MST[NonVoidMethodCallMutator]MSP[] }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; MST[VoidMethodCallMutator]MSP[] if ( srcDir . exists () ) { throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[rv.ROR1Mutator]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.ABSMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR5Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ROR1Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( ! destDir . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI1Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR2Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[ConditionalsBoundaryMutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[ConstructorCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ROR1Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; MST[rv.UOI1Mutator]MSP[] } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOD2Mutator]MSP[] boolean wasInterrupted = false ; try {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[NonVoidMethodCallMutator]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final File [] files = directory . listFiles () ; if ( files == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.UOI1Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR5Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[rv.UOI2Mutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
} catch ( final Exception ignored ) { return false ; MST[InlineConstantMutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[ConstructorCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
try ( OutputStream out = openOutputStream ( destination ) ) { IOUtils . copy ( source , out ) ; } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[InlineConstantMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[rv.CRCR3Mutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[NonVoidMethodCallMutator]MSP[] }
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ; MST[experimental.BigIntegerMutator]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.UOI2Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[InlineConstantMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR3Mutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[rv.UOI1Mutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[experimental.NakedReceiverMutator]MSP[] return true ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[InlineConstantMutator]MSP[] }
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[rv.UOI2Mutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI4Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.CRCR6Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[rv.ABSMutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[rv.CRCR2Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[rv.CRCR3Mutator]MSP[] }
throw new IOException ( lr_40 + directory ) ; MST[ConstructorCallMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[rv.UOI4Mutator]MSP[]
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI2Mutator]MSP[]
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ; MST[NonVoidMethodCallMutator]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
return new FileOutputStream ( file , append ) ; MST[rv.UOI4Mutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[InlineConstantMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
return isFileNewer ( file , reference . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
if ( files == null ) { MST[rv.ROR5Mutator]MSP[] return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.UOI3Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ; MST[ReturnValsMutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[ConstructorCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[rv.ROR2Mutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[ArgumentPropagationMutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI1Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI2Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new IOException ( lr_41 + src + lr_42 ) ; } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; MST[ConstructorCallMutator]MSP[] }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[rv.ROR3Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[rv.ROR2Mutator]MSP[] if ( file . isDirectory () ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.UOI1Mutator]MSP[] try { do {
if ( ! file . exists () ) { MST[rv.ROR4Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; } File file = directory ;
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[rv.ROR2Mutator]MSP[] bytes . flip () ;
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[rv.CRCR5Mutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[NullReturnValsMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[rv.UOI4Mutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
for ( final String name : names ) { MST[rv.ABSMutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR3Mutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[NonVoidMethodCallMutator]MSP[] } } }
if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = directory + lr_47 ; throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
writeLines ( file , null , lines , lineEnding , append ) ; MST[rv.UOI2Mutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR5Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[NonVoidMethodCallMutator]MSP[] lr_50 + directory + lr_51
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ROR5Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[ConstructorCallMutator]MSP[] } }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
public static String readFileToString ( final File file , final String encoding ) throws IOException { return readFileToString ( file , Charsets . toCharset ( encoding ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } @Deprecated public static String readFileToString ( final File file ) throws IOException {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] if ( includeSubDirectories ) {
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[rv.CRCR4Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( file == null ) { return false ; MST[rv.CRCR1Mutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[rv.ROR2Mutator]MSP[]
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOD1Mutator]MSP[] boolean wasInterrupted = false ; try {
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; MST[NonVoidMethodCallMutator]MSP[] connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; MST[VoidMethodCallMutator]MSP[] }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.UOI4Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR2Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR5Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
throw new IllegalArgumentException ( MST[ConstructorCallMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[VoidMethodCallMutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
writeLines ( file , encoding , lines , null , false ) ; MST[InlineConstantMutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ROR2Mutator]MSP[]
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[]
return false ; MST[rv.CRCR5Mutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
if ( ! directory . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.ROR2Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( srcLen != dstLen ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[ConstructorCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
return false ; } return file . lastModified () > timeMillis ; MST[BooleanTrueReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
} } return size ; MST[ReturnValsMutator]MSP[] } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.ABSMutator]MSP[] } return urls ;
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } } public static File toFile ( final URL url ) {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.ABSMutator]MSP[]
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR5Mutator]MSP[]
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR2Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[rv.UOI4Mutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; }
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static File toFile ( final URL url ) {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[ConstructorCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) { MST[ConstructorCallMutator]MSP[]
File file = null ; for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR5Mutator]MSP[] return false ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; }
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[ConstructorCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR3Mutator]MSP[] }
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_26 ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.CRCR5Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[rv.CRCR2Mutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI2Mutator]MSP[] } return suffixes ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( srcLen != dstLen ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[NegateConditionalsMutator]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[rv.ROR4Mutator]MSP[]
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.CRCR3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; MST[NonVoidMethodCallMutator]MSP[] }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[experimental.NakedReceiverMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR1Mutator]MSP[] destDir . mkdirs () ; }
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI3Mutator]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR4Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[rv.UOI4Mutator]MSP[] }
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI2Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR2Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] if ( includeSubDirectories ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ROR3Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ; MST[NonVoidMethodCallMutator]MSP[]
throw new IllegalArgumentException ( lr_20 + directory ) ; } if ( fileFilter == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_21 ) ; } } private static IOFileFilter setUpEffectiveFileFilter ( final IOFileFilter fileFilter ) {
for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[experimental.NakedReceiverMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[NegateConditionalsMutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
return file . length () ; } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ; MST[NonVoidMethodCallMutator]MSP[]
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[rv.ROR5Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[rv.UOI3Mutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
size += sizeOf0 ( file ) ; MST[rv.AOD2Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
return readFileToString ( file , Charset . defaultCharset () ) ; } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { MST[NonVoidMethodCallMutator]MSP[] final long fileLength = file . length () ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI1Mutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[ConstructorCallMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) {
if ( ! srcDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[rv.CRCR6Mutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
throw new IOException ( lr_41 + src + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[rv.ABSMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; MST[ConstructorCallMutator]MSP[] }
if ( srcDir == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
throw new IOException ( lr_5 + file + lr_6 ) ; MST[ConstructorCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! srcDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
if ( ! reference . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[] openOutputStream ( file ) . close () ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI2Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[ConstructorCallMutator]MSP[] } if ( destFile . isDirectory () ) {
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
for ( final File srcFile : srcFiles ) { MST[rv.ABSMutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR1Mutator]MSP[] boolean wasInterrupted = false ; try {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[ReturnValsMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR3Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[NonVoidMethodCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[rv.CRCR3Mutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[NonVoidMethodCallMutator]MSP[] return files ;
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[VoidMethodCallMutator]MSP[]
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[VoidMethodCallMutator]MSP[] }
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; MST[ReturnValsMutator]MSP[] } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.CRCR3Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI1Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( srcLen != dstLen ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
return BigInteger . valueOf ( file . length () ) ; } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; MST[NonVoidMethodCallMutator]MSP[] } private static long sizeOfDirectory0 ( final File directory ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[NonVoidMethodCallMutator]MSP[]
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR3Mutator]MSP[]
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ROR5Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[rv.UOI1Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[rv.CRCR3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR4Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; MST[VoidMethodCallMutator]MSP[] if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[rv.CRCR6Mutator]MSP[] }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; MST[rv.UOI4Mutator]MSP[] if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
if ( ! src . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
throw new IOException ( lr_41 + src + lr_42 ) ; } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_43 ) ; }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[NegateConditionalsMutator]MSP[] final int n = url . length () ;
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI2Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[NonVoidMethodCallMutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR3Mutator]MSP[] try { do {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[rv.ROR1Mutator]MSP[]
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; MST[ReturnValsMutator]MSP[] } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ROR1Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.UOI1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI1Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
if ( ! srcDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return; } if ( ! isSymlink ( directory ) ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI4Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . isDirectory () ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ROR5Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[ConstructorCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[ConstructorCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( srcDir == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI4Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR5Mutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
return new FileOutputStream ( file , append ) ; MST[rv.ABSMutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOD1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { IOUtils . copy ( in , new NullOutputStream () ) ; MST[NonVoidMethodCallMutator]MSP[] } return checksum ; } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
if ( destDir == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[rv.CRCR6Mutator]MSP[] }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
if ( null != exception ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[rv.ROR3Mutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR5Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! reference . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NegateConditionalsMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI4Mutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[rv.ROR3Mutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
return BigInteger . valueOf ( file . length () ) ; MST[ReturnValsMutator]MSP[] } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; } private static long sizeOfDirectory0 ( final File directory ) {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[experimental.NakedReceiverMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR5Mutator]MSP[]
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; MST[rv.CRCR1Mutator]MSP[] for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[ConstructorCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ; MST[NonVoidMethodCallMutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR6Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[ArgumentPropagationMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR3Mutator]MSP[] return false ; }
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI2Mutator]MSP[] } return urls ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
writeLines ( file , null , lines , lineEnding , append ) ; MST[rv.ABSMutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; if ( parent == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
if ( ! destDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; MST[rv.CRCR3Mutator]MSP[] try {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[InlineConstantMutator]MSP[] } try ( Reader input1 = charsetName == null
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ; MST[ArgumentPropagationMutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[NonVoidMethodCallMutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR4Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[NegateConditionalsMutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR6Mutator]MSP[] }
while ( ! file . exists () ) { MST[rv.ROR2Mutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR5Mutator]MSP[] final int n = url . length () ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] try { do {
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( destDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[experimental.NakedReceiverMutator]MSP[]
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[VoidMethodCallMutator]MSP[] }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[ConstructorCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[experimental.NakedReceiverMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.CRCR6Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.ABSMutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; MST[NonVoidMethodCallMutator]MSP[] if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[NegateConditionalsMutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[rv.ABSMutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] return sizeOfDirectory0 ( file ) ; }
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
return readFileToString ( file , Charset . defaultCharset () ) ; MST[ReturnValsMutator]MSP[] } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { final long fileLength = file . length () ;
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final String canonicalParent = directory . getCanonicalPath () ; final String canonicalChild = child . getCanonicalPath () ; return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static void cleanDirectory ( final File directory ) throws IOException {
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI2Mutator]MSP[]
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ABSMutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[NegateConditionalsMutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR3Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.ABSMutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[InlineConstantMutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR6Mutator]MSP[] }
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI4Mutator]MSP[] }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[rv.CRCR5Mutator]MSP[]
throw new IOException ( lr_41 + src + lr_42 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR6Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
} catch ( final Exception ignored ) { return false ; } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_45 ) ; }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[NegateConditionalsMutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR1Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( ! directory . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[ConstructorCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[rv.UOI1Mutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[VoidMethodCallMutator]MSP[]
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR3Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ROR5Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; MST[NullReturnValsMutator]MSP[] } public static URL [] toURLs ( final File [] files ) throws IOException {
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; MST[ReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[rv.ROR5Mutator]MSP[]
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; MST[ConstructorCallMutator]MSP[] }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[rv.ROR5Mutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NegateConditionalsMutator]MSP[] destDir . mkdirs () ; }
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[rv.CRCR5Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; MST[ConstructorCallMutator]MSP[] } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) {
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[NonVoidMethodCallMutator]MSP[] }
validateMoveParameters ( srcDir , destDir ) ; MST[VoidMethodCallMutator]MSP[] if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ROR4Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static LineIterator lineIterator ( final File file , final String encoding ) throws IOException { InputStream in = null ; try { in = openInputStream ( file ) ; MST[NonVoidMethodCallMutator]MSP[] return IOUtils . lineIterator ( in , encoding ) ; } catch ( final IOException | RuntimeException ex ) {
if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; MST[VoidMethodCallMutator]MSP[] }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[NonVoidMethodCallMutator]MSP[] } } }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; MST[NonVoidMethodCallMutator]MSP[] if ( ! success ) { throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[ReturnValsMutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR1Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR1Mutator]MSP[] }
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR1Mutator]MSP[] } @Deprecated
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
return IOUtils . copyLarge ( fis , output ) ; MST[PrimitiveReturnsMutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.UOI4Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI1Mutator]MSP[] } return urls ;
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[rv.ROR4Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR3Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI3Mutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[VoidMethodCallMutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[ArgumentPropagationMutator]MSP[] final int n = url . length () ;
if ( file == null ) { return false ; MST[InlineConstantMutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR4Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ROR5Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[rv.UOI4Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { return; } if ( ! isSymlink ( directory ) ) { MST[rv.ROR3Mutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; MST[ConstructorCallMutator]MSP[] } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[rv.CRCR6Mutator]MSP[] }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR4Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
File file = null ; for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[ConstructorCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ; MST[ArgumentPropagationMutator]MSP[]
} public static Iterator < File > iterateFiles ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFiles ( directory , fileFilter , dirFilter ) . iterator () ; MST[NullReturnValsMutator]MSP[] }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[rv.CRCR3Mutator]MSP[] }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.CRCR3Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
} catch ( final Exception ignored ) { return false ; } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_45 ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.CRCR6Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR1Mutator]MSP[] }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; MST[InlineConstantMutator]MSP[] for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[rv.UOI2Mutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ROR1Mutator]MSP[]
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[rv.UOI3Mutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[NegateConditionalsMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] if ( includeSubDirectories ) {
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ;
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR3Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; MST[rv.UOI2Mutator]MSP[] if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
files . add ( file ) ; MST[NonVoidMethodCallMutator]MSP[] } innerListFiles ( files , file , filter , includeSubDirectories ) ; } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
throw new IllegalArgumentException ( lr_20 + directory ) ; } if ( fileFilter == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_21 ) ; } } private static IOFileFilter setUpEffectiveFileFilter ( final IOFileFilter fileFilter ) {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR4Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[rv.CRCR4Mutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[ConstructorCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR6Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR5Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] destDir . mkdirs () ; }
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; }
return readFileToString ( file , Charset . defaultCharset () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { final long fileLength = file . length () ;
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[ReturnValsMutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ABSMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final File destFile = new File ( destDir , srcFile . getName () ) ; MST[ConstructorCallMutator]MSP[] copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ROR4Mutator]MSP[]
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( ! src . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ROR2Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( ! destDir . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { return; } if ( ! isSymlink ( directory ) ) { MST[NonVoidMethodCallMutator]MSP[]
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[InlineConstantMutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR3Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] bytes . flip () ;
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI2Mutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[ReturnValsMutator]MSP[] } return file . length () ; }
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[rv.ABSMutator]MSP[]
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null MST[rv.ROR5Mutator]MSP[]
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; MST[ConstructorCallMutator]MSP[] } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[ConstructorCallMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ; MST[ReturnValsMutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR3Mutator]MSP[]
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI3Mutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[VoidMethodCallMutator]MSP[] }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
for ( final String name : names ) { MST[rv.ABSMutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
File file = null ; for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[rv.UOI1Mutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI4Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
if ( ! reference . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[ConditionalsBoundaryMutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; MST[VoidMethodCallMutator]MSP[] if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
return BigInteger . valueOf ( file . length () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; } private static long sizeOfDirectory0 ( final File directory ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } }
if ( srcLen != dstLen ) { MST[rv.UOI1Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR6Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.UOI2Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
size += sizeOf0 ( file ) ; MST[NonVoidMethodCallMutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
if ( ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[rv.CRCR1Mutator]MSP[] }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI3Mutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR6Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; MST[rv.ABSMutator]MSP[] if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.CRCR1Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI4Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
File file = null ; for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter , final boolean includeSubDirectories ) { validateListFilesParameters ( directory , fileFilter ) ; final IOFileFilter effFileFilter = setUpEffectiveFileFilter ( fileFilter ) ; final IOFileFilter effDirFilter = setUpEffectiveDirFilter ( dirFilter ) ; MST[NonVoidMethodCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; MST[EmptyObjectReturnValsMutator]MSP[] } public static String byteCountToDisplaySize ( final long size ) {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[NonVoidMethodCallMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
public static Collection < File > listFiles ( final File directory , final String [] extensions , final boolean recursive ) { IOFileFilter filter ; if ( extensions == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] filter = TrueFileFilter . INSTANCE ; } else {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI3Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return sizeOfDirectory0 ( file ) ; }
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_26 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[ReturnValsMutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
if ( ! reference . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR4Mutator]MSP[] return true ; }
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) MST[ConstructorCallMutator]MSP[] : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR6Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ; MST[BooleanFalseReturnValsMutator]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI4Mutator]MSP[] } return urls ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; MST[rv.CRCR1Mutator]MSP[] try {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[rv.ROR3Mutator]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } }
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
return isFileNewer ( file , date . getTime () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
try { if ( in != null ) { MST[NegateConditionalsMutator]MSP[] in . close () ; } } catch ( final IOException e ) { ex . addSuppressed ( e ) ; } throw ex ; } } public static LineIterator lineIterator ( final File file ) throws IOException {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ROR1Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ABSMutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; if ( parent == null ) { MST[rv.ROR5Mutator]MSP[] return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[InlineConstantMutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.UOI3Mutator]MSP[]
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[rv.ABSMutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI3Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_40 + directory ) ; MST[ConstructorCallMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
if ( srcLen != dstLen ) { MST[rv.UOI4Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR3Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[experimental.BigIntegerMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[rv.CRCR5Mutator]MSP[] }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[experimental.NakedReceiverMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final Date date ) {
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR5Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR3Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.CRCR6Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[rv.ROR3Mutator]MSP[] if ( srcFile . isDirectory () ) {
return isFileNewer ( file , reference . lastModified () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final boolean rename = srcDir . renameTo ( destDir ) ; MST[NonVoidMethodCallMutator]MSP[] if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR3Mutator]MSP[] final int n = url . length () ;
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.UOI2Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[NegateConditionalsMutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
File file = null ; for ( final String name : names ) { if ( file == null ) { MST[NegateConditionalsMutator]MSP[] file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[rv.UOI4Mutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[experimental.NakedReceiverMutator]MSP[] } }
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ABSMutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI1Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI1Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI3Mutator]MSP[] }
writeLines ( file , encoding , lines , null , append ) ; MST[rv.ABSMutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[rv.ROR3Mutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
if ( srcDir == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR5Mutator]MSP[] boolean wasInterrupted = false ; try {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR3Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return sizeOfDirectory0 ( file ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.UOI3Mutator]MSP[] try { do {
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
return file . length () ; } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; MST[VoidMethodCallMutator]MSP[] return sizeOfDirectoryBig0 ( directory ) ; } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR5Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[ConstructorCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[rv.UOI4Mutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
throw new IOException ( lr_40 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.ABSMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR4Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.UOI3Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR3Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
writeLines ( file , encoding , lines , null , false ) ; MST[rv.CRCR5Mutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] destDir . mkdirs () ; }
return file . length () ; MST[PrimitiveReturnsMutator]MSP[] } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI1Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR2Mutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR1Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[rv.UOI1Mutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR3Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR2Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
return false ; } return file . lastModified () > timeMillis ; MST[NegateConditionalsMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final String [] suffixes = toSuffixes ( extensions ) ; MST[NonVoidMethodCallMutator]MSP[] filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] writeStringToFile ( file , str , encoding , append ) ;
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[VoidMethodCallMutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[NegateConditionalsMutator]MSP[] return false ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[rv.UOI3Mutator]MSP[] }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ABSMutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} catch ( final Exception ignored ) { return false ; MST[ReturnValsMutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR5Mutator]MSP[] }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] if ( includeSubDirectories ) {
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[rv.CRCR4Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR6Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR5Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_2 ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.CRCR6Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.CRCR3Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR4Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IllegalArgumentException ( lr_58 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final boolean file1Exists = file1 . exists () ; MST[NonVoidMethodCallMutator]MSP[] if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( file == null ) { MST[rv.ROR5Mutator]MSP[] return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; MST[NonVoidMethodCallMutator]MSP[] }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[InlineConstantMutator]MSP[] }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[NegateConditionalsMutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) {
for ( final String name : names ) { MST[rv.UOI2Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[NonVoidMethodCallMutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( srcFile . isDirectory () ) {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { MST[NegateConditionalsMutator]MSP[] if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[InlineConstantMutator]MSP[] } @Deprecated
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] final String message = lr_50 + directory + lr_51
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR2Mutator]MSP[] boolean wasInterrupted = false ; try {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR2Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
try ( InputStream in = openInputStream ( file ) ) { return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; MST[ArgumentPropagationMutator]MSP[] } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI4Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( null != exception ) { MST[rv.ROR5Mutator]MSP[] throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR6Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; MST[ConstructorCallMutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
public static Collection < File > listFiles ( final File directory , final String [] extensions , final boolean recursive ) { IOFileFilter filter ; if ( extensions == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] filter = TrueFileFilter . INSTANCE ; } else {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR2Mutator]MSP[] }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final File dstFile = new File ( destDir , srcFile . getName () ) ; MST[ConstructorCallMutator]MSP[] if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) {
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { MST[rv.ROR5Mutator]MSP[] for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.ABSMutator]MSP[] } return suffixes ; }
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
if ( file == null ) { return false ; MST[rv.CRCR3Mutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
return isFileNewer ( file , reference . lastModified () ) ; MST[ReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[NonVoidMethodCallMutator]MSP[] } }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
size += sizeOf0 ( file ) ; MST[rv.UOI3Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; if ( parent == null ) { return; } forceMkdir ( parent ) ; MST[VoidMethodCallMutator]MSP[] } public static long sizeOf ( final File file ) {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } try ( Reader input1 = charsetName == null
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[rv.ROR3Mutator]MSP[]
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[NonVoidMethodCallMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
for ( final File srcFile : srcFiles ) { MST[rv.UOI2Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.UOI1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IllegalArgumentException ( MST[NonVoidMethodCallMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[ConstructorCallMutator]MSP[] } return suffixes ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[NonVoidMethodCallMutator]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI3Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ABSMutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[rv.CRCR6Mutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
return new FileOutputStream ( file , append ) ; MST[rv.UOI2Mutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
if ( ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () ) MST[NonVoidMethodCallMutator]MSP[]
throw new NullPointerException ( lr_38 ) ; MST[ConstructorCallMutator]MSP[] } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR6Mutator]MSP[]
FileUtils . deleteQuietly ( destFile ) ; MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_70 + srcFile + lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
return new FileInputStream ( file ) ; MST[ReturnValsMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[rv.ROR3Mutator]MSP[]
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[rv.ROR2Mutator]MSP[]
if ( destDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
return BigInteger . valueOf ( file . length () ) ; MST[NullReturnValsMutator]MSP[] } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; } private static long sizeOfDirectory0 ( final File directory ) {
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] }
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[rv.CRCR4Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR5Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[VoidMethodCallMutator]MSP[]
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.ABSMutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[experimental.NakedReceiverMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[] } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { IOUtils . copy ( in , new NullOutputStream () ) ; MST[ConstructorCallMutator]MSP[] } return checksum ; } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[rv.UOI1Mutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ROR2Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.UOI1Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR5Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI3Mutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( file == null ) { return false ; MST[rv.CRCR6Mutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI3Mutator]MSP[]
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[NegateConditionalsMutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ROR2Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
return readFileToString ( file , Charset . defaultCharset () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { final long fileLength = file . length () ;
return isFileNewer ( file , date . getTime () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[NegateConditionalsMutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( ! reference . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[rv.UOI2Mutator]MSP[] i += 3 ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[InlineConstantMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR6Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
try ( InputStream in = openInputStream ( file ) ) { return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; MST[experimental.NakedReceiverMutator]MSP[] if ( parent == null ) { return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR1Mutator]MSP[] destDir . mkdirs () ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.UOI2Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR5Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[ConstructorCallMutator]MSP[]
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[rv.CRCR5Mutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR5Mutator]MSP[] try { do {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[InlineConstantMutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR5Mutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.UOI2Mutator]MSP[]
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.UOI3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ROR2Mutator]MSP[] try { do {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[rv.ROR5Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[ConstructorCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI4Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; MST[ConstructorCallMutator]MSP[] } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[NonVoidMethodCallMutator]MSP[] } } }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[rv.ABSMutator]MSP[] i += 3 ;
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; MST[rv.CRCR6Mutator]MSP[] for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.CRCR3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR5Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
try { if ( in != null ) { in . close () ; MST[VoidMethodCallMutator]MSP[] } } catch ( final IOException e ) { ex . addSuppressed ( e ) ; } throw ex ; } } public static LineIterator lineIterator ( final File file ) throws IOException {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR3Mutator]MSP[] } try ( Reader input1 = charsetName == null
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[rv.UOI1Mutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[NonVoidMethodCallMutator]MSP[] lr_50 + directory + lr_51
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[ConstructorCallMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[NegateConditionalsMutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI2Mutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ABSMutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ; MST[NullReturnValsMutator]MSP[]
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] final String message = lr_50 + directory + lr_51
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[NegateConditionalsMutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
return IOUtils . copyLarge ( fis , output ) ; MST[ReturnValsMutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.ABSMutator]MSP[]
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.ABSMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ROR3Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.CRCR3Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
final String canonicalParent = directory . getCanonicalPath () ; final String canonicalChild = child . getCanonicalPath () ; MST[NonVoidMethodCallMutator]MSP[] return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; } public static void cleanDirectory ( final File directory ) throws IOException {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
return false ; } return file . lastModified () > timeMillis ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( srcLen != dstLen ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[InlineConstantMutator]MSP[] filename = decodeUrl ( filename ) ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR4Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; } else { files . add ( file ) ; MST[NonVoidMethodCallMutator]MSP[] } } } } public static Collection < File > listFiles (
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.ROR4Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR2Mutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[InlineConstantMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
throw new IOException ( lr_41 + src + lr_42 ) ; } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_43 ) ; }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
} else { final File parent = file . getParentFile () ; if ( parent != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { IOUtils . copy ( in , new NullOutputStream () ) ; } return checksum ; MST[NullReturnValsMutator]MSP[] } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
final File [] files = directory . listFiles () ; MST[NonVoidMethodCallMutator]MSP[] if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR4Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[experimental.BigIntegerMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[NonVoidMethodCallMutator]MSP[] bytes . flip () ;
final File destFile = new File ( destDir , srcFile . getName () ) ; MST[NonVoidMethodCallMutator]MSP[] copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[NegateConditionalsMutator]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.UOI2Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR2Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.UOI4Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ConditionalsBoundaryMutator]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.ABSMutator]MSP[] } return urls ;
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[rv.UOI1Mutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR4Mutator]MSP[] boolean wasInterrupted = false ; try {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! reference . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[rv.ROR1Mutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[InlineConstantMutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[InlineConstantMutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[EmptyObjectReturnValsMutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
throw new IOException ( lr_41 + src + lr_42 ) ; } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_43 ) ; }
public static String readFileToString ( final File file , final String encoding ) throws IOException { return readFileToString ( file , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static String readFileToString ( final File file ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; MST[rv.CRCR3Mutator]MSP[] for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.ABSMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[rv.ABSMutator]MSP[] return files ;
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } try ( Reader input1 = charsetName == null
size += sizeOf0 ( file ) ; MST[rv.AOR1Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ABSMutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
return isFileNewer ( file , reference . lastModified () ) ; } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_57 ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI4Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR2Mutator]MSP[] try { do {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.UOI3Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR3Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) { MST[rv.ROR5Mutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; MST[ReturnValsMutator]MSP[] }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[rv.CRCR3Mutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR5Mutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[NonVoidMethodCallMutator]MSP[] if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ;
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[ReturnValsMutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR6Mutator]MSP[] } try ( Reader input1 = charsetName == null
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI2Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ROR3Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
return IOUtils . copyLarge ( fis , output ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) { MST[NegateConditionalsMutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[ConstructorCallMutator]MSP[] }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ABSMutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ROR2Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; MST[NonVoidMethodCallMutator]MSP[] } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
return IOUtils . copyLarge ( fis , output ) ; MST[rv.UOI1Mutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[NegateConditionalsMutator]MSP[] if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
return BigInteger . valueOf ( file . length () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; } private static long sizeOfDirectory0 ( final File directory ) {
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[InlineConstantMutator]MSP[] }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.ABSMutator]MSP[] } return suffixes ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[ReturnValsMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[InlineConstantMutator]MSP[] }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NegateConditionalsMutator]MSP[] return true ; }
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR2Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI3Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[NonVoidMethodCallMutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI1Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.ABSMutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
if ( ! src . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[experimental.NakedReceiverMutator]MSP[] } }
throw new IOException ( lr_40 + directory ) ; MST[experimental.NakedReceiverMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
return BigInteger . valueOf ( file . length () ) ; } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; MST[ReturnValsMutator]MSP[] } private static long sizeOfDirectory0 ( final File directory ) {
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[NonVoidMethodCallMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { final int n = url . length () ; MST[NonVoidMethodCallMutator]MSP[]
public static void copyInputStreamToFile ( final InputStream source , final File destination ) throws IOException { try ( InputStream in = source ) { copyToFile ( in , destination ) ; MST[VoidMethodCallMutator]MSP[] } } public static void copyToFile ( final InputStream source , final File destination ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI2Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR2Mutator]MSP[]
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR4Mutator]MSP[] filename = decodeUrl ( filename ) ;
public static void copyURLToFile ( final URL source , final File destination ) throws IOException { copyInputStreamToFile ( source . openStream () , destination ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void copyURLToFile ( final URL source , final File destination ,
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[rv.ABSMutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[PrimitiveReturnsMutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[rv.UOI2Mutator]MSP[] } } public static File toFile ( final URL url ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[rv.CRCR5Mutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI2Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[rv.ROR3Mutator]MSP[]
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; } File file = directory ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; MST[InlineConstantMutator]MSP[] try {
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[experimental.NakedReceiverMutator]MSP[]
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . isDirectory () ) {
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[rv.ROR3Mutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
if ( ! destDir . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } } public static File toFile ( final URL url ) {
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI3Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[InlineConstantMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
try ( OutputStream out = openOutputStream ( destination ) ) { IOUtils . copy ( source , out ) ; } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) { MST[rv.ROR5Mutator]MSP[]
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ROR3Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI3Mutator]MSP[] } else {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[NonVoidMethodCallMutator]MSP[]
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI1Mutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.UOI3Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR1Mutator]MSP[] filename = decodeUrl ( filename ) ;
writeByteArrayToFile ( file , data , off , len , false ) ; MST[InlineConstantMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
File file = null ; for ( final String name : names ) { MST[rv.ABSMutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR5Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[InlineConstantMutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
if ( srcLen != dstLen ) { MST[rv.UOI4Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
} catch ( final Exception ignored ) { return false ; } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_45 ) ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.ROR1Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR3Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
public static void copyURLToFile ( final URL source , final File destination ) throws IOException { copyInputStreamToFile ( source . openStream () , destination ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyURLToFile ( final URL source , final File destination ,
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[InlineConstantMutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.ABSMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
return false ; } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; MST[ConstructorCallMutator]MSP[] }
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_2 ) ; }
if ( ! directory . exists () ) { MST[rv.ROR4Mutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; MST[PrimitiveReturnsMutator]MSP[] }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[NegateConditionalsMutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI1Mutator]MSP[] }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . isDirectory () ) {
try { if ( in != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] in . close () ; } } catch ( final IOException e ) { ex . addSuppressed ( e ) ; } throw ex ; } } public static LineIterator lineIterator ( final File file ) throws IOException {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ABSMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
File file = null ; for ( final String name : names ) { MST[rv.UOI2Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[ConstructorCallMutator]MSP[] } }
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
checksum ( file , crc ) ; return crc . getValue () ; MST[ReturnValsMutator]MSP[] } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; }
public static Collection < File > listFiles ( final File directory , final String [] extensions , final boolean recursive ) { IOFileFilter filter ; if ( extensions == null ) { MST[NegateConditionalsMutator]MSP[] filter = TrueFileFilter . INSTANCE ; } else {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[NonVoidMethodCallMutator]MSP[]
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] try { forceDelete ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[ArgumentPropagationMutator]MSP[]
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; MST[NonVoidMethodCallMutator]MSP[] } } return true ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR1Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI3Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[experimental.NakedReceiverMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR4Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] return sizeOfDirectory0 ( file ) ; }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[NonVoidMethodCallMutator]MSP[]
throw new IOException ( lr_41 + src + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[experimental.NakedReceiverMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
return file . length () ; MST[NonVoidMethodCallMutator]MSP[] } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.UOI1Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[NonVoidMethodCallMutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[ReturnValsMutator]MSP[] }
if ( ! directory . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; MST[EmptyObjectReturnValsMutator]MSP[] } }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR3Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! destDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
if ( ! destDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI3Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[rv.UOI2Mutator]MSP[] return files ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ROR4Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
} else { final File parent = file . getParentFile () ; MST[NonVoidMethodCallMutator]MSP[] if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[rv.CRCR5Mutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[experimental.BigIntegerMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ABSMutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] return sizeOfDirectory0 ( file ) ; }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final int n = url . length () ;
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] bytes . flip () ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ROR3Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI3Mutator]MSP[] destDir . mkdirs () ; }
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
throw new NullPointerException ( lr_26 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[rv.CRCR2Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI2Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[NonVoidMethodCallMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( file . exists () ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[rv.CRCR1Mutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[rv.UOI4Mutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[rv.UOI2Mutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI2Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[ReturnValsMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
if ( file == null ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; MST[NonVoidMethodCallMutator]MSP[] } }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[NegateConditionalsMutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI1Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
if ( destDir == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.UOI2Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[EmptyObjectReturnValsMutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
return lineIterator ( file , null ) ; MST[NullReturnValsMutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ROR1Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[rv.ABSMutator]MSP[] } } public static File toFile ( final URL url ) {
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.CRCR6Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[ReturnValsMutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR2Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[NegateConditionalsMutator]MSP[] if ( srcFile . isDirectory () ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[experimental.NakedReceiverMutator]MSP[] lr_50 + directory + lr_51
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[VoidMethodCallMutator]MSP[] }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) {
} catch ( final Exception ignored ) { return false ; MST[rv.CRCR3Mutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
if ( ! src . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; MST[NullReturnValsMutator]MSP[] }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR4Mutator]MSP[] destDir . mkdirs () ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[NonVoidMethodCallMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[ConstructorCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.CRCR1Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.UOI2Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI3Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
return IOUtils . copyLarge ( fis , output ) ; MST[rv.UOI4Mutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ROR3Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI3Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.UOI1Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; MST[NonVoidMethodCallMutator]MSP[] } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[rv.UOI2Mutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[NonVoidMethodCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
if ( destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI3Mutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter , final boolean includeSubDirectories ) { validateListFilesParameters ( directory , fileFilter ) ; final IOFileFilter effFileFilter = setUpEffectiveFileFilter ( fileFilter ) ; MST[ArgumentPropagationMutator]MSP[] final IOFileFilter effDirFilter = setUpEffectiveDirFilter ( dirFilter ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.UOI2Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ROR5Mutator]MSP[] try { do {
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR5Mutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[rv.CRCR5Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.UOI3Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR5Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR6Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.CRCR1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; MST[ConstructorCallMutator]MSP[] } File file = directory ;
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = lr_50 + directory + lr_51
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[NonVoidMethodCallMutator]MSP[] try { do {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { MST[rv.ROR5Mutator]MSP[] if ( url . getProtocol () . equals ( lr_24 ) == false ) {
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[rv.CRCR5Mutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI4Mutator]MSP[] }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[ConditionalsBoundaryMutator]MSP[] final int n = url . length () ;
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[ConstructorCallMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; MST[ReturnValsMutator]MSP[] } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[] openOutputStream ( file ) . close () ; }
size += sizeOf0 ( file ) ; MST[rv.AOR4Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
throw new NullPointerException ( lr_71 ) ; } return Files . isSymbolicLink ( file . toPath () ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.UOI3Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI4Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[NegateConditionalsMutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
for ( final File srcFile : srcFiles ) { MST[rv.UOI2Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
writeLines ( file , null , lines , lineEnding , append ) ; } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] deleteDirectory ( file ) ; } else {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[rv.CRCR5Mutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ROR5Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR1Mutator]MSP[] return true ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR1Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[rv.UOI1Mutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
while ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ; MST[NonVoidMethodCallMutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI3Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR1Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! srcDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
if ( ! directory . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] final String message = directory + lr_47 ; throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
File file = null ; for ( final String name : names ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ROR5Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI1Mutator]MSP[] } else {
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[NonVoidMethodCallMutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
if ( srcLen != dstLen ) { MST[rv.ABSMutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.UOI1Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[rv.CRCR1Mutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.UOI4Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR5Mutator]MSP[] final int n = url . length () ;
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
} catch ( final Exception ignored ) { return false ; MST[rv.CRCR6Mutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { return EMPTY_FILE_ARRAY ; MST[NullReturnValsMutator]MSP[] } final File [] files = new File [ urls . length ] ;
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[rv.ROR2Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR4Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! destDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[NegateConditionalsMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI1Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR3Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () ) MST[ConstructorCallMutator]MSP[]
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI4Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR6Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[rv.UOI3Mutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] }
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ROR1Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] }
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
} catch ( final Exception ignored ) { return false ; } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_45 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI2Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[rv.CRCR6Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[rv.ABSMutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
if ( ! destDir . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[rv.UOI2Mutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[experimental.BigIntegerMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
writeLines ( file , encoding , lines , null , append ) ; MST[rv.UOI3Mutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[InlineConstantMutator]MSP[] boolean wasInterrupted = false ; try {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ROR4Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR2Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[experimental.NakedReceiverMutator]MSP[] lr_50 + directory + lr_51
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; MST[NonVoidMethodCallMutator]MSP[] if ( parent == null ) { return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI3Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[InlineConstantMutator]MSP[] }
if ( ! reference . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.ABSMutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR6Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ROR2Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
return new FileOutputStream ( file , append ) ; MST[ReturnValsMutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; MST[rv.UOI2Mutator]MSP[] if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[InlineConstantMutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR5Mutator]MSP[] return false ; }
try ( InputStream in = openInputStream ( file ) ) { MST[NonVoidMethodCallMutator]MSP[] return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; }
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
} public static Iterator < File > iterateFiles ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFiles ( directory , fileFilter , dirFilter ) . iterator () ; MST[ReturnValsMutator]MSP[] }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; MST[ConstructorCallMutator]MSP[] } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
return IOUtils . copyLarge ( fis , output ) ; MST[rv.UOI2Mutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR6Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI3Mutator]MSP[] }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI3Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ROR1Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . isDirectory () ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( null != exception ) { throw exception ; } } private static File [] verifiedListFiles ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[rv.ROR3Mutator]MSP[] final String message = directory + lr_42 ; throw new IllegalArgumentException ( message ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[ConditionalsBoundaryMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
return BigInteger . valueOf ( file . length () ) ; } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectory0 ( directory ) ; MST[PrimitiveReturnsMutator]MSP[] } private static long sizeOfDirectory0 ( final File directory ) {
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI2Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[NonVoidMethodCallMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) {
if ( ! destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
return false ; } return file . lastModified () > timeMillis ; MST[ReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[rv.ROR4Mutator]MSP[]
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR4Mutator]MSP[] boolean wasInterrupted = false ; try {
if ( ! directory . exists () ) { MST[rv.ROR1Mutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
File file = null ; for ( final String name : names ) { if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; MST[ConstructorCallMutator]MSP[] } } return file ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[NullReturnValsMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; MST[rv.CRCR5Mutator]MSP[] for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[NegateConditionalsMutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.UOI3Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
if ( ! src . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[VoidMethodCallMutator]MSP[] }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.UOI3Mutator]MSP[] boolean wasInterrupted = false ; try {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ; MST[BooleanTrueReturnValsMutator]MSP[]
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[rv.CRCR2Mutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR4Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR6Mutator]MSP[] try { do {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[rv.ROR4Mutator]MSP[]
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[rv.CRCR3Mutator]MSP[]
while ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; MST[rv.ABSMutator]MSP[] if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[NonVoidMethodCallMutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ROR3Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ROR2Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[rv.UOI1Mutator]MSP[] i += 3 ;
public static String readFileToString ( final File file , final String encoding ) throws IOException { return readFileToString ( file , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static String readFileToString ( final File file ) throws IOException {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI4Mutator]MSP[]
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR3Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[rv.ABSMutator]MSP[] }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { MST[rv.ROR4Mutator]MSP[] if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[ReturnValsMutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IllegalArgumentException ( MST[experimental.NakedReceiverMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR3Mutator]MSP[] final int n = url . length () ;
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI3Mutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
throw new IOException ( lr_41 + src + lr_42 ) ; MST[ConstructorCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; MST[VoidMethodCallMutator]MSP[] if ( ! srcFile . delete () ) {
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.UOI4Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.UOI3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; MST[rv.CRCR6Mutator]MSP[] try {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ABSMutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[ConstructorCallMutator]MSP[] } } }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[ConstructorCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( null != exception ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw exception ; } } private static File [] verifiedListFiles ( final File directory ) throws IOException { if ( ! directory . exists () ) { final String message = directory + lr_42 ; throw new IllegalArgumentException ( message ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR3Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.CRCR6Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.ABSMutator]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[rv.UOI4Mutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.UOI1Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI4Mutator]MSP[]
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR2Mutator]MSP[] destDir . mkdirs () ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; MST[NonVoidMethodCallMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI3Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR1Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[experimental.NakedReceiverMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI1Mutator]MSP[] }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR5Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[ConstructorCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI4Mutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[rv.ROR2Mutator]MSP[] if ( srcFile . isDirectory () ) {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR5Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( ! reference . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
if ( srcLen != dstLen ) { MST[rv.UOI2Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
File file = null ; for ( final String name : names ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
return isFileNewer ( file , reference . lastModified () ) ; } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; MST[ConstructorCallMutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[experimental.NakedReceiverMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
return readLines ( file , Charsets . toCharset ( encoding ) ) ; MST[ReturnValsMutator]MSP[] } @Deprecated public static List < String > readLines ( final File file ) throws IOException { return readLines ( file , Charset . defaultCharset () ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR1Mutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.ABSMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[rv.ROR1Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ROR3Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[ArgumentPropagationMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[rv.UOI3Mutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[rv.UOI4Mutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
try ( InputStream input1 = new FileInputStream ( file1 ) ; MST[ConstructorCallMutator]MSP[] InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR6Mutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ROR2Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[NullReturnValsMutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.ABSMutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR5Mutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[NegateConditionalsMutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.UOI4Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ABSMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
throw new IOException ( lr_23 ) ; MST[ConstructorCallMutator]MSP[] } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOD1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR3Mutator]MSP[] destDir . mkdirs () ; }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[rv.ROR5Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI3Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR1Mutator]MSP[] return false ; }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[rv.UOI3Mutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
if ( ! file . exists () ) { MST[rv.ROR2Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[ConditionalsBoundaryMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.UOI1Mutator]MSP[]
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ROR2Mutator]MSP[]
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI2Mutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[]
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[rv.UOI1Mutator]MSP[]
File file = null ; for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR1Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI2Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR1Mutator]MSP[] boolean wasInterrupted = false ; try {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI2Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.CRCR1Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] if ( file . isDirectory () ) {
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[rv.CRCR1Mutator]MSP[] }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[experimental.NakedReceiverMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR2Mutator]MSP[] return true ; }
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
if ( destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; MST[VoidMethodCallMutator]MSP[] if ( srcFile . isDirectory () ) { throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[experimental.BigIntegerMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[rv.CRCR4Mutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; MST[NonVoidMethodCallMutator]MSP[] if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[rv.UOI1Mutator]MSP[]
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[rv.ABSMutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
IOUtils . writeLines ( lines , lineEnding , out , encoding ) ; MST[VoidMethodCallMutator]MSP[] } } public static void writeLines ( final File file , final Collection < ? > lines , final String lineEnding ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; MST[ConstructorCallMutator]MSP[] if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
if ( srcLen != dstLen ) { MST[rv.UOI3Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[ConstructorCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( url . getProtocol () . equals ( lr_24 ) == false ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[rv.UOI3Mutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.UOI2Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[ArgumentPropagationMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[InlineConstantMutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.UOI2Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.UOI4Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ROR4Mutator]MSP[] try { do {
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
if ( file == null ) { return false ; MST[rv.CRCR5Mutator]MSP[] } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) { MST[rv.ROR5Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[rv.ABSMutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[experimental.NakedReceiverMutator]MSP[] } return suffixes ; }
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[rv.CRCR6Mutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
return file . length () ; } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; MST[ReturnValsMutator]MSP[] } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
if ( ! src . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[rv.CRCR3Mutator]MSP[] }
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
return readLines ( file , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static List < String > readLines ( final File file ) throws IOException { return readLines ( file , Charset . defaultCharset () ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; MST[ConstructorCallMutator]MSP[] exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final Date date ) {
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI4Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[ReturnValsMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ROR5Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; MST[rv.CRCR6Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ABSMutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[rv.CRCR6Mutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[InlineConstantMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR1Mutator]MSP[]
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[PrimitiveReturnsMutator]MSP[] }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR2Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR2Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
} catch ( final Exception ignored ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[NonVoidMethodCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
+ lr_52 ; throw new IOException ( message ) ; MST[ConstructorCallMutator]MSP[] } } else { if ( ! directory . mkdirs () ) { if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; MST[VoidMethodCallMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ;
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.ABSMutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; MST[ConstructorCallMutator]MSP[] } return listFiles ( directory , filter , recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[NegateConditionalsMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[rv.ROR5Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
return false ; MST[rv.CRCR1Mutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
throw new IllegalArgumentException ( MST[NonVoidMethodCallMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[NegateConditionalsMutator]MSP[]
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[NegateConditionalsMutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
return new File ( filename ) ; MST[ReturnValsMutator]MSP[] } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { final int n = url . length () ;
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR1Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] return sizeOfDirectory0 ( file ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[NonVoidMethodCallMutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] final String message = lr_50 + directory + lr_51
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileOlder ( final File file , final Date date ) {
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[rv.ROR5Mutator]MSP[]
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[NonVoidMethodCallMutator]MSP[] } return suffixes ; }
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; MST[ReturnValsMutator]MSP[] }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
return IOUtils . copyLarge ( fis , output ) ; MST[rv.ABSMutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[NegateConditionalsMutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter , final boolean includeSubDirectories ) { validateListFilesParameters ( directory , fileFilter ) ; MST[VoidMethodCallMutator]MSP[] final IOFileFilter effFileFilter = setUpEffectiveFileFilter ( fileFilter ) ; final IOFileFilter effDirFilter = setUpEffectiveDirFilter ( dirFilter ) ;
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI1Mutator]MSP[] } return suffixes ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI1Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } try ( Reader input1 = charsetName == null
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[ConstructorCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[rv.ROR2Mutator]MSP[]
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) { MST[NegateConditionalsMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR3Mutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
try ( OutputStream out = openOutputStream ( destination ) ) { MST[NonVoidMethodCallMutator]MSP[] IOUtils . copy ( source , out ) ; } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.UOI3Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_2 ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.UOI2Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR4Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI1Mutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; MST[NonVoidMethodCallMutator]MSP[] destFile . setLastModified ( newLastModifed ) ; } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR3Mutator]MSP[] } @Deprecated
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) MST[NonVoidMethodCallMutator]MSP[] : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[NonVoidMethodCallMutator]MSP[]
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[rv.UOI4Mutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[NonVoidMethodCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ROR3Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
throw new IOException ( lr_41 + src + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI2Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
size += sizeOf0 ( file ) ; MST[rv.ABSMutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR3Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ROR5Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
if ( ! directory . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[InlineConstantMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[rv.CRCR6Mutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[NonVoidMethodCallMutator]MSP[] lr_50 + directory + lr_51
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] return sizeOfDirectory0 ( file ) ; } return file . length () ; }
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[rv.CRCR3Mutator]MSP[] }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.ROR2Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOD2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI4Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[rv.ROR1Mutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; MST[ConstructorCallMutator]MSP[] }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; }
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI4Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] }
public static LineIterator lineIterator ( final File file , final String encoding ) throws IOException { InputStream in = null ; try { in = openInputStream ( file ) ; return IOUtils . lineIterator ( in , encoding ) ; MST[NullReturnValsMutator]MSP[] } catch ( final IOException | RuntimeException ex ) {
checksum ( file , crc ) ; return crc . getValue () ; MST[NonVoidMethodCallMutator]MSP[] } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; } File file = directory ;
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; MST[EmptyObjectReturnValsMutator]MSP[] } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; MST[VoidMethodCallMutator]MSP[] } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[rv.ROR5Mutator]MSP[] if ( file . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; MST[ReturnValsMutator]MSP[] } public static String byteCountToDisplaySize ( final long size ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI2Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
final File [] files = directory . listFiles () ; if ( files == null ) { MST[NegateConditionalsMutator]MSP[] return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR2Mutator]MSP[]
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.UOI2Mutator]MSP[] boolean wasInterrupted = false ; try {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] if ( includeSubDirectories ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR1Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
return readFileToString ( file , Charset . defaultCharset () ) ; MST[EmptyObjectReturnValsMutator]MSP[] } public static byte [] readFileToByteArray ( final File file ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { final long fileLength = file . length () ;
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[rv.CRCR3Mutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] openOutputStream ( file ) . close () ; }
} } return size ; MST[NullReturnValsMutator]MSP[] } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[rv.CRCR2Mutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[rv.ROR1Mutator]MSP[]
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[NegateConditionalsMutator]MSP[] if ( file . isDirectory () ) {
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; } File file = directory ;
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
writeLines ( file , encoding , lines , null , false ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[rv.UOI1Mutator]MSP[] }
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; MST[NonVoidMethodCallMutator]MSP[] final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR3Mutator]MSP[] return true ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR5Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR2Mutator]MSP[] final int n = url . length () ;
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR5Mutator]MSP[] final int n = url . length () ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR1Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.ABSMutator]MSP[] boolean wasInterrupted = false ; try {
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.ABSMutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[NullReturnValsMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; MST[NonVoidMethodCallMutator]MSP[] } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[rv.ROR5Mutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[ConstructorCallMutator]MSP[] }
public static Iterator < File > iterateFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFilesAndDirs ( directory , fileFilter , dirFilter ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } private static String [] toSuffixes ( final String [] extensions ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI1Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.UOI4Mutator]MSP[] try { do {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final int n = url . length () ;
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI3Mutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
return readLines ( file , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static List < String > readLines ( final File file ) throws IOException { return readLines ( file , Charset . defaultCharset () ) ; }
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR5Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[ConstructorCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[NonVoidMethodCallMutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
for ( final File srcFile : srcFiles ) { MST[rv.UOI3Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[PrimitiveReturnsMutator]MSP[] } return file . length () ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[experimental.NakedReceiverMutator]MSP[] i += 3 ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[ArgumentPropagationMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[rv.CRCR6Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.ABSMutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.CRCR2Mutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR2Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
return new FileOutputStream ( file , append ) ; MST[rv.UOI1Mutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI4Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( srcFile . isDirectory () ) {
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; MST[NonVoidMethodCallMutator]MSP[] }
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[rv.ABSMutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[rv.ROR2Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
for ( final String name : names ) { MST[rv.ABSMutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[InlineConstantMutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
if ( ! destDir . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR2Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( ! file . exists () ) { final String message = file + lr_42 ; MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
} copyDirectory ( srcDir , destDir ) ; MST[VoidMethodCallMutator]MSP[] deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ; MST[VoidMethodCallMutator]MSP[]
throw new IOException ( lr_23 ) ; MST[ConstructorCallMutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
return file . length () ; } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; MST[NullReturnValsMutator]MSP[] } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[rv.UOI4Mutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI4Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ROR3Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NonVoidMethodCallMutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[experimental.NakedReceiverMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
if ( srcLen != dstLen ) { MST[rv.UOI1Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.UOI2Mutator]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[ConditionalsBoundaryMutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final FileFilter filter ) throws IOException { copyDirectory ( srcDir , destDir , filter , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcDir , destDir ) ; MST[VoidMethodCallMutator]MSP[]
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] openOutputStream ( file ) . close () ; }
return false ; } return file . lastModified () > timeMillis ; MST[InlineConstantMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
if ( ! destDir . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR2Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; MST[rv.UOI4Mutator]MSP[] } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
for ( final File srcFile : srcFiles ) { MST[rv.ABSMutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ABSMutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ABSMutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; MST[NonVoidMethodCallMutator]MSP[] exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.CRCR5Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI2Mutator]MSP[] } else {
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[experimental.BigIntegerMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR6Mutator]MSP[] final int n = url . length () ;
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.UOI4Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
final File directory , final String [] extensions , final boolean recursive ) { return listFiles ( directory , extensions , recursive ) . iterator () ; MST[rv.UOI3Mutator]MSP[] } public static boolean contentEquals ( final File file1 , final File file2 ) throws IOException {
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[ConstructorCallMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ; MST[ReturnValsMutator]MSP[]
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI4Mutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
try ( OutputStream out = openOutputStream ( destination ) ) { IOUtils . copy ( source , out ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.UOI4Mutator]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
if ( destDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[rv.UOI3Mutator]MSP[] return files ;
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ; MST[InlineConstantMutator]MSP[]
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[ConstructorCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR3Mutator]MSP[] }
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI2Mutator]MSP[] }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( srcLen != dstLen ) { MST[rv.UOI2Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.ABSMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ; MST[ConstructorCallMutator]MSP[]
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[rv.CRCR6Mutator]MSP[] }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; MST[rv.UOI3Mutator]MSP[] if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.UOI1Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR4Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.CRCR3Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ROR1Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
return isFileNewer ( file , reference . lastModified () ) ; } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_57 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) {
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR3Mutator]MSP[] }
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI2Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[rv.ROR5Mutator]MSP[]
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI1Mutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[ConstructorCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( ! directory . exists () ) { MST[rv.ROR2Mutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR2Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.CRCR3Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI1Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( file . isDirectory () ) {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[NegateConditionalsMutator]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[NonVoidMethodCallMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[NegateConditionalsMutator]MSP[]
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
while ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ROR4Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[experimental.NakedReceiverMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[RemoveConditionalMutator_ORDER_IF]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; MST[NullReturnValsMutator]MSP[] }
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[experimental.NakedReceiverMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
final String canonicalParent = directory . getCanonicalPath () ; final String canonicalChild = child . getCanonicalPath () ; return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void cleanDirectory ( final File directory ) throws IOException {
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR3Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[rv.ROR5Mutator]MSP[] bytes . flip () ;
while ( ! file . exists () ) { MST[rv.ROR5Mutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[rv.UOI3Mutator]MSP[] } } public static File toFile ( final URL url ) {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( date == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ABSMutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IOException ( lr_40 + directory ) ; MST[experimental.NakedReceiverMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
throw new IOException ( lr_40 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
if ( ! src . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI4Mutator]MSP[] } return urls ;
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NonVoidMethodCallMutator]MSP[]
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[VoidMethodCallMutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR5Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[InlineConstantMutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR2Mutator]MSP[] boolean wasInterrupted = false ; try {
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; MST[BooleanTrueReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
} public static Iterator < File > iterateFiles ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFiles ( directory , fileFilter , dirFilter ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] }
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[NegateConditionalsMutator]MSP[] bytes . flip () ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR5Mutator]MSP[] } try ( Reader input1 = charsetName == null
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final int n = url . length () ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[experimental.NakedReceiverMutator]MSP[]
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . isDirectory () ) {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[rv.ROR2Mutator]MSP[]
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[NegateConditionalsMutator]MSP[]
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] final String message = lr_50 + directory + lr_51
for ( final File srcFile : srcFiles ) { MST[rv.UOI1Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ABSMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
return new FileInputStream ( file ) ; MST[ConstructorCallMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ROR2Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_59 ) ; }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding ) throws IOException { writeLines ( file , encoding , lines , lineEnding , false ) ; MST[VoidMethodCallMutator]MSP[] }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR2Mutator]MSP[] return false ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
size += sizeOf0 ( file ) ; MST[rv.UOI2Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI1Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ROR4Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
} public static void copyFileToDirectory ( final File srcFile , final File destDir ) throws IOException { copyFileToDirectory ( srcFile , destDir , true ) ; MST[rv.CRCR2Mutator]MSP[] } public static void copyFileToDirectory ( final File srcFile , final File destDir , final boolean preserveFileDate ) throws IOException {
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[rv.ROR5Mutator]MSP[] if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[ReturnValsMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
throw new IOException ( lr_41 + src + lr_42 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
return isFileNewer ( file , date . getTime () ) ; MST[ReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.UOI4Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
} catch ( final Exception ignored ) { return false ; MST[rv.CRCR5Mutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[InlineConstantMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI2Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[NegateConditionalsMutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[NonVoidMethodCallMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ABSMutator]MSP[] destDir . mkdirs () ; }
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ROR5Mutator]MSP[]
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI2Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( file . exists () ) { MST[rv.ROR2Mutator]MSP[] if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
if ( file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR1Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[rv.ROR3Mutator]MSP[] return; } if ( ! isSymlink ( directory ) ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.UOI3Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[NonVoidMethodCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ROR4Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.ABSMutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { return EMPTY_FILE_ARRAY ; MST[ReturnValsMutator]MSP[] } final File [] files = new File [ urls . length ] ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[rv.UOI2Mutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[rv.CRCR3Mutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI1Mutator]MSP[] destDir . mkdirs () ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( file . exists () ) { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[NegateConditionalsMutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR6Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] try { forceDelete ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( url . getProtocol () . equals ( lr_24 ) == false ) {
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.ABSMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
if ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
throw new NullPointerException ( lr_71 ) ; } return Files . isSymbolicLink ( file . toPath () ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI3Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[rv.ABSMutator]MSP[] } else {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR4Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
return file . length () ; MST[ReturnValsMutator]MSP[] } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[rv.CRCR5Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[NegateConditionalsMutator]MSP[] final int n = url . length () ;
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
for ( final String name : names ) { MST[rv.UOI2Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.UOI3Mutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
return new File ( filename ) ; MST[ConstructorCallMutator]MSP[] } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { final int n = url . length () ;
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR1Mutator]MSP[] boolean wasInterrupted = false ; try {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.NakedReceiverMutator]MSP[]
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; MST[VoidMethodCallMutator]MSP[] destFile . setLastModified ( newLastModifed ) ; } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI2Mutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR5Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR6Mutator]MSP[] }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; MST[ReturnValsMutator]MSP[] }
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR4Mutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[rv.CRCR6Mutator]MSP[] }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[ConstructorCallMutator]MSP[] } } }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
public static String readFileToString ( final File file , final String encoding ) throws IOException { return readFileToString ( file , Charsets . toCharset ( encoding ) ) ; MST[ReturnValsMutator]MSP[] } @Deprecated public static String readFileToString ( final File file ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.UOI2Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
public static Iterator < File > iterateFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFilesAndDirs ( directory , fileFilter , dirFilter ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] } private static String [] toSuffixes ( final String [] extensions ) {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR6Mutator]MSP[] filename = decodeUrl ( filename ) ;
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.UOI3Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ROR3Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
writeLines ( file , encoding , lines , null , append ) ; MST[rv.UOI2Mutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NegateConditionalsMutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR2Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI4Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ROR5Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI1Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
throw new IOException ( lr_41 + src + lr_42 ) ; MST[ConstructorCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
if ( files == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[NegateConditionalsMutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
writeLines ( file , encoding , lines , null , false ) ; MST[rv.CRCR1Mutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { MST[ConstructorCallMutator]MSP[] return IOUtils . contentEquals ( input1 , input2 ) ; } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
File file = null ; for ( final String name : names ) { if ( file == null ) { file = new File ( name ) ; MST[ConstructorCallMutator]MSP[] } else { file = new File ( file , name ) ; } } return file ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR2Mutator]MSP[]
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ROR3Mutator]MSP[]
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ABSMutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[NonVoidMethodCallMutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { MST[rv.ROR5Mutator]MSP[] return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR3Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.UOI1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR5Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR4Mutator]MSP[] destDir . mkdirs () ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[NonVoidMethodCallMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[rv.UOI4Mutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[NonVoidMethodCallMutator]MSP[] } return suffixes ; }
if ( ! directory . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.CRCR6Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
if ( srcLen != dstLen ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[rv.CRCR5Mutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.CRCR1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . isDirectory () ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[VoidMethodCallMutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[rv.ROR3Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[NonVoidMethodCallMutator]MSP[] i += 3 ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[NegateConditionalsMutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
return false ; } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_54 ) ; }
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[rv.ROR2Mutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[rv.UOI1Mutator]MSP[] } } public static File toFile ( final URL url ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[experimental.NakedReceiverMutator]MSP[] lr_50 + directory + lr_51
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[rv.ROR1Mutator]MSP[] if ( file . isDirectory () ) {
if ( srcDir == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR1Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[MathMutator]MSP[] boolean wasInterrupted = false ; try {
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.UOI2Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] moveDirectoryToDirectory ( src , destDir , createDestDir ) ; } else {
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
size += sizeOf0 ( file ) ; MST[rv.AOR2Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { MST[NonVoidMethodCallMutator]MSP[] return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; } }
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR1Mutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[NegateConditionalsMutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[NonVoidMethodCallMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; MST[ConstructorCallMutator]MSP[] } final String message = lr_49 + file ; throw new IOException ( message ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; MST[ConstructorCallMutator]MSP[] } if ( destFile . isDirectory () ) {
if ( ! src . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final boolean filePresent = file . exists () ; MST[NonVoidMethodCallMutator]MSP[] if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR1Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.UOI1Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR1Mutator]MSP[] try { do {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR4Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.UOI4Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { MST[rv.ROR3Mutator]MSP[] suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ROR2Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[rv.ROR4Mutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[InlineConstantMutator]MSP[] }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR4Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ABSMutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI2Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( destDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[ArgumentPropagationMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR6Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
return new FileOutputStream ( file , append ) ; MST[NullReturnValsMutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI3Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[rv.CRCR6Mutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
File file = null ; for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR1Mutator]MSP[]
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[ConstructorCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
} public static void forceMkdirParent ( final File file ) throws IOException { final File parent = file . getParentFile () ; if ( parent == null ) { MST[NegateConditionalsMutator]MSP[] return; } forceMkdir ( parent ) ; } public static long sizeOf ( final File file ) {
if ( ! directory . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[NegateConditionalsMutator]MSP[]
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.ABSMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
return false ; } return file . lastModified () > timeMillis ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[NegateConditionalsMutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
if ( ! destDir . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null MST[ConstructorCallMutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOD2Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; MST[NonVoidMethodCallMutator]MSP[] } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] writeStringToFile ( file , str , encoding , append ) ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR5Mutator]MSP[] destDir . mkdirs () ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOD1Mutator]MSP[] boolean wasInterrupted = false ; try {
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } }
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI2Mutator]MSP[]
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[NonVoidMethodCallMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; bytes . put ( octet ) ; MST[rv.UOI3Mutator]MSP[] i += 3 ;
return isFileNewer ( file , reference . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[ReturnValsMutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[rv.ROR2Mutator]MSP[]
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IllegalArgumentException ( MST[experimental.NakedReceiverMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[VoidMethodCallMutator]MSP[] }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[rv.ROR2Mutator]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[experimental.NakedReceiverMutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] return sizeOfDirectory0 ( file ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR2Mutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; MST[ReturnValsMutator]MSP[] } return BigInteger . valueOf ( fileOrDir . length () ) ; }
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.UOI2Mutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[NonVoidMethodCallMutator]MSP[]
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ROR3Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
public static void write ( final File file , final CharSequence data , final String encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[VoidMethodCallMutator]MSP[] }
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[experimental.NakedReceiverMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
if ( ! directory . exists () ) { MST[rv.ROR3Mutator]MSP[] return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
if ( ! file . exists () ) { MST[rv.ROR3Mutator]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
} catch ( final Exception ignored ) { return false ; MST[rv.CRCR1Mutator]MSP[] } } public static boolean directoryContains ( final File directory , final File child ) throws IOException { if ( directory == null ) { throw new IllegalArgumentException ( lr_45 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
if ( ! src . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
return false ; } return file . lastModified () > timeMillis ; MST[rv.UOI1Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
return false ; MST[BooleanTrueReturnValsMutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[rv.CRCR6Mutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.UOI1Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR2Mutator]MSP[] destDir . mkdirs () ; }
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[rv.UOI2Mutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[rv.UOI3Mutator]MSP[]
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[rv.ROR4Mutator]MSP[] if ( file . isDirectory () ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[rv.UOI4Mutator]MSP[] return files ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR4Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( srcLen != dstLen ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; } return file . length () ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[experimental.NakedReceiverMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[rv.ABSMutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR5Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; MST[ConstructorCallMutator]MSP[] } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; }
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
File file = null ; for ( final String name : names ) { if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; MST[ReturnValsMutator]MSP[] }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI1Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( files == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
if ( date == null ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
throw new IllegalArgumentException ( lr_20 + directory ) ; } if ( fileFilter == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_21 ) ; } } private static IOFileFilter setUpEffectiveFileFilter ( final IOFileFilter fileFilter ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] final String message = lr_50 + directory + lr_51
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[rv.ROR2Mutator]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI1Mutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ; MST[NonVoidMethodCallMutator]MSP[]
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[InlineConstantMutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[InlineConstantMutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.ROR3Mutator]MSP[] try { do {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ROR1Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
writeLines ( file , null , lines , lineEnding , append ) ; MST[VoidMethodCallMutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR3Mutator]MSP[] boolean wasInterrupted = false ; try {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[NonVoidMethodCallMutator]MSP[] boolean wasInterrupted = false ; try {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR3Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR4Mutator]MSP[]
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR6Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[VoidMethodCallMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
writeByteArrayToFile ( file , data , off , len , false ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.ROR3Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[]
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; MST[NonVoidMethodCallMutator]MSP[] if ( parentFile != null ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[rv.ABSMutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[experimental.NakedReceiverMutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[ConstructorCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ROR1Mutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR1Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR6Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_2 ) ; } File file = directory ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; MST[rv.UOI3Mutator]MSP[] } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
while ( ! file . exists () ) { MST[NegateConditionalsMutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; } try ( Reader input1 = charsetName == null MST[NegateConditionalsMutator]MSP[]
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR5Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
return isFileNewer ( file , date . getTime () ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[ConstructorCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final String message = lr_50 + directory + lr_51
throw new IllegalArgumentException ( lr_20 + directory ) ; } if ( fileFilter == null ) { throw new NullPointerException ( lr_21 ) ; MST[ConstructorCallMutator]MSP[] } } private static IOFileFilter setUpEffectiveFileFilter ( final IOFileFilter fileFilter ) {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
writeLines ( file , null , lines , lineEnding , append ) ; MST[rv.UOI1Mutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] if ( ! isSymlink ( file ) ) {
moveFileToDirectory ( src , destDir , createDestDir ) ; } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; MST[ConstructorCallMutator]MSP[] } if ( dest == null ) {
} public static Iterator < File > iterateFiles ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFiles ( directory , fileFilter , dirFilter ) . iterator () ; MST[NonVoidMethodCallMutator]MSP[] }
+ lr_52 ; throw new IOException ( message ) ; } } else { if ( ! directory . mkdirs () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_53 + directory ; throw new IOException ( message ) ; } } }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI2Mutator]MSP[] destDir . mkdirs () ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI1Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
return false ; } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_54 ) ; }
File file = null ; for ( final String name : names ) { if ( file == null ) { MST[rv.ROR5Mutator]MSP[] file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
while ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[rv.ABSMutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ROR4Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.UOI3Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.UOI3Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { MST[rv.UOI4Mutator]MSP[] if ( file . isDirectory () ) { if ( includeSubDirectories ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[rv.ROR1Mutator]MSP[] bytes . flip () ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR5Mutator]MSP[] filename = decodeUrl ( filename ) ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; MST[rv.CRCR1Mutator]MSP[] } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( srcFile . isDirectory () ) {
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
try ( InputStream in = openInputStream ( file ) ) { return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[NonVoidMethodCallMutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
if ( ! directory . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
return false ; } return file . lastModified () > timeMillis ; MST[rv.ROR5Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; MST[ConstructorCallMutator]MSP[] }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
displaySize = String . valueOf ( size . divide ( ONE_TB_BI ) ) + lr_14 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_GB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI3Mutator]MSP[] if ( ! isSymlink ( file ) ) {
if ( file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
final boolean append ) throws IOException { writeStringToFile ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public static void writeStringToFile ( final File file , final String data ) throws IOException {
for ( final File srcFile : srcFiles ) { MST[rv.UOI1Mutator]MSP[] final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ;
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI4Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.CRCR4Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.UOI4Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR4Mutator]MSP[] final int n = url . length () ;
writeLines ( file , encoding , lines , null , append ) ; MST[rv.UOI1Mutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; } return suffixes ; MST[ReturnValsMutator]MSP[] }
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.ROR1Mutator]MSP[] final int n = url . length () ;
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[InlineConstantMutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.UOI3Mutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; } else { displaySize = String . valueOf ( size ) + lr_18 ; MST[NonVoidMethodCallMutator]MSP[] } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ROR2Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( srcLen != dstLen ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI3Mutator]MSP[] } return suffixes ; }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[ConstructorCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[rv.UOI1Mutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[ArgumentPropagationMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[rv.CRCR1Mutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; MST[ConstructorCallMutator]MSP[] } if ( names == null ) { throw new NullPointerException ( lr_2 ) ; } File file = directory ;
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return false ; MST[rv.CRCR6Mutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR3Mutator]MSP[] destDir . mkdirs () ; }
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; MST[VoidMethodCallMutator]MSP[] } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
return false ; MST[rv.CRCR3Mutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[ConstructorCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[InlineConstantMutator]MSP[] final int n = url . length () ;
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.UOI1Mutator]MSP[] boolean wasInterrupted = false ; try {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.UOI4Mutator]MSP[] boolean wasInterrupted = false ; try {
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[rv.ROR1Mutator]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
if ( ! srcDir . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[NonVoidMethodCallMutator]MSP[] }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[rv.ROR1Mutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { IOUtils . write ( data , out , encoding ) ; MST[VoidMethodCallMutator]MSP[] } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[rv.ABSMutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { return; } if ( ! isSymlink ( directory ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[EmptyObjectReturnValsMutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.UOI2Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
return false ; } return file . lastModified () > timeMillis ; MST[rv.CRCR5Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
writeByteArrayToFile ( file , data , 0 , data . length , append ) ; MST[rv.CRCR5Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[ConstructorCallMutator]MSP[] + reference + lr_56 ) ; }
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[rv.UOI2Mutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
writeLines ( file , null , lines , lineEnding , append ) ; MST[rv.UOI4Mutator]MSP[] } public static void forceDelete ( final File file ) throws IOException { if ( file . isDirectory () ) { deleteDirectory ( file ) ; } else {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.UOI1Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
public static File getFile ( final File directory , final String ... names ) { if ( directory == null ) { throw new NullPointerException ( lr_1 ) ; } if ( names == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NullPointerException ( lr_2 ) ; } File file = directory ;
for ( final String name : names ) { file = new File ( file , name ) ; MST[ConstructorCallMutator]MSP[] } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI1Mutator]MSP[] if ( ! isSymlink ( file ) ) {
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI2Mutator]MSP[] } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.UOI1Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.ROR5Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
try ( InputStream in = new CheckedInputStream ( new FileInputStream ( file ) , checksum ) ) { MST[ConstructorCallMutator]MSP[] IOUtils . copy ( in , new NullOutputStream () ) ; } return checksum ; } public static void moveDirectory ( final File srcDir , final File destDir ) throws IOException {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; MST[NullReturnValsMutator]MSP[] } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) {
return isFileNewer ( file , reference . lastModified () ) ; } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_57 ) ; }
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_5 + file + lr_9 ) ; }
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.UOI3Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[rv.ROR4Mutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; MST[rv.ABSMutator]MSP[] for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[rv.UOI3Mutator]MSP[] } return urls ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.UOI4Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[ReturnValsMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[NonVoidMethodCallMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; }
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[InlineConstantMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
public static void writeStringToFile ( final File file , final String data , final String encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR1Mutator]MSP[] } public static void writeStringToFile ( final File file , final String data , final Charset encoding ,
} public static void write ( final File file , final CharSequence data , final String encoding , final boolean append ) throws IOException { write ( file , data , Charsets . toCharset ( encoding ) , append ) ; MST[rv.ABSMutator]MSP[] }
checksum ( file , crc ) ; MST[NonVoidMethodCallMutator]MSP[] return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; }
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[rv.ROR4Mutator]MSP[]
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.ROR4Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
return file . length () ; } public static BigInteger sizeOfDirectoryAsBigInteger ( final File directory ) { checkDirectory ( directory ) ; return sizeOfDirectoryBig0 ( directory ) ; MST[NonVoidMethodCallMutator]MSP[] } private static BigInteger sizeOfDirectoryBig0 ( final File directory ) { final File [] files = directory . listFiles () ;
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.UOI4Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
if ( ! reference . exists () ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[rv.CRCR2Mutator]MSP[] filename = decodeUrl ( filename ) ;
if ( ! srcDir . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; MST[NonVoidMethodCallMutator]MSP[] } } }
: new InputStreamReader ( new FileInputStream ( file2 ) , charsetName ) ) { return IOUtils . contentEqualsIgnoreEOL ( input1 , input2 ) ; MST[rv.UOI4Mutator]MSP[] } } public static File toFile ( final URL url ) {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR1Mutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[rv.UOI3Mutator]MSP[]
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; MST[NonVoidMethodCallMutator]MSP[] } return BigInteger . valueOf ( fileOrDir . length () ) ; }
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; MST[rv.CRCR4Mutator]MSP[] } try ( Reader input1 = charsetName == null
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[VoidMethodCallMutator]MSP[] } @Deprecated
File file = null ; for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; MST[ConstructorCallMutator]MSP[] throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectoryBig0 ( file ) ; }
try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI1Mutator]MSP[] out . write ( data , off , len ) ; } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final File [] files = verifiedListFiles ( directory ) ; MST[NonVoidMethodCallMutator]MSP[] IOException exception = null ; for ( final File file : files ) { try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; MST[NullReturnValsMutator]MSP[] }
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI4Mutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR3Mutator]MSP[] return false ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; MST[VoidMethodCallMutator]MSP[] } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[rv.ABSMutator]MSP[] }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.UOI1Mutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.ROR5Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; MST[rv.ABSMutator]MSP[] } } } if ( preserveFileDate ) { destDir . setLastModified ( srcDir . lastModified () ) ; } }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
return IOUtils . copyLarge ( fis , output ) ; MST[rv.UOI3Mutator]MSP[] } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR3Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; MST[NonVoidMethodCallMutator]MSP[] destFile . setLastModified ( newLastModifed ) ; } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[rv.ROR4Mutator]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.UOI4Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
return false ; } return file . lastModified () > timeMillis ; MST[ConditionalsBoundaryMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
if ( file == null ) { MST[NegateConditionalsMutator]MSP[] return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; MST[rv.CRCR4Mutator]MSP[] }
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_2 ) ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; MST[rv.UOI1Mutator]MSP[] return files ;
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[rv.ROR4Mutator]MSP[] return; } if ( ! isSymlink ( directory ) ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[NonVoidMethodCallMutator]MSP[] lr_50 + directory + lr_51
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[InlineConstantMutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[ConstructorCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , false ) ; MST[rv.CRCR3Mutator]MSP[] } private static void validateListFilesParameters ( final File directory , final IOFileFilter fileFilter ) { if ( ! directory . isDirectory () ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[experimental.NakedReceiverMutator]MSP[] + reference + lr_56 ) ; }
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR5Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR4Mutator]MSP[] return false ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.CRCR4Mutator]MSP[] try { do {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { MST[rv.ROR5Mutator]MSP[] if ( ! parent . mkdirs () && ! parent . isDirectory () ) { throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) { MST[rv.ROR4Mutator]MSP[]
moveDirectory ( src , new File ( destDir , src . getName () ) ) ; } public static void moveFile ( final File srcFile , final File destFile ) throws IOException { validateMoveParameters ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[rv.UOI1Mutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
if ( ! directory . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] final String message = directory + lr_47 ; throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[ConditionalsBoundaryMutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[rv.ROR4Mutator]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI2Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { MST[rv.UOI1Mutator]MSP[] throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
if ( null != exception ) { MST[NegateConditionalsMutator]MSP[] throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NegateConditionalsMutator]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[NonVoidMethodCallMutator]MSP[] + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; } public static boolean isFileOlder ( final File file , final Date date ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[experimental.NakedReceiverMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[experimental.NakedReceiverMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[NegateConditionalsMutator]MSP[]
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[experimental.NakedReceiverMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; }
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[InlineConstantMutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI1Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR3Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; } decoded = buffer . toString () ; } return decoded ;
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; MST[ReturnValsMutator]MSP[] } public static boolean isFileOlder ( final File file , final Date date ) {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; MST[NonVoidMethodCallMutator]MSP[] } return urls ;
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR1Mutator]MSP[] final int n = url . length () ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[BooleanTrueReturnValsMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[ArgumentPropagationMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( file == null ) { return false ; } try { if ( file . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) { MST[rv.ROR3Mutator]MSP[]
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ; MST[ReturnValsMutator]MSP[]
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[NullReturnValsMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.ROR5Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} @Deprecated public static void write ( final File file , final CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset () , false ) ; MST[rv.CRCR5Mutator]MSP[] } @Deprecated
return lineIterator ( file , null ) ; } public static void writeStringToFile ( final File file , final String data , final Charset encoding ) throws IOException { writeStringToFile ( file , data , encoding , false ) ; MST[rv.CRCR5Mutator]MSP[] }
File file = null ; for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter , final boolean includeSubDirectories ) { validateListFilesParameters ( directory , fileFilter ) ; final IOFileFilter effFileFilter = setUpEffectiveFileFilter ( fileFilter ) ; MST[NonVoidMethodCallMutator]MSP[] final IOFileFilter effDirFilter = setUpEffectiveDirFilter ( dirFilter ) ;
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR4Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
return BigInteger . valueOf ( file . length () ) ; } public static long sizeOfDirectory ( final File directory ) { checkDirectory ( directory ) ; MST[VoidMethodCallMutator]MSP[] return sizeOfDirectory0 ( directory ) ; } private static long sizeOfDirectory0 ( final File directory ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ROR1Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
throw new IOException ( lr_27 + destFile + lr_33 ) ; } doCopyFile ( srcFile , destFile , preserveFileDate ) ; MST[rv.UOI3Mutator]MSP[] } public static long copyFile ( final File input , final OutputStream output ) throws IOException { try ( FileInputStream fis = new FileInputStream ( input ) ) {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[rv.UOI4Mutator]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( srcLen != dstLen ) { MST[rv.ABSMutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ; MST[EmptyObjectReturnValsMutator]MSP[]
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[InlineConstantMutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[rv.ROR3Mutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; MST[NonVoidMethodCallMutator]MSP[] } return file . length () ; }
final String [] suffixes = toSuffixes ( extensions ) ; filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , MST[rv.ROR5Mutator]MSP[] recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[NonVoidMethodCallMutator]MSP[]
final String canonicalParent = directory . getCanonicalPath () ; final String canonicalChild = child . getCanonicalPath () ; return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; MST[ReturnValsMutator]MSP[] } public static void cleanDirectory ( final File directory ) throws IOException {
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR5Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { MST[rv.CRCR5Mutator]MSP[] return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[NegateConditionalsMutator]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
if ( srcLen != dstLen ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[rv.ROR1Mutator]MSP[]
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[rv.ABSMutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) { MST[rv.ROR4Mutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; MST[VoidMethodCallMutator]MSP[] } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { return; } if ( ! isSymlink ( directory ) ) {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Thread . currentThread () . interrupt () ; } } return true ; }
if ( date == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) {
public static void writeByteArrayToFile ( final File file , final byte [] data ) throws IOException { writeByteArrayToFile ( file , data , false ) ; MST[rv.CRCR1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final boolean append ) throws IOException {
public static void copyDirectory ( final File srcDir , final File destDir , final boolean preserveFileDate ) throws IOException { copyDirectory ( srcDir , destDir , null , preserveFileDate ) ; MST[rv.UOI3Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ,
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] if ( ! isSymlink ( file ) ) { size = size . add ( sizeOfBig0 ( file ) ) ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR6Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.ROR4Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[rv.ROR1Mutator]MSP[]
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) { MST[NegateConditionalsMutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[MathMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { if ( srcFile . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; MST[ReturnValsMutator]MSP[] }
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.CRCR5Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { MST[NegateConditionalsMutator]MSP[] for ( final File file : found ) { if ( file . isDirectory () ) { if ( includeSubDirectories ) {
throw new IllegalArgumentException ( MST[ConstructorCallMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[ConstructorCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
final File destFile = new File ( destDir , srcFile . getName () ) ; copyFile ( srcFile , destFile , preserveFileDate ) ; MST[VoidMethodCallMutator]MSP[] } public static void copyFile ( final File srcFile , final File destFile ) throws IOException { copyFile ( srcFile , destFile , true ) ;
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] copyDirectoryToDirectory ( src , destDir ) ; } else {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[rv.ROR4Mutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; MST[rv.CRCR1Mutator]MSP[] } if ( ! directory . exists () || ! child . exists () ) { return false ; }
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; MST[rv.CRCR5Mutator]MSP[] try {
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR3Mutator]MSP[] boolean wasInterrupted = false ; try {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.CRCR3Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( directory + lr_47 ) ; } }
final StringBuilder buffer = new StringBuilder () ; MST[ConstructorCallMutator]MSP[] final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { try { do {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[MathMutator]MSP[] boolean wasInterrupted = false ; try {
writeStringToFile ( file , data , Charset . defaultCharset () , false ) ; } @Deprecated public static void writeStringToFile ( final File file , final String data , final boolean append ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset () , append ) ; MST[VoidMethodCallMutator]MSP[]
for ( final File srcFile : srcFiles ) { final File copiedFile = new File ( destDir , srcFile . getName () ) ; exclusionList . add ( copiedFile . getCanonicalPath () ) ; } } } doCopyDirectory ( srcDir , destDir , filter , preserveFileDate , exclusionList ) ; MST[rv.UOI3Mutator]MSP[]
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI4Mutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
return IOUtils . copyLarge ( fis , output ) ; } } private static void doCopyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { if ( destFile . exists () && destFile . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 MST[ConstructorCallMutator]MSP[] + reference + lr_56 ) ; }
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[rv.ROR4Mutator]MSP[]
writeByteArrayToFile ( file , data , off , len , false ) ; MST[rv.UOI1Mutator]MSP[] } public static void writeByteArrayToFile ( final File file , final byte [] data , final int off , final int len , final boolean append ) throws IOException {
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; MST[ConstructorCallMutator]MSP[] } if ( dest == null ) { throw new NullPointerException ( lr_26 ) ; }
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.UOI4Mutator]MSP[] try { forceDeleteOnExit ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[ReturnValsMutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[ConstructorCallMutator]MSP[]
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.UOI2Mutator]MSP[] if ( ! isSymlink ( file ) ) {
if ( destDir == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR4Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[rv.ROR1Mutator]MSP[] return false ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[NonVoidMethodCallMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
if ( ! directory . isDirectory () ) { final String message = directory + lr_47 ; MST[experimental.NakedReceiverMutator]MSP[] throw new IllegalArgumentException ( message ) ; } final File [] files = directory . listFiles () ; if ( files == null ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[rv.CRCR3Mutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final int n = url . length () ;
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( destDir . isDirectory () == false ) { throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
return false ; MST[ReturnValsMutator]MSP[] } return file . lastModified () > timeMillis ; } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
if ( srcLen != dstLen ) { MST[rv.UOI3Mutator]MSP[] throw new IOException ( lr_34 + srcFile + lr_35 + destFile + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.UOI4Mutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[rv.CRCR6Mutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { MST[rv.ROR5Mutator]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
if ( date == null ) { throw new IllegalArgumentException ( lr_57 ) ; } return isFileOlder ( file , date . getTime () ) ; } public static boolean isFileOlder ( final File file , final long timeMillis ) { if ( file == null ) { MST[NegateConditionalsMutator]MSP[]
File file = null ; for ( final String name : names ) { MST[rv.ABSMutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = MST[experimental.NakedReceiverMutator]MSP[] lr_49 + file ; throw new IOException ( message ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
} while ( i < n && url . charAt ( i ) == '%' ); MST[InlineConstantMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[InlineConstantMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) { MST[rv.ROR5Mutator]MSP[]
public static void write ( final File file , final CharSequence data , final boolean append ) throws IOException { write ( file , data , Charset . defaultCharset () , append ) ; MST[rv.UOI2Mutator]MSP[] }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[NegateConditionalsMutator]MSP[]
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.ABSMutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ; MST[VoidMethodCallMutator]MSP[]
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; MST[rv.ROR5Mutator]MSP[] if ( srcFiles != null && srcFiles . length > 0 ) { exclusionList = new ArrayList <> ( srcFiles . length ) ;
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[rv.ROR5Mutator]MSP[] if ( srcFile . isDirectory () ) {
if ( destDir == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI4Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
public static void moveToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( src . isDirectory () ) { moveDirectoryToDirectory ( src , destDir , createDestDir ) ; MST[VoidMethodCallMutator]MSP[] } else {
if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR2Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[rv.ROR4Mutator]MSP[] bytes . flip () ;
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; MST[rv.UOI3Mutator]MSP[] connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + MST[NonVoidMethodCallMutator]MSP[] lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; MST[rv.UOI4Mutator]MSP[] if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
throw new IOException ( lr_41 + src + lr_42 ) ; } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { MST[rv.ROR5Mutator]MSP[] throw new NullPointerException ( lr_43 ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] bytes . flip () ;
writeLines ( file , encoding , lines , null , append ) ; MST[rv.UOI4Mutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[ArgumentPropagationMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[ReturnValsMutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[rv.UOI3Mutator]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] try { do {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.CRCR5Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ; MST[NonVoidMethodCallMutator]MSP[]
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR6Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { try { forceDeleteOnExit ( file ) ; MST[VoidMethodCallMutator]MSP[] } catch ( final IOException ioe ) { exception = ioe ; } }
throw new IOException ( lr_29 + srcFile + lr_69 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( destFile . exists () ) { throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[VoidMethodCallMutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; MST[ConstructorCallMutator]MSP[] } if ( ! file . exists () ) {
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR5Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles != null && srcFiles . length > 0 ) { MST[ConditionalsBoundaryMutator]MSP[] exclusionList = new ArrayList <> ( srcFiles . length ) ;
validateMoveParameters ( srcFile , destDir ) ; MST[VoidMethodCallMutator]MSP[] if ( ! destDir . exists () && createDestDir ) { destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
size += sizeOf0 ( file ) ; if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] return sizeOfDirectory0 ( file ) ; }
throw new IOException ( lr_27 + destFile + lr_6 ) ; } final Path srcPath = srcFile . toPath () ; final Path destPath = destFile . toPath () ; final long newLastModifed = preserveFileDate ? srcFile . lastModified () : destFile . lastModified () ; MST[rv.ROR5Mutator]MSP[]
public static Collection < File > listFiles ( final File directory , final String [] extensions , final boolean recursive ) { IOFileFilter filter ; if ( extensions == null ) { MST[rv.ROR5Mutator]MSP[] filter = TrueFileFilter . INSTANCE ; } else {
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR3Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
public static void write ( final File file , final CharSequence data , final Charset encoding ) throws IOException { write ( file , data , encoding , false ) ; MST[InlineConstantMutator]MSP[] }
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
checkEqualSizes ( srcFile , destFile , srcFile . length () , destFile . length () ) ; destFile . setLastModified ( newLastModifed ) ; MST[rv.UOI2Mutator]MSP[] } private static void checkEqualSizes ( final File srcFile , final File destFile , final long srcLen , final long dstLen ) throws IOException {
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR5Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
return fileLength > 0 ? IOUtils . toByteArray ( in , fileLength ) : IOUtils . toByteArray ( in ) ; MST[rv.UOI3Mutator]MSP[] } } public static List < String > readLines ( final File file , final Charset encoding ) throws IOException {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; MST[NonVoidMethodCallMutator]MSP[] filename = decodeUrl ( filename ) ;
files . add ( file ) ; } innerListFiles ( files , file , filter , includeSubDirectories ) ; MST[rv.ABSMutator]MSP[] } else { files . add ( file ) ; } } } } public static Collection < File > listFiles (
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; MST[rv.UOI3Mutator]MSP[] } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; MST[VoidMethodCallMutator]MSP[] if ( ! isSymlink ( directory ) ) { cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[experimental.NakedReceiverMutator]MSP[] return true ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { return false ; MST[rv.CRCR5Mutator]MSP[] } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR5Mutator]MSP[]
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[rv.UOI4Mutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.AOR3Mutator]MSP[] boolean wasInterrupted = false ; try {
size += sizeOf0 ( file ) ; MST[rv.UOI1Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
while ( ! file . exists () ) { MST[rv.ROR4Mutator]MSP[] final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
size += sizeOf0 ( file ) ; MST[MathMutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
} while ( i < n && url . charAt ( i ) == '%' ); MST[RemoveConditionalMutator_EQUAL_IF]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static LineIterator lineIterator ( final File file , final String encoding ) throws IOException { InputStream in = null ; try { in = openInputStream ( file ) ; return IOUtils . lineIterator ( in , encoding ) ; MST[ReturnValsMutator]MSP[] } catch ( final IOException | RuntimeException ex ) {
for ( final String name : names ) { MST[rv.UOI3Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR6Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
doCopyDirectory ( srcFile , dstFile , filter , preserveFileDate , exclusionList ) ; } else { doCopyFile ( srcFile , dstFile , preserveFileDate ) ; } } } if ( preserveFileDate ) { MST[rv.ABSMutator]MSP[] destDir . setLastModified ( srcDir . lastModified () ) ; } }
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
writeLines ( file , encoding , lines , null , append ) ; } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; MST[rv.CRCR1Mutator]MSP[] }
} while ( i < n && url . charAt ( i ) == '%' ); MST[NegateConditionalsMutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
if ( null != exception ) { throw exception ; } } private static File [] verifiedListFiles ( final File directory ) throws IOException { if ( ! directory . exists () ) { MST[rv.ROR4Mutator]MSP[] final String message = directory + lr_42 ; throw new IllegalArgumentException ( message ) ; }
} else { final File parent = file . getParentFile () ; if ( parent != null ) { if ( ! parent . mkdirs () && ! parent . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_10 + parent + lr_11 ) ; } } }
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[rv.ROR5Mutator]MSP[] return false ; } return file . lastModified () < timeMillis ; } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR4Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static Iterator < File > iterateFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return listFilesAndDirs ( directory , fileFilter , dirFilter ) . iterator () ; MST[ReturnValsMutator]MSP[] } private static String [] toSuffixes ( final String [] extensions ) {
return new File ( filename ) ; MST[NullReturnValsMutator]MSP[] } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { final int n = url . length () ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[experimental.BigIntegerMutator]MSP[]
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.UOI1Mutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
final File [] files = verifiedListFiles ( directory ) ; IOException exception = null ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] try { forceDelete ( file ) ; } catch ( final IOException ioe ) { exception = ioe ; } }
try ( InputStream in = openInputStream ( file ) ) { return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; MST[ReturnValsMutator]MSP[] } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[rv.ABSMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
return false ; } return file . lastModified () > timeMillis ; MST[rv.UOI4Mutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
final boolean filePresent = file . exists () ; if ( ! file . delete () ) { MST[rv.ROR3Mutator]MSP[] if ( ! filePresent ) { throw new FileNotFoundException ( lr_48 + file ) ; } final String message = lr_49 + file ; throw new IOException ( message ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[ConstructorCallMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
cleanDirectory ( directory ) ; } if ( ! directory . delete () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final String message = lr_44 + directory + lr_22 ; throw new IOException ( message ) ; } } public static boolean deleteQuietly ( final File file ) {
for ( final String name : names ) { MST[rv.UOI4Mutator]MSP[] file = new File ( file , name ) ; } return file ; } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR1Mutator]MSP[]
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canRead () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR5Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[NonVoidMethodCallMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
validateMoveParameters ( srcFile , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] destDir . mkdirs () ; } if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; }
throw new IOException ( lr_41 + src + lr_42 ) ; MST[experimental.NakedReceiverMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; MST[experimental.NakedReceiverMutator]MSP[] if ( parentFile != null ) {
if ( srcLen != dstLen ) { throw new IOException ( lr_34 + srcFile + lr_35 + destFile MST[NonVoidMethodCallMutator]MSP[] + lr_36 + srcLen + lr_37 + dstLen ) ; } } public static void copyDirectoryToDirectory ( final File srcDir , final File destDir ) throws IOException {
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR1Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
writeLines ( file , encoding , lines , null , false ) ; MST[rv.CRCR6Mutator]MSP[] } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final boolean append ) throws IOException {
} catch ( final InterruptedException ignore ) { wasInterrupted = true ; MST[rv.CRCR3Mutator]MSP[] } catch ( final Exception ex ) { break; } } } finally { if ( wasInterrupted ) { Thread . currentThread () . interrupt () ; } } return true ; }
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI1Mutator]MSP[] } return suffixes ; }
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[rv.ROR1Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[rv.ROR1Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; MST[rv.UOI2Mutator]MSP[] copyInputStreamToFile ( connection . getInputStream () , destination ) ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[NonVoidMethodCallMutator]MSP[] bytes . put ( octet ) ; i += 3 ;
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
final File [] files = directory . listFiles () ; if ( files == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return 0L ; } long size = 0 ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canRead () == false ) { throw new IOException ( lr_5 + file + lr_7 ) ; } } else { throw new FileNotFoundException ( lr_5 + file + lr_8 ) ; }
for ( final File src : srcs ) { copyFileToDirectory ( src , destDir ) ; } } public static void deleteDirectory ( final File directory ) throws IOException { if ( ! directory . exists () ) { return; } if ( ! isSymlink ( directory ) ) { MST[rv.ROR1Mutator]MSP[]
try ( InputStream in = openInputStream ( file ) ) { return IOUtils . readLines ( in , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static List < String > readLines ( final File file , final String encoding ) throws IOException {
displaySize = String . valueOf ( size . divide ( ONE_KB_BI ) ) + lr_17 ; MST[NonVoidMethodCallMutator]MSP[] } else { displaySize = String . valueOf ( size ) + lr_18 ; } return displaySize ; } public static String byteCountToDisplaySize ( final long size ) {
if ( ! directory . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { return false ; }
try { if ( in != null ) { MST[rv.ROR5Mutator]MSP[] in . close () ; } } catch ( final IOException e ) { ex . addSuppressed ( e ) ; } throw ex ; } } public static LineIterator lineIterator ( final File file ) throws IOException {
final int connectionTimeout , final int readTimeout ) throws IOException { final URLConnection connection = source . openConnection () ; connection . setConnectTimeout ( connectionTimeout ) ; connection . setReadTimeout ( readTimeout ) ; copyInputStreamToFile ( connection . getInputStream () , destination ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( destDir . isDirectory () == false ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
throw new IOException ( lr_27 + destFile + lr_69 ) ; } final boolean rename = srcFile . renameTo ( destFile ) ; if ( ! rename ) { MST[NegateConditionalsMutator]MSP[] copyFile ( srcFile , destFile ) ; if ( ! srcFile . delete () ) {
checksum ( file , crc ) ; return crc . getValue () ; } public static Checksum checksum ( final File file , final Checksum checksum ) throws IOException { if ( file . isDirectory () ) { throw new IllegalArgumentException ( lr_59 ) ; MST[ConstructorCallMutator]MSP[] }
public static LineIterator lineIterator ( final File file , final String encoding ) throws IOException { InputStream in = null ; try { in = openInputStream ( file ) ; return IOUtils . lineIterator ( in , encoding ) ; MST[NonVoidMethodCallMutator]MSP[] } catch ( final IOException | RuntimeException ex ) {
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] }
public static BigInteger sizeOfAsBigInteger ( final File file ) { if ( ! file . exists () ) { final String message = file + lr_42 ; throw new IllegalArgumentException ( message ) ; } if ( file . isDirectory () ) { MST[NonVoidMethodCallMutator]MSP[] return sizeOfDirectoryBig0 ( file ) ; }
return new FileInputStream ( file ) ; } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; MST[InlineConstantMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[ConstructorCallMutator]MSP[] } } private static void doCopyDirectory ( final File srcDir , final File destDir , final FileFilter filter , final boolean preserveFileDate , final List < String > exclusionList )
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( directory + lr_42 ) ; } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.ROR2Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI4Mutator]MSP[]
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR3Mutator]MSP[] final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; MST[NonVoidMethodCallMutator]MSP[] } }
throw new NullPointerException ( lr_26 ) ; } if ( ! src . exists () ) { throw new FileNotFoundException ( lr_29 + src + lr_8 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static boolean isSymlink ( final File file ) { if ( file == null ) {
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { MST[NonVoidMethodCallMutator]MSP[] throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) { MST[rv.ROR4Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
public static String getTempDirectoryPath () { return System . getProperty ( lr_3 ) ; } public static File getTempDirectory () { return new File ( getTempDirectoryPath () ) ; } public static String getUserDirectoryPath () { return System . getProperty ( lr_4 ) ; MST[ReturnValsMutator]MSP[] }
displaySize = String . valueOf ( size . divide ( ONE_GB_BI ) ) + lr_15 ; MST[ArgumentPropagationMutator]MSP[] } else if ( size . divide ( ONE_MB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
size += sizeOf0 ( file ) ; if ( size < 0 ) { MST[rv.ROR5Mutator]MSP[] break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
try ( OutputStream out = openOutputStream ( destination ) ) { IOUtils . copy ( source , out ) ; } } public static void copyToDirectory ( final File src , final File destDir ) throws IOException { if ( src == null ) { MST[NegateConditionalsMutator]MSP[]
displaySize = String . valueOf ( size . divide ( ONE_EB_BI ) ) + lr_12 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_PB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
} public static void copyFile ( final File srcFile , final File destFile , final boolean preserveFileDate ) throws IOException { checkFileRequirements ( srcFile , destFile ) ; if ( srcFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_29 + srcFile + lr_6 ) ; }
throws IOException { final File [] srcFiles = filter == null ? srcDir . listFiles () : srcDir . listFiles ( filter ) ; if ( srcFiles == null ) { MST[rv.ROR5Mutator]MSP[] throw new IOException ( lr_40 + srcDir ) ; } if ( destDir . exists () ) {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[NegateConditionalsMutator]MSP[] try { do {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[InlineConstantMutator]MSP[] try { do {
throw new IOException ( lr_29 + srcDir + lr_30 + destDir + lr_31 ) ; MST[NonVoidMethodCallMutator]MSP[] } List < String > exclusionList = null ; if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () ) ) {
return isFileNewer ( file , date . getTime () ) ; } public static boolean isFileNewer ( final File file , final long timeMillis ) { if ( file == null ) { throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
} private static void checkFileRequirements ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) { MST[NegateConditionalsMutator]MSP[] throw new NullPointerException ( lr_26 ) ; }
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) { MST[rv.ROR3Mutator]MSP[]
public static boolean isFileNewer ( final File file , final File reference ) { if ( reference == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalArgumentException ( lr_54 ) ; } if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; }
for ( final String name : names ) { file = new File ( file , name ) ; } return file ; MST[ReturnValsMutator]MSP[] } public static File getFile ( final String ... names ) { if ( names == null ) { throw new NullPointerException ( lr_2 ) ; }
if ( srcDir == null ) { throw new NullPointerException ( lr_38 ) ; } if ( srcDir . exists () && srcDir . isDirectory () == false ) { MST[rv.ROR4Mutator]MSP[] throw new IllegalArgumentException ( lr_29 + destDir + lr_28 ) ; } if ( destDir == null ) {
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; MST[experimental.NakedReceiverMutator]MSP[] } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; if ( url != null ) { MST[NegateConditionalsMutator]MSP[] if ( url . getProtocol () . equals ( lr_24 ) == false ) {
try ( OutputStream out = openOutputStream ( file , append ) ) { out . write ( data , off , len ) ; MST[rv.UOI4Mutator]MSP[] } } public static void writeLines ( final File file , final String encoding , final Collection < ? > lines ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( url . charAt ( i ) == '%' ) { try { do {
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR3Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[BooleanFalseReturnValsMutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { MST[rv.ROR4Mutator]MSP[] return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ;
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI2Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
} public static File [] toFiles ( final URL [] urls ) { if ( urls == null || urls . length == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return EMPTY_FILE_ARRAY ; } final File [] files = new File [ urls . length ] ;
if ( destDir . isDirectory () == false ) { MST[NonVoidMethodCallMutator]MSP[] throw new IOException ( lr_27 + destDir + lr_39 ) ; } } else { if ( ! destDir . mkdirs () && ! destDir . isDirectory () ) {
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { MST[rv.ROR5Mutator]MSP[] copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; } else {
return isFileNewer ( file , reference . lastModified () ) ; } public static boolean isFileNewer ( final File file , final Date date ) { if ( date == null ) { MST[NegateConditionalsMutator]MSP[] throw new IllegalArgumentException ( lr_57 ) ; }
if ( ! destDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; }
throw new IllegalArgumentException ( MST[NonVoidMethodCallMutator]MSP[] lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; } public static URL [] toURLs ( final File [] files ) throws IOException {
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR1Mutator]MSP[]
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.CRCR6Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
try ( InputStream input1 = new FileInputStream ( file1 ) ; InputStream input2 = new FileInputStream ( file2 ) ) { return IOUtils . contentEquals ( input1 , input2 ) ; MST[rv.UOI3Mutator]MSP[] } } public static boolean contentEqualsIgnoreEOL ( final File file1 , final File file2 , final String charsetName )
throw new IOException ( lr_40 + directory ) ; } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; MST[rv.CRCR6Mutator]MSP[] boolean wasInterrupted = false ; try {
throw new IOException ( lr_23 ) ; } if ( file1 . length () != file2 . length () ) { MST[rv.ROR1Mutator]MSP[] return false ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { return true ; }
final URL [] urls = new URL [ files . length ] ; for ( int i = 0 ; i < urls . length ; i ++ ) { MST[rv.ROR2Mutator]MSP[] urls [ i ] = files [ i ] . toURI () . toURL () ; } return urls ;
if ( srcFile . getCanonicalPath () . equals ( destFile . getCanonicalPath () ) ) { MST[rv.ROR4Mutator]MSP[] throw new IOException ( lr_29 + srcFile + lr_30 + destFile + lr_31 ) ; } final File parentFile = destFile . getParentFile () ; if ( parentFile != null ) {
copyDirectory ( srcDir , new File ( destDir , srcDir . getName () ) , true ) ; MST[rv.CRCR3Mutator]MSP[] } public static void copyDirectory ( final File srcDir , final File destDir ) throws IOException { copyDirectory ( srcDir , destDir , true ) ; }
return byteCountToDisplaySize ( BigInteger . valueOf ( size ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public static void touch ( final File file ) throws IOException { if ( ! file . exists () ) { openOutputStream ( file ) . close () ; }
final String [] suffixes = toSuffixes ( extensions ) ; MST[ArgumentPropagationMutator]MSP[] filter = new SuffixFileFilter ( suffixes ) ; } return listFiles ( directory , filter , recursive ? TrueFileFilter . INSTANCE : FalseFileFilter . INSTANCE ) ; } public static Iterator < File > iterateFiles (
buffer . append ( StandardCharsets . UTF_8 . decode ( bytes ) . toString () ) ; bytes . clear () ; } } } buffer . append ( url . charAt ( i ++ ) ) ; MST[NonVoidMethodCallMutator]MSP[] } decoded = buffer . toString () ; } return decoded ;
final boolean append ) throws IOException { try ( OutputStream out = openOutputStream ( file , append ) ) { MST[rv.UOI1Mutator]MSP[] IOUtils . write ( data , out , encoding ) ; } } public static void writeStringToFile ( final File file , final String data , final String encoding ,
public static void moveDirectoryToDirectory ( final File src , final File destDir , final boolean createDestDir ) throws IOException { validateMoveParameters ( src , destDir ) ; if ( ! destDir . exists () && createDestDir ) { MST[NonVoidMethodCallMutator]MSP[] destDir . mkdirs () ; }
final File [] found = directory . listFiles ( ( FileFilter ) filter ) ; if ( found != null ) { for ( final File file : found ) { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[] if ( includeSubDirectories ) {
if ( file == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } try { if ( file . isDirectory () ) { cleanDirectory ( file ) ; } } catch ( final Exception ignored ) { } try { return file . delete () ;
} while ( i < n && url . charAt ( i ) == '%' ); MST[rv.UOI1Mutator]MSP[] continue; } catch ( final RuntimeException e ) { } finally { if ( bytes . position () > 0 ) { bytes . flip () ;
public static String readFileToString ( final File file , final Charset encoding ) throws IOException { try ( InputStream in = openInputStream ( file ) ) { return IOUtils . toString ( in , Charsets . toCharset ( encoding ) ) ; MST[ReturnValsMutator]MSP[] } }
Files . copy ( srcPath , destPath , StandardCopyOption . REPLACE_EXISTING ) ; MST[rv.CRCR2Mutator]MSP[] checkEqualSizes ( srcFile , destFile , Files . size ( srcPath ) , Files . size ( destPath ) ) ;
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) { MST[rv.UOI1Mutator]MSP[]
public static void writeLines ( final File file , final Collection < ? > lines , final boolean append ) throws IOException { writeLines ( file , null , lines , null , append ) ; MST[rv.UOI2Mutator]MSP[] }
while ( ! file . exists () ) { final long remaining = finishAt - System . currentTimeMillis () ; if ( remaining < 0 ) { return false ; MST[rv.CRCR1Mutator]MSP[] } try { Thread . sleep ( Math . min ( 100 , remaining ) ) ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[NegateConditionalsMutator]MSP[]
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; MST[NonVoidMethodCallMutator]MSP[] } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , DirectoryFileFilter . INSTANCE ) ; }
? new InputStreamReader ( new FileInputStream ( file1 ) , Charset . defaultCharset () ) : new InputStreamReader ( new FileInputStream ( file1 ) , charsetName ) ; Reader input2 = charsetName == null MST[ConstructorCallMutator]MSP[] ? new InputStreamReader ( new FileInputStream ( file2 ) , Charset . defaultCharset () )
if ( ! directory . exists () ) { return; } directory . deleteOnExit () ; if ( ! isSymlink ( directory ) ) { MST[rv.ROR4Mutator]MSP[] cleanDirectoryOnExit ( directory ) ; } } private static void cleanDirectoryOnExit ( final File directory ) throws IOException {
final File [] files = directory . listFiles () ; if ( files == null ) { return 0L ; } long size = 0 ; for ( final File file : files ) { MST[rv.ABSMutator]MSP[] if ( ! isSymlink ( file ) ) {
if ( file . exists () ) { if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; } if ( destDir . exists () ) { MST[rv.ROR1Mutator]MSP[] throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
moveFileToDirectory ( src , destDir , createDestDir ) ; MST[VoidMethodCallMutator]MSP[] } } private static void validateMoveParameters ( final File src , final File dest ) throws FileNotFoundException { if ( src == null ) { throw new NullPointerException ( lr_38 ) ; } if ( dest == null ) {
private static void checkDirectory ( final File directory ) { if ( ! directory . exists () ) { throw new IllegalArgumentException ( directory + lr_42 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( directory + lr_47 ) ; } }
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { if ( file . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
if ( file . exists () ) { MST[rv.ROR4Mutator]MSP[] if ( file . isDirectory () ) { throw new IOException ( lr_5 + file + lr_6 ) ; } if ( file . canWrite () == false ) { throw new IOException ( lr_5 + file + lr_9 ) ; }
final File dstFile = new File ( destDir , srcFile . getName () ) ; if ( exclusionList == null || ! exclusionList . contains ( srcFile . getCanonicalPath () ) ) { MST[rv.ROR4Mutator]MSP[] if ( srcFile . isDirectory () ) {
throw new IOException ( lr_29 + srcFile + lr_69 ) ; } if ( destFile . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new FileExistsException ( lr_27 + destFile + lr_60 ) ; } if ( destFile . isDirectory () ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[VoidMethodCallMutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_23 ) ; } if ( file1 . getCanonicalFile () . equals ( file2 . getCanonicalFile () ) ) { MST[rv.ROR3Mutator]MSP[] return true ; } try ( Reader input1 = charsetName == null
final String canonicalParent = directory . getCanonicalPath () ; final String canonicalChild = child . getCanonicalPath () ; return FilenameUtils . directoryContains ( canonicalParent , canonicalChild ) ; MST[BooleanFalseReturnValsMutator]MSP[] } public static void cleanDirectory ( final File directory ) throws IOException {
} } public static void forceDeleteOnExit ( final File file ) throws IOException { if ( file . isDirectory () ) { MST[rv.ROR2Mutator]MSP[] deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit () ; } } private static void deleteDirectoryOnExit ( final File directory ) throws IOException {
return new FileOutputStream ( file , append ) ; MST[rv.UOI3Mutator]MSP[] } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final boolean rename = srcDir . renameTo ( destDir ) ; if ( ! rename ) { if ( destDir . getCanonicalPath () . startsWith ( srcDir . getCanonicalPath () + File . separator ) ) { MST[NegateConditionalsMutator]MSP[] throw new IOException ( lr_61 + srcDir + lr_62 + destDir ) ;
displaySize = String . valueOf ( size . divide ( ONE_MB_BI ) ) + lr_16 ; } else if ( size . divide ( ONE_KB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR3Mutator]MSP[]
final boolean success = file . setLastModified ( System . currentTimeMillis () ) ; if ( ! success ) { MST[rv.UOI4Mutator]MSP[] throw new IOException ( lr_19 + file ) ; } } public static File [] convertFileCollectionToFileArray ( final Collection < File > files ) {
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[ReturnValsMutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
if ( ! directory . isDirectory () ) { throw new IllegalArgumentException ( lr_46 + directory ) ; } if ( child == null ) { return false ; } if ( ! directory . exists () || ! child . exists () ) { MST[NegateConditionalsMutator]MSP[] return false ; }
size += sizeOf0 ( file ) ; MST[rv.UOI4Mutator]MSP[] if ( size < 0 ) { break; } } } return size ; } private static long sizeOf0 ( final File file ) { if ( file . isDirectory () ) { return sizeOfDirectory0 ( file ) ; }
if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] } moveFile ( srcFile , new File ( destDir , srcFile . getName () ) ) ; }
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] files . add ( directory ) ; } innerListFiles ( files , directory , FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.UOI2Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
displaySize = String . valueOf ( size . divide ( ONE_PB_BI ) ) + lr_13 ; MST[NonVoidMethodCallMutator]MSP[] } else if ( size . divide ( ONE_TB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) {
final Collection < File > files = new java . util . LinkedList <> () ; if ( includeSubDirectories ) { files . add ( directory ) ; } innerListFiles ( files , directory , MST[rv.CRCR3Mutator]MSP[] FileFilterUtils . or ( effFileFilter , effDirFilter ) , includeSubDirectories ) ; return files ;
throw new IOException ( lr_41 + src + lr_42 ) ; MST[NonVoidMethodCallMutator]MSP[] } } public static void copyToDirectory ( final Iterable < File > srcs , final File destDir ) throws IOException { if ( srcs == null ) { throw new NullPointerException ( lr_43 ) ; }
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) {
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { MST[rv.ROR4Mutator]MSP[] if ( ! directory . isDirectory () ) { final String message = lr_50 + directory + lr_51
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR2Mutator]MSP[]
throws IOException { final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; } if ( file1 . isDirectory () || file2 . isDirectory () ) { MST[rv.ROR3Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; final ByteBuffer bytes = ByteBuffer . allocate ( n ) ; for ( int i = 0 ; i < n ; ) { if ( url . charAt ( i ) == '%' ) { MST[rv.UOI2Mutator]MSP[] try { do {
final String [] suffixes = new String [ extensions . length ] ; for ( int i = 0 ; i < extensions . length ; i ++ ) { suffixes [ i ] = lr_22 + extensions [ i ] ; MST[rv.UOI4Mutator]MSP[] } return suffixes ; }
final byte octet = ( byte ) Integer . parseInt ( url . substring ( i + 1 , i + 3 ) , 16 ) ; MST[rv.AOR1Mutator]MSP[] bytes . put ( octet ) ; i += 3 ;
public static void writeLines ( final File file , final String encoding , final Collection < ? > lines , final String lineEnding , final boolean append ) throws IOException { try ( OutputStream out = new BufferedOutputStream ( openOutputStream ( file , append ) ) ) { MST[NonVoidMethodCallMutator]MSP[]
FileUtils . deleteQuietly ( destFile ) ; throw new IOException ( lr_70 + srcFile + MST[experimental.NakedReceiverMutator]MSP[] lr_64 + destFile + lr_65 ) ; } } } public static void moveFileToDirectory ( final File srcFile , final File destDir , final boolean createDestDir ) throws IOException {
if ( ! parentFile . mkdirs () && ! parentFile . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IOException ( lr_27 + parentFile + lr_32 ) ; } } if ( destFile . exists () && destFile . canWrite () == false ) {
public static File getUserDirectory () { return new File ( getUserDirectoryPath () ) ; } public static FileInputStream openInputStream ( final File file ) throws IOException { if ( file . exists () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( file . isDirectory () ) {
for ( int i = 0 ; i < urls . length ; i ++ ) { final URL url = urls [ i ] ; MST[rv.UOI1Mutator]MSP[] if ( url != null ) { if ( url . getProtocol () . equals ( lr_24 ) == false ) {
validateMoveParameters ( srcDir , destDir ) ; if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_28 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( destDir . exists () ) { throw new FileExistsException ( lr_27 + destDir + lr_60 ) ; }
File file = null ; for ( final String name : names ) { MST[rv.UOI1Mutator]MSP[] if ( file == null ) { file = new File ( name ) ; } else { file = new File ( file , name ) ; } } return file ; }
return false ; } return file . lastModified () > timeMillis ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileOlder ( final File file , final File reference ) { if ( reference == null ) { throw new IllegalArgumentException ( lr_54 ) ; }
} copyDirectory ( srcDir , destDir ) ; deleteDirectory ( srcDir ) ; if ( srcDir . exists () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_63 + srcDir + lr_64 + destDir + lr_65 ) ; } } }
if ( ! reference . exists () ) { throw new IllegalArgumentException ( lr_55 + reference + lr_56 ) ; } return isFileOlder ( file , reference . lastModified () ) ; MST[NonVoidMethodCallMutator]MSP[] } public static boolean isFileOlder ( final File file , final Date date ) {
writeLines ( file , encoding , lines , null , append ) ; MST[VoidMethodCallMutator]MSP[] } public static void writeLines ( final File file , final Collection < ? > lines ) throws IOException { writeLines ( file , null , lines , null , false ) ; }
throw new IllegalArgumentException ( lr_25 + url ) ; } files [ i ] = toFile ( url ) ; } } return files ; MST[ReturnValsMutator]MSP[] } public static URL [] toURLs ( final File [] files ) throws IOException {
throw new IOException ( lr_40 + directory ) ; MST[NonVoidMethodCallMutator]MSP[] } return files ; } public static boolean waitFor ( final File file , final int seconds ) { final long finishAt = System . currentTimeMillis () + ( seconds * 1000L ) ; boolean wasInterrupted = false ; try {
public static Collection < File > listFilesAndDirs ( final File directory , final IOFileFilter fileFilter , final IOFileFilter dirFilter ) { return innerListFilesOrDirectories ( directory , fileFilter , dirFilter , true ) ; MST[rv.CRCR5Mutator]MSP[] } private static Collection < File > innerListFilesOrDirectories (
if ( ! destDir . exists () ) { throw new FileNotFoundException ( lr_66 + destDir + lr_67 + createDestDir + lr_68 ) ; } if ( ! destDir . isDirectory () ) { throw new IOException ( lr_27 + destDir + lr_28 ) ; MST[NonVoidMethodCallMutator]MSP[] }
return FileFilterUtils . and ( fileFilter , FileFilterUtils . notFileFilter ( DirectoryFileFilter . INSTANCE ) ) ; } private static IOFileFilter setUpEffectiveDirFilter ( final IOFileFilter dirFilter ) { return dirFilter == null ? FalseFileFilter . INSTANCE : FileFilterUtils . and ( dirFilter , MST[rv.CRCR1Mutator]MSP[] DirectoryFileFilter . INSTANCE ) ; }
} } return size ; } private static BigInteger sizeOfBig0 ( final File fileOrDir ) { if ( fileOrDir . isDirectory () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return sizeOfDirectoryBig0 ( fileOrDir ) ; } return BigInteger . valueOf ( fileOrDir . length () ) ; }
throw new NullPointerException ( lr_38 ) ; } if ( src . isFile () ) { copyFileToDirectory ( src , destDir ) ; } else if ( src . isDirectory () ) { copyDirectoryToDirectory ( src , destDir ) ; MST[VoidMethodCallMutator]MSP[] } else {
if ( url == null || ! lr_24 . equalsIgnoreCase ( url . getProtocol () ) ) { return null ; } String filename = url . getFile () . replace ( '/' , File . separatorChar ) ; filename = decodeUrl ( filename ) ; MST[NonVoidMethodCallMutator]MSP[]
return new FileInputStream ( file ) ; MST[NullReturnValsMutator]MSP[] } public static FileOutputStream openOutputStream ( final File file ) throws IOException { return openOutputStream ( file , false ) ; } public static FileOutputStream openOutputStream ( final File file , final boolean append ) throws IOException {
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
return new File ( filename ) ; } static String decodeUrl ( final String url ) { String decoded = url ; if ( url != null && url . indexOf ( '%' ) >= 0 ) { MST[rv.CRCR4Mutator]MSP[] final int n = url . length () ;
final boolean file1Exists = file1 . exists () ; if ( file1Exists != file2 . exists () ) { return false ; } if ( ! file1Exists ) { return true ; MST[InlineConstantMutator]MSP[] } if ( file1 . isDirectory () || file2 . isDirectory () ) {
throw new IllegalArgumentException ( lr_58 ) ; } if ( ! file . exists () ) { return false ; } return file . lastModified () < timeMillis ; MST[rv.CRCR4Mutator]MSP[] } public static long checksumCRC32 ( final File file ) throws IOException { final CRC32 crc = new CRC32 () ;
if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { if ( ! isSymlink ( file ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] size = size . add ( sizeOfBig0 ( file ) ) ;
if ( destDir == null ) { throw new NullPointerException ( lr_26 ) ; } if ( destDir . exists () && destDir . isDirectory () == false ) { MST[rv.ROR5Mutator]MSP[] throw new IllegalArgumentException ( lr_27 + destDir + lr_28 ) ; }
public static void write ( final File file , final CharSequence data , final Charset encoding , final boolean append ) throws IOException { final String str = data == null ? null : data . toString () ; writeStringToFile ( file , str , encoding , append ) ; MST[rv.UOI2Mutator]MSP[]
if ( ! srcDir . isDirectory () ) { throw new IOException ( lr_29 + srcDir + lr_39 ) ; } if ( srcDir . getCanonicalPath () . equals ( destDir . getCanonicalPath () ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( null != exception ) { throw exception ; } } public static void forceMkdir ( final File directory ) throws IOException { if ( directory . exists () ) { if ( ! directory . isDirectory () ) { final String message = MST[ConstructorCallMutator]MSP[] lr_50 + directory + lr_51
return new FileOutputStream ( file , append ) ; } public static String byteCountToDisplaySize ( final BigInteger size ) { String displaySize ; if ( size . divide ( ONE_EB_BI ) . compareTo ( BigInteger . ZERO ) > 0 ) { MST[rv.ROR4Mutator]MSP[]
throw new IOException ( lr_27 + destDir + lr_32 ) ; } } if ( destDir . canWrite () == false ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IOException ( lr_27 + destDir + lr_9 ) ; } for ( final File srcFile : srcFiles ) {
