if ( xmitTime < rcvTime ) MST[rv.UOI3Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR5Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; MST[rv.ABSMutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ROR3Mutator]MSP[N]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI1Mutator]MSP[S]
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR3Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI4Mutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR4Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[rv.UOI3Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOR1Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ROR3Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI4Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) MST[rv.AOD2Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR4Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI3Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[NegateConditionalsMutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[MathMutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { MST[rv.ROR2Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[rv.ROR3Mutator]MSP[N] } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[rv.ABSMutator]MSP[S]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.CRCR5Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.CRCR1Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.UOI3Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[ConstructorCallMutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; MST[NonVoidMethodCallMutator]MSP[N] if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[rv.UOI1Mutator]MSP[N]
if ( xmitTime < rcvTime ) MST[rv.UOI3Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( comments == null ) { comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ; MST[NonVoidMethodCallMutator]MSP[S]
comments . add ( lr_3 ) ; MST[NegateConditionalsMutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[rv.UOI4Mutator]MSP[S] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () MST[NullReturnValsMutator]MSP[N] { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; }
public long getReturnTime () { return returnTime ; MST[rv.UOI2Mutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; MST[NonVoidMethodCallMutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[rv.UOI2Mutator]MSP[N]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI1Mutator]MSP[N]
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[ReturnValsMutator]MSP[S] }
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) MST[rv.UOI1Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI4Mutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[NonVoidMethodCallMutator]MSP[S]
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[experimental.MemberVariableMutator]MSP[S]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOR2Mutator]MSP[N]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[InlineConstantMutator]MSP[S]
public void addComment ( final String comment ) MST[rv.CRCR4Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) MST[rv.ABSMutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.CRCR3Mutator]MSP[S]
comments . add ( lr_3 ) ; MST[rv.ROR4Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[rv.ROR5Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[ConstructorCallMutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { MST[rv.UOI4Mutator]MSP[S] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_3 ) ; MST[rv.CRCR5Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI2Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI2Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) MST[rv.CRCR5Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI4Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR2Mutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; MST[InlineConstantMutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[NegateConditionalsMutator]MSP[S] }
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.ROR2Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.UOI4Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( comments == null ) { MST[rv.CRCR4Mutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
comments . add ( lr_3 ) ; MST[rv.ROR1Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[rv.CRCR1Mutator]MSP[N] return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) MST[rv.UOI2Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[rv.UOI2Mutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[experimental.MemberVariableMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR6Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.CRCR6Mutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_3 ) ; MST[rv.CRCR3Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR2Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_3 ) ; MST[InlineConstantMutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR4Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) MST[MathMutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOD1Mutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; MST[ReturnValsMutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[ReturnValsMutator]MSP[N]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.ROR4Mutator]MSP[N]
comments . add ( lr_4 ) ; MST[rv.ROR5Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI4Mutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[NegateConditionalsMutator]MSP[S]
if ( xmitTime < rcvTime ) { MST[rv.ROR1Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
return delay ; } public Long getOffset () MST[EmptyObjectReturnValsMutator]MSP[N] { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[ConditionalsBoundaryMutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.UOI4Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) MST[rv.ABSMutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { MST[rv.UOI1Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) MST[rv.AOR4Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) MST[rv.UOI1Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[MathMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; MST[ReturnValsMutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) MST[rv.CRCR2Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[NonVoidMethodCallMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ROR2Mutator]MSP[S]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
comments . add ( lr_4 ) ; } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () MST[EmptyObjectReturnValsMutator]MSP[N] { return comments ; } public Long getDelay () {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ABSMutator]MSP[N]
comments . add ( lr_3 ) ; MST[NegateConditionalsMutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.CRCR5Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[MathMutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[NonVoidMethodCallMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) MST[rv.ABSMutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ROR2Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR4Mutator]MSP[N] int result = ( int ) returnTime ;
return delay ; } public Long getOffset () MST[ReturnValsMutator]MSP[N] { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; }
public void addComment ( final String comment ) MST[experimental.MemberVariableMutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOR2Mutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[NegateConditionalsMutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.ROR3Mutator]MSP[S]
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR4Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[MathMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[rv.ROR4Mutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_3 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI1Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.CRCR6Mutator]MSP[S]
comments . add ( lr_4 ) ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI2Mutator]MSP[S]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOR3Mutator]MSP[N]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI4Mutator]MSP[S]
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[InlineConstantMutator]MSP[N] return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) { MST[rv.UOI1Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) MST[rv.AOR1Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { MST[NegateConditionalsMutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) MST[rv.UOI4Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.ABSMutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[NonVoidMethodCallMutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR5Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ABSMutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR4Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[rv.UOI3Mutator]MSP[S]
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR1Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_4 ) ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_3 ) ; MST[rv.CRCR6Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI3Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI1Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR3Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[rv.ROR2Mutator]MSP[N] } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.ROR1Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI1Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_4 ) ; } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () MST[ReturnValsMutator]MSP[N] { return comments ; } public Long getDelay () {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.ROR5Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI2Mutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[rv.ROR5Mutator]MSP[S] }
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.UOI2Mutator]MSP[N] int result = ( int ) returnTime ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
public void addComment ( final String comment ) MST[rv.UOI1Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_3 ) ; MST[rv.ROR3Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[rv.UOI2Mutator]MSP[S] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( comments == null ) { comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; MST[NonVoidMethodCallMutator]MSP[N] final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[InlineConstantMutator]MSP[N] int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( comments == null ) { MST[experimental.MemberVariableMutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ABSMutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_4 ) ; MST[rv.UOI1Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_3 ) ; MST[rv.CRCR3Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI4Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI3Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[NonVoidMethodCallMutator]MSP[S] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[rv.CRCR3Mutator]MSP[N] return false ; }
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; MST[NonVoidMethodCallMutator]MSP[S] return pkt == null ? null : pkt . getAddress () ; }
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; MST[NonVoidMethodCallMutator]MSP[S] final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[rv.ROR5Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.UOI4Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[InlineConstantMutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR6Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.CRCR5Mutator]MSP[N]
if ( xmitTime < rcvTime ) { MST[rv.UOI2Mutator]MSP[S] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( comments == null ) { comments = new ArrayList <> () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
public long getReturnTime () { return returnTime ; MST[rv.UOI3Mutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[rv.UOI4Mutator]MSP[S]
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR5Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] }
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ABSMutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI2Mutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI4Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR3Mutator]MSP[N] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public long getReturnTime () { return returnTime ; MST[PrimitiveReturnsMutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( comments == null ) { MST[InlineConstantMutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI1Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { MST[rv.ROR5Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI3Mutator]MSP[S]
if ( comments == null ) { MST[rv.CRCR3Mutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
public void addComment ( final String comment ) MST[rv.UOI3Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.CRCR1Mutator]MSP[S]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.CRCR6Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[MathMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ROR1Mutator]MSP[S]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOR3Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.UOI1Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ROR5Mutator]MSP[S]
public void addComment ( final String comment ) MST[rv.CRCR6Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ROR1Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR1Mutator]MSP[N] int result = ( int ) returnTime ;
comments . add ( lr_3 ) ; MST[InlineConstantMutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[rv.UOI1Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI2Mutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR5Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ROR5Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ABSMutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[rv.ROR1Mutator]MSP[N] } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR2Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[NonVoidMethodCallMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI1Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[rv.ROR5Mutator]MSP[N] } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOD1Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { MST[rv.ROR4Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.UOI3Mutator]MSP[N]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.CRCR3Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[ConditionalsBoundaryMutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[NonVoidMethodCallMutator]MSP[S] }
comments . add ( lr_3 ) ; MST[rv.ROR4Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.CRCR4Mutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } detailsComputed = true ;
public void addComment ( final String comment ) MST[rv.UOI1Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR5Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[BooleanTrueReturnValsMutator]MSP[N] return false ; }
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR4Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_3 ) ; MST[rv.CRCR1Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[rv.CRCR5Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.ABSMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) MST[NonVoidMethodCallMutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOD2Mutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI2Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.ROR2Mutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( comments == null ) { comments = new ArrayList <> () ; MST[NegateConditionalsMutator]MSP[N] } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
comments . add ( lr_4 ) ; MST[rv.ROR3Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR3Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.ABSMutator]MSP[S] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI1Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[BooleanFalseReturnValsMutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) MST[rv.AOR2Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) MST[rv.UOI1Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) MST[rv.UOI3Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) MST[rv.ABSMutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_3 ) ; MST[rv.ROR2Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[experimental.MemberVariableMutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { MST[rv.UOI3Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) MST[InlineConstantMutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[rv.UOI2Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
if ( comments == null ) { comments = new ArrayList <> () ; MST[rv.ROR5Mutator]MSP[N] } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
final TimeInfo other = ( TimeInfo ) obj ; MST[NegateConditionalsMutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[MathMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR4Mutator]MSP[N] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.ABSMutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[InlineConstantMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI2Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.ROR4Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[NegateConditionalsMutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { MST[rv.ABSMutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) MST[rv.UOI2Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( comments == null ) { MST[rv.CRCR2Mutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
comments . add ( lr_3 ) ; MST[rv.ROR3Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) MST[rv.UOI1Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[NonVoidMethodCallMutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) MST[rv.UOI4Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[rv.UOI4Mutator]MSP[N]
if ( xmitTime < rcvTime ) MST[rv.UOI4Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) MST[rv.UOI3Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR1Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { MST[rv.UOI3Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[InlineConstantMutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
public long getReturnTime () { return returnTime ; MST[rv.UOI4Mutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOD1Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI3Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_4 ) ; MST[rv.ROR2Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI1Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI2Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[MathMutator]MSP[N]
if ( xmitTime < rcvTime ) MST[rv.AOD1Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR1Mutator]MSP[N] int result = ( int ) returnTime ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) MST[NonVoidMethodCallMutator]MSP[S] { if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOD2Mutator]MSP[N] int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOR4Mutator]MSP[N]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.CRCR5Mutator]MSP[S]
if ( xmitTime < rcvTime ) { MST[rv.ABSMutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; MST[NonVoidMethodCallMutator]MSP[N] final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR6Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) MST[rv.UOI4Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOR4Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) MST[rv.UOI2Mutator]MSP[N] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.CRCR2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () MST[ReturnValsMutator]MSP[N] { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.ROR4Mutator]MSP[N]
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[NullReturnValsMutator]MSP[S] }
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR3Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR2Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR4Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.ABSMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_4 ) ; MST[rv.UOI2Mutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_4 ) ; MST[rv.UOI4Mutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.UOI3Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.ROR4Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.CRCR6Mutator]MSP[N] int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI4Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[NonVoidMethodCallMutator]MSP[S] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR2Mutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI2Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.ROR5Mutator]MSP[S]
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[rv.ROR1Mutator]MSP[S]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.AOR1Mutator]MSP[N]
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[MathMutator]MSP[N] int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOR4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) MST[rv.CRCR3Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) MST[rv.AOR3Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_4 ) ; } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () MST[ReturnValsMutator]MSP[N] {
comments . add ( lr_4 ) ; MST[ConditionalsBoundaryMutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
public void addComment ( final String comment ) MST[InlineConstantMutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[BooleanTrueReturnValsMutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) MST[rv.UOI2Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) MST[rv.ABSMutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
if ( xmitTime < rcvTime ) MST[rv.UOI2Mutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR2Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public long getReturnTime () { return returnTime ; MST[rv.UOI1Mutator]MSP[N] } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOD2Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.ABSMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.CRCR3Mutator]MSP[N]
public void addComment ( final String comment ) MST[rv.UOI2Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR5Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ROR1Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD2Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.CRCR6Mutator]MSP[N] if ( xmitNtpTime . ntpValue () != 0 ) {
comments . add ( lr_4 ) ; MST[rv.ABSMutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR5Mutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI2Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { MST[rv.ROR3Mutator]MSP[N] comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI3Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[InlineConstantMutator]MSP[N]
if ( xmitTime < rcvTime ) MST[rv.ABSMutator]MSP[S] { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
if ( comments == null ) { MST[rv.CRCR5Mutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[rv.CRCR6Mutator]MSP[N] return false ; }
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[rv.ABSMutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; MST[rv.ROR5Mutator]MSP[S] } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) MST[rv.CRCR4Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( xmitNtpTime . ntpValue () != 0 ) {
comments . add ( lr_3 ) ; MST[rv.ROR1Mutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_4 ) ; MST[rv.UOI3Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_4 ) ; MST[rv.UOI4Mutator]MSP[S] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
comments . add ( lr_3 ) ; MST[rv.CRCR1Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD2Mutator]MSP[N] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.ABSMutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
comments . add ( lr_3 ) ; MST[rv.CRCR6Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI1Mutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_4 ) ; } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () MST[EmptyObjectReturnValsMutator]MSP[N] {
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI4Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[NonVoidMethodCallMutator]MSP[S] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR6Mutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
final TimeInfo other = ( TimeInfo ) obj ; MST[InlineConstantMutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; MST[NegateConditionalsMutator]MSP[S] } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( comments == null ) { MST[rv.CRCR6Mutator]MSP[N] comments = new ArrayList <> () ; } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[rv.CRCR5Mutator]MSP[N] return false ; }
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[ReturnValsMutator]MSP[S] return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
comments . add ( lr_3 ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.CRCR3Mutator]MSP[N] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) MST[rv.AOD1Mutator]MSP[N] { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR2Mutator]MSP[S] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.CRCR3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOD2Mutator]MSP[N] int result = ( int ) returnTime ;
if ( delayValue != 0 ) { comments . add ( lr_6 ) ; delayValue = 0 ; } } else { comments . add ( lr_7 ) ; } } } delay = Long . valueOf ( delayValue ) ; if ( origTime > returnTime ) { MST[rv.UOI1Mutator]MSP[N]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[NegateConditionalsMutator]MSP[S]
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { delayValue -= delta ; } else { if ( delta - delayValue == 1 ) { MST[rv.CRCR2Mutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.ABSMutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.AOD1Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
comments . add ( lr_4 ) ; MST[rv.ROR1Mutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
return delay ; } public Long getOffset () { return offset ; } public NtpV3Packet getMessage () { return message ; } public InetAddress getAddress () { final DatagramPacket pkt = message . getDatagramPacket () ; return pkt == null ? null : pkt . getAddress () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] }
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[rv.UOI1Mutator]MSP[N] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
comments . add ( lr_3 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
comments . add ( lr_4 ) ; MST[rv.ABSMutator]MSP[N] } offset = Long . valueOf ( ( ( rcvTime - origTime ) + ( xmitTime - returnTime ) ) / 2 ) ; } } public List < String > getComments () { return comments ; } public Long getDelay () {
final TimeInfo other = ( TimeInfo ) obj ; MST[rv.UOI3Mutator]MSP[N] return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ;
if ( xmitTime < rcvTime ) { comments . add ( lr_5 ) ; } else { final long delta = xmitTime - rcvTime ; if ( delta <= delayValue ) { MST[NegateConditionalsMutator]MSP[S] delayValue -= delta ; } else { if ( delta - delayValue == 1 ) {
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { if ( xmitNtpTime . ntpValue () != 0 ) { MST[NonVoidMethodCallMutator]MSP[N]
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () MST[rv.UOI3Mutator]MSP[S] { if ( detailsComputed ) { return; } detailsComputed = true ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[PrimitiveReturnsMutator]MSP[N]
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { return false ; }
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[rv.ROR4Mutator]MSP[N] } detailsComputed = true ;
final long rcvTime = rcvNtpTime . getTime () ; final TimeStamp xmitNtpTime = message . getTransmitTimeStamp () ; final long xmitTime = xmitNtpTime . getTime () ; if ( origNtpTime . ntpValue () == 0 ) { MST[rv.ROR3Mutator]MSP[S] if ( xmitNtpTime . ntpValue () != 0 ) {
public void addComment ( final String comment ) MST[rv.CRCR2Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
public void addComment ( final String comment ) { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; MST[NegateConditionalsMutator]MSP[N] } detailsComputed = true ;
comments . add ( lr_3 ) ; MST[rv.ROR2Mutator]MSP[N] if ( origTime > returnTime ) { comments . add ( lr_4 ) ; } else { delay = Long . valueOf ( returnTime - origTime ) ; } if ( rcvNtpTime . ntpValue () != 0 ) {
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; MST[rv.AOR1Mutator]MSP[N] int result = ( int ) returnTime ;
public long getReturnTime () { return returnTime ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass () != obj . getClass () ) { MST[ReturnValsMutator]MSP[N] return false ; }
if ( comments == null ) { comments = new ArrayList <> () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } final TimeStamp origNtpTime = message . getOriginateTimeStamp () ; final long origTime = origNtpTime . getTime () ; final TimeStamp rcvNtpTime = message . getReceiveTimeStamp () ;
final TimeInfo other = ( TimeInfo ) obj ; return returnTime == other . returnTime && message . equals ( other . message ) ; } @Override public int hashCode () { final int prime = 31 ; int result = ( int ) returnTime ; MST[rv.UOI3Mutator]MSP[N]
public void addComment ( final String comment ) MST[rv.UOI3Mutator]MSP[S] { if ( comments == null ) { comments = new ArrayList <> () ; } comments . add ( comment ) ; } public void computeDetails () { if ( detailsComputed ) { return; } detailsComputed = true ;
