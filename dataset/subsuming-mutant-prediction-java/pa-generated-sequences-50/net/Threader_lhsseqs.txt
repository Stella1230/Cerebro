final String subj = threadable . simplifiedSubject () ; MST[NegateConditionalsMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] root . flush () ; return result ; }
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { MST[NegateConditionalsMutator]MSP[] container = new ThreadContainer () ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[NegateConditionalsMutator]MSP[] && ( ref . parent == null )
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
prev = container , container = next , MST[rv.ROR5Mutator]MSP[] next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { if ( prev == null ) {
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container . threadable == null && container . child != null && ( container . parent != null
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; return result ; MST[NullReturnValsMutator]MSP[] }
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { MST[ConstructorCallMutator]MSP[] ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.ABSMutator]MSP[] for ( final String refString : references ) {
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { MST[ReturnValsMutator]MSP[] final ThreadContainer root = new ThreadContainer () ;
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { MST[NonVoidMethodCallMutator]MSP[] final String [] references = threadable . messageThreadReferences () ; for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[NegateConditionalsMutator]MSP[] int count = 0 ;
container = prev ; MST[NegateConditionalsMutator]MSP[] } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ;
&& ( parentRef != ref ) MST[rv.ROR2Mutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI2Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI4Mutator]MSP[] int count = 0 ;
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR1Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR5Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[rv.ROR5Mutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { buildContainer ( t , idTable ) ; MST[VoidMethodCallMutator]MSP[] } }
if ( root . next != null ) { MST[NegateConditionalsMutator]MSP[] throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) {
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; MST[rv.ROR5Mutator]MSP[] root . flush () ; return result ; }
root . child = c ; } } return root ; } private void pruneEmptyContainers ( final ThreadContainer parent ) { ThreadContainer container , prev , next ; for ( prev = null , container = parent . child , next = container . next ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container != null ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[NegateConditionalsMutator]MSP[]
prev = container , container = next , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { if ( prev == null ) {
if ( container . threadable != null ) { bogusIdCount ++ ; MST[experimental.NakedReceiverMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; MST[rv.CRCR6Mutator]MSP[] if ( container != null ) {
final ThreadContainer c = entry . getValue () ; if ( c . parent == null ) { MST[NegateConditionalsMutator]MSP[] if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR4Mutator]MSP[]
if ( idTable . isEmpty () ) { MST[rv.ROR3Mutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { MST[rv.ROR5Mutator]MSP[] container = new ThreadContainer () ;
if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] root . child = c . next ; } else { prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[NonVoidMethodCallMutator]MSP[]
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int count = 0 ;
rest != null ; prev = rest , rest = rest . next ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( rest == container ) { break; } } if ( rest == null ) { throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[NonVoidMethodCallMutator]MSP[] buildContainer ( t , idTable ) ; } }
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( old == c ) { continue; }
if ( container . threadable != null ) { bogusIdCount ++ ; MST[experimental.RemoveIncrementsMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[rv.ROR5Mutator]MSP[] && ( ref . parent == null )
if ( idTable . isEmpty () ) { return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; MST[VoidMethodCallMutator]MSP[] root . reverseChildren () ; gatherSubjects ( root ) ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[NonVoidMethodCallMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) {
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[NonVoidMethodCallMutator]MSP[] old . threadable == null || ( c . threadable != null
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; MST[NegateConditionalsMutator]MSP[] root . flush () ; return result ; }
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) { MST[NegateConditionalsMutator]MSP[]
if ( idTable . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
container = prev ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR1Mutator]MSP[] int count = 0 ;
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container . threadable == null && container . child != null && ( container . parent != null
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR5Mutator]MSP[] int count = 0 ;
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; MST[experimental.MemberVariableMutator]MSP[] container . parent = null ; } if ( parentRef != null ) {
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[rv.ROR3Mutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) { MST[rv.ROR5Mutator]MSP[]
for ( tail = kids ; tail . next != null ; tail = tail . next ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] tail . parent = container . parent ; } tail . parent = container . parent ; tail . next = container . next ; next = kids ;
if ( root . next != null ) { MST[rv.ROR5Mutator]MSP[] throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) {
|| ( c . threadable == null && old . threadable != null ) || ( old . threadable != null && old . threadable . subjectIsReply () && c . threadable != null MST[IncrementsMutator]MSP[] && ! c . threadable . subjectIsReply () ) ) {
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int count = 0 ;
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( prev = null , c = root . child , rest = c . next ;
final ThreadContainer c = entry . getValue () ; if ( c . parent == null ) { MST[rv.ROR5Mutator]MSP[] if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ;
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; MST[InlineConstantMutator]MSP[] if ( container != null ) {
if ( container . threadable != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
newc . threadable = old . threadable ; newc . child = old . child ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; } old . threadable = null ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ( ref . parent == null )
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { MST[rv.ROR5Mutator]MSP[] parent . child = kids ; } else { prev . next = kids ; }
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
public Threadable thread ( final Threadable [] messages ) { if ( messages == null ) { MST[ReturnValsMutator]MSP[] return null ; } return thread ( Arrays . asList ( messages ) ) ; }
count = 0 ; for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { Threadable threadable = c . threadable ; if ( threadable == null ) { MST[NegateConditionalsMutator]MSP[] threadable = c . child . threadable ; }
&& c . threadable . subjectIsReply () && ! old . threadable . subjectIsReply () ) ) { c . parent = old ; c . next = old . child ; old . child = c ; } else { final ThreadContainer newc = new ThreadContainer () ; MST[experimental.MemberVariableMutator]MSP[]
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { MST[experimental.MemberVariableMutator]MSP[] parent . child = kids ; } else { prev . next = kids ; }
if ( container . threadable != null ) { bogusIdCount ++ ; MST[NonVoidMethodCallMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[NegateConditionalsMutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
final String subj = threadable . simplifiedSubject () ; MST[NegateConditionalsMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; MST[NonVoidMethodCallMutator]MSP[] } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) {
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI3Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR1Mutator]MSP[] int count = 0 ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR6Mutator]MSP[] int count = 0 ;
if ( idTable . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI1Mutator]MSP[] for ( final String refString : references ) {
if ( container . threadable != null ) { bogusIdCount ++ ; MST[rv.UOI2Mutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[NegateConditionalsMutator]MSP[] if ( prev == null ) {
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] buildContainer ( t , idTable ) ; } }
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[rv.ROR3Mutator]MSP[] buildContainer ( t , idTable ) ; } }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOR1Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int count = 0 ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; MST[experimental.MemberVariableMutator]MSP[] parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
final ThreadContainer c = entry . getValue () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( c . parent == null ) { if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ;
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; MST[VoidMethodCallMutator]MSP[] return result ; }
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ;
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[NonVoidMethodCallMutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
public Threadable thread ( final Threadable [] messages ) { if ( messages == null ) { MST[NullReturnValsMutator]MSP[] return null ; } return thread ( Arrays . asList ( messages ) ) ; }
if ( prev == null ) { MST[NegateConditionalsMutator]MSP[] container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) {
c != null ; prev = c , c = rest , rest = ( rest == null ? null : rest . next ) ) { Threadable threadable = c . threadable ; MST[NegateConditionalsMutator]MSP[] if ( threadable == null ) { threadable = c . child . threadable ; }
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && ( ref . parent == null )
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[rv.ROR5Mutator]MSP[] if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR5Mutator]MSP[]
if ( prev == null ) { MST[experimental.MemberVariableMutator]MSP[] root . child = c . next ; } else { prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR5Mutator]MSP[] int count = 0 ;
newc . threadable = old . threadable ; newc . child = old . child ; MST[rv.ROR5Mutator]MSP[] for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; } old . threadable = null ;
final String subj = threadable . simplifiedSubject () ; MST[NegateConditionalsMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container = new ThreadContainer () ;
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[rv.CRCR3Mutator]MSP[]
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR5Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[InlineConstantMutator]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.ABSMutator]MSP[] for ( final String refString : references ) {
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[rv.ROR4Mutator]MSP[] old . threadable == null || ( c . threadable != null
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] parent . child = kids ; } else { prev . next = kids ; }
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; if ( container != null ) { MST[rv.ROR5Mutator]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI1Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI1Mutator]MSP[] int count = 0 ;
if ( container . threadable != null ) { MST[NegateConditionalsMutator]MSP[] bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR5Mutator]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR5Mutator]MSP[] int count = 0 ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[NegateConditionalsMutator]MSP[]
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { final Map . Entry < String , ThreadContainer > entry = iter . next () ; MST[ArgumentPropagationMutator]MSP[]
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { MST[experimental.MemberVariableMutator]MSP[] final ThreadContainer root = new ThreadContainer () ;
container = prev ; MST[rv.ROR5Mutator]MSP[] } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[experimental.MemberVariableMutator]MSP[] int count = 0 ;
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[rv.ROR5Mutator]MSP[]
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[rv.ROR5Mutator]MSP[] && ( ref . parent == null )
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( prev = null , c = root . child , rest = c . next ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; MST[ArgumentPropagationMutator]MSP[] } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[NegateConditionalsMutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
&& c . threadable . subjectIsReply () && ! old . threadable . subjectIsReply () ) ) { c . parent = old ; c . next = old . child ; old . child = c ; } else { MST[ConstructorCallMutator]MSP[] final ThreadContainer newc = new ThreadContainer () ;
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[rv.ROR4Mutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( prev == null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR5Mutator]MSP[] int count = 0 ;
old . child = null ; c . parent = old ; newc . parent = old ; MST[experimental.MemberVariableMutator]MSP[] old . child = c ; c . next = newc ; } c = prev ; } subjectTable . clear () ; subjectTable = null ; } @Deprecated
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; MST[experimental.MemberVariableMutator]MSP[] container . parent = null ; } if ( parentRef != null ) {
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( prev == null ) {
c != null ; prev = c , c = rest , rest = ( rest == null ? null : rest . next ) ) { Threadable threadable = c . threadable ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( threadable == null ) { threadable = c . child . threadable ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[NegateConditionalsMutator]MSP[] int count = 0 ;
final ThreadContainer c = entry . getValue () ; if ( c . parent == null ) { if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ; MST[experimental.MemberVariableMutator]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR1Mutator]MSP[] int count = 0 ;
container . parent = parentRef ; MST[experimental.MemberVariableMutator]MSP[] container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { final ThreadContainer root = new ThreadContainer () ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; MST[VoidMethodCallMutator]MSP[] } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ;
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[rv.ROR5Mutator]MSP[] for ( prev = null , c = root . child , rest = c . next ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ( ref . parent == null )
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
&& ( parentRef != ref ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; if ( container != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container . threadable == null && container . child != null && ( container . parent != null
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR5Mutator]MSP[] int count = 0 ;
if ( idTable . isEmpty () ) { MST[rv.ROR2Mutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
if ( idTable . isEmpty () ) { return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; MST[VoidMethodCallMutator]MSP[] gatherSubjects ( root ) ;
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[rv.CRCR6Mutator]MSP[]
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ; MST[NegateConditionalsMutator]MSP[]
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[NonVoidMethodCallMutator]MSP[]
final String subj = threadable . simplifiedSubject () ; MST[NonVoidMethodCallMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ; MST[experimental.MemberVariableMutator]MSP[]
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { MST[NullReturnValsMutator]MSP[] final ThreadContainer root = new ThreadContainer () ;
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[rv.ROR3Mutator]MSP[] old . threadable == null || ( c . threadable != null
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[NegateConditionalsMutator]MSP[]
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI4Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI3Mutator]MSP[] int count = 0 ;
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI3Mutator]MSP[] for ( final String refString : references ) {
&& ( parentRef != ref ) MST[rv.ROR3Mutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; MST[experimental.MemberVariableMutator]MSP[] ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[NegateConditionalsMutator]MSP[]
final String subj = threadable . simplifiedSubject () ; MST[NonVoidMethodCallMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[rv.ROR2Mutator]MSP[] buildContainer ( t , idTable ) ; } }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOR2Mutator]MSP[] int count = 0 ;
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; MST[rv.CRCR3Mutator]MSP[] if ( container != null ) {
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[RemoveConditionalMutator_EQUAL_IF]MSP[] old . threadable == null || ( c . threadable != null
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR1Mutator]MSP[]
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR5Mutator]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR5Mutator]MSP[] int count = 0 ;
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { MST[rv.ROR5Mutator]MSP[] if ( r . threadable == null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR5Mutator]MSP[] int count = 0 ;
&& ( parentRef != ref ) MST[NegateConditionalsMutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
if ( container . threadable != null ) { bogusIdCount ++ ; MST[rv.ABSMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
if ( idTable . isEmpty () ) { return null ; } final ThreadContainer root = findRootSet ( idTable ) ; MST[NonVoidMethodCallMutator]MSP[] idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI2Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI1Mutator]MSP[] int count = 0 ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
rest != null ; prev = rest , rest = rest . next ) { if ( rest == container ) { break; } } if ( rest == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
|| ( c . threadable == null && old . threadable != null ) || ( old . threadable != null && old . threadable . subjectIsReply () MST[NonVoidMethodCallMutator]MSP[] && c . threadable != null && ! c . threadable . subjectIsReply () ) ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int count = 0 ;
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI3Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR4Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[rv.ROR5Mutator]MSP[]
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { MST[NegateConditionalsMutator]MSP[] parent . child = kids ; } else { prev . next = kids ; }
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[NegateConditionalsMutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[NegateConditionalsMutator]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOR3Mutator]MSP[] int count = 0 ;
prev = container , container = next , MST[NegateConditionalsMutator]MSP[] next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR5Mutator]MSP[]
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[rv.ROR1Mutator]MSP[] buildContainer ( t , idTable ) ; } }
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { MST[NegateConditionalsMutator]MSP[] ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ;
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[rv.ROR5Mutator]MSP[] if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR4Mutator]MSP[]
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[rv.ROR5Mutator]MSP[] && ( ref . parent == null )
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
if ( idTable . isEmpty () ) { MST[rv.ROR1Mutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container . threadable == null && container . child != null && ( container . parent != null
r . threadable = r . child . threadable . makeDummy () ; MST[NonVoidMethodCallMutator]MSP[] } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; return result ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[IncrementsMutator]MSP[]
if ( root . next != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) {
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.ABSMutator]MSP[] for ( final String refString : references ) {
rest != null ; prev = rest , rest = rest . next ) { MST[rv.ROR5Mutator]MSP[] if ( rest == container ) { break; } } if ( rest == null ) { throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR4Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[NegateConditionalsMutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
if ( prev == null ) { MST[experimental.MemberVariableMutator]MSP[] container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR4Mutator]MSP[] int count = 0 ;
final String subj = threadable . simplifiedSubject () ; MST[NegateConditionalsMutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI2Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR6Mutator]MSP[] int count = 0 ;
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( container . threadable != null ) { bogusIdCount ++ ; MST[rv.UOI3Mutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR4Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
rest != null ; prev = rest , rest = rest . next ) { if ( rest == container ) { break; } } if ( rest == null ) { MST[rv.ROR5Mutator]MSP[] throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
parent . child = container . next ; } else { MST[experimental.MemberVariableMutator]MSP[] prev . next = container . next ; } container = prev ; } else if ( container . threadable == null && container . child != null && ( container . parent != null
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[rv.ROR5Mutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
r . threadable = r . child . threadable . makeDummy () ; MST[experimental.MemberVariableMutator]MSP[] } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; return result ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[NegateConditionalsMutator]MSP[] int count = 0 ;
final ThreadContainer c = entry . getValue () ; if ( c . parent == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ;
newc . threadable = old . threadable ; newc . child = old . child ; MST[NegateConditionalsMutator]MSP[] for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; } old . threadable = null ;
count = 0 ; for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { Threadable threadable = c . threadable ; if ( threadable == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] threadable = c . child . threadable ; }
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( r . threadable == null ) {
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[NegateConditionalsMutator]MSP[] if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[NegateConditionalsMutator]MSP[]
if ( prev == null ) { container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; for ( final String refString : references ) { MST[NonVoidMethodCallMutator]MSP[]
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container . threadable == null && container . child != null && ( container . parent != null
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { MST[ConstructorCallMutator]MSP[] container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
container . parent = parentRef ; container . next = parentRef . child ; MST[experimental.MemberVariableMutator]MSP[] parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { final ThreadContainer root = new ThreadContainer () ;
&& c . threadable . subjectIsReply () && ! old . threadable . subjectIsReply () ) ) { c . parent = old ; c . next = old . child ; old . child = c ; } else { final ThreadContainer newc = new ThreadContainer () ; MST[experimental.MemberVariableMutator]MSP[]
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { MST[NegateConditionalsMutator]MSP[] ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
if ( idTable . isEmpty () ) { return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; MST[VoidMethodCallMutator]MSP[] idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] root . flush () ; return result ; }
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { final ThreadContainer root = new ThreadContainer () ; MST[NonVoidMethodCallMutator]MSP[]
|| ( c . threadable == null && old . threadable != null ) || ( old . threadable != null && old . threadable . subjectIsReply () && c . threadable != null MST[experimental.RemoveIncrementsMutator]MSP[] && ! c . threadable . subjectIsReply () ) ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI2Mutator]MSP[] int count = 0 ;
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( prev == null ) {
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[NegateConditionalsMutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI4Mutator]MSP[] for ( final String refString : references ) {
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR3Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
&& ( parentRef != ref ) MST[rv.ROR4Mutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
if ( prev == null ) { MST[NegateConditionalsMutator]MSP[] root . child = c . next ; } else { prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { MST[NegateConditionalsMutator]MSP[] if ( r . threadable == null ) {
newc . threadable = old . threadable ; newc . child = old . child ; for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; MST[experimental.MemberVariableMutator]MSP[] } old . threadable = null ;
rest != null ; prev = rest , rest = rest . next ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( rest == container ) { break; } } if ( rest == null ) { throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[NegateConditionalsMutator]MSP[] for ( prev = null , c = root . child , rest = c . next ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int count = 0 ;
newc . threadable = old . threadable ; newc . child = old . child ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; } old . threadable = null ;
root . child = c ; } } return root ; } private void pruneEmptyContainers ( final ThreadContainer parent ) { ThreadContainer container , prev , next ; for ( prev = null , container = parent . child , next = container . next ; MST[rv.ROR5Mutator]MSP[] container != null ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOD2Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] int count = 0 ;
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[rv.CRCR5Mutator]MSP[]
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR3Mutator]MSP[]
for ( tail = kids ; tail . next != null ; tail = tail . next ) { MST[NegateConditionalsMutator]MSP[] tail . parent = container . parent ; } tail . parent = container . parent ; tail . next = container . next ; next = kids ;
container = prev ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ;
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; MST[NullReturnValsMutator]MSP[] } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) {
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && ( ref . parent == null )
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[experimental.RemoveIncrementsMutator]MSP[]
if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] root . child = c . next ; } else { prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container . threadable == null && container . child != null && ( container . parent != null
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[rv.CRCR1Mutator]MSP[]
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR3Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[rv.ROR2Mutator]MSP[] old . threadable == null || ( c . threadable != null
public Threadable thread ( final Threadable [] messages ) { if ( messages == null ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } return thread ( Arrays . asList ( messages ) ) ; }
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ABSMutator]MSP[] int count = 0 ;
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[IncrementsMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { final ThreadContainer root = new ThreadContainer () ; MST[NonVoidMethodCallMutator]MSP[]
old . child = null ; MST[experimental.MemberVariableMutator]MSP[] c . parent = old ; newc . parent = old ; old . child = c ; c . next = newc ; } c = prev ; } subjectTable . clear () ; subjectTable = null ; } @Deprecated
for ( tail = kids ; tail . next != null ; tail = tail . next ) { tail . parent = container . parent ; } tail . parent = container . parent ; MST[experimental.MemberVariableMutator]MSP[] tail . next = container . next ; next = kids ;
old . child = null ; c . parent = old ; newc . parent = old ; old . child = c ; c . next = newc ; } c = prev ; } subjectTable . clear () ; subjectTable = null ; } @Deprecated MST[ReturnValsMutator]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI4Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR3Mutator]MSP[] int count = 0 ;
rest != null ; prev = rest , rest = rest . next ) { if ( rest == container ) { break; } } if ( rest == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) {
root . child = c ; } } return root ; } private void pruneEmptyContainers ( final ThreadContainer parent ) { ThreadContainer container , prev , next ; for ( prev = null , container = parent . child , next = container . next ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container != null ;
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; MST[ConstructorCallMutator]MSP[] for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { buildContainer ( t , idTable ) ; } }
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] buildContainer ( t , idTable ) ; } }
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { MST[rv.ROR5Mutator]MSP[] ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
if ( idTable . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
for ( tail = kids ; tail . next != null ; tail = tail . next ) { MST[rv.ROR5Mutator]MSP[] tail . parent = container . parent ; } tail . parent = container . parent ; tail . next = container . next ; next = kids ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR4Mutator]MSP[] int count = 0 ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[NegateConditionalsMutator]MSP[] && ( ref . parent == null )
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { int count = 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { MST[rv.ROR5Mutator]MSP[] ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[NegateConditionalsMutator]MSP[] int count = 0 ;
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ;
rest != null ; prev = rest , rest = rest . next ) { MST[NegateConditionalsMutator]MSP[] if ( rest == container ) { break; } } if ( rest == null ) { throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[ConstructorCallMutator]MSP[] int count = 0 ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public Threadable thread ( final Threadable [] messages ) { if ( messages == null ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } return thread ( Arrays . asList ( messages ) ) ; }
&& ( parentRef != ref ) MST[NonVoidMethodCallMutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
rest != null ; prev = rest , rest = rest . next ) { if ( rest == container ) { break; } } if ( rest == null ) { MST[NegateConditionalsMutator]MSP[] throw new RuntimeException ( lr_4 + container + lr_5 + container . parent ) ; }
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI3Mutator]MSP[] for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR2Mutator]MSP[] int count = 0 ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[rv.UOI4Mutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[rv.ROR5Mutator]MSP[] buildContainer ( t , idTable ) ; } }
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[NegateConditionalsMutator]MSP[]
r . threadable = r . child . threadable . makeDummy () ; MST[experimental.NakedReceiverMutator]MSP[] } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; return result ; }
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { parent . child = kids ; } else { MST[experimental.MemberVariableMutator]MSP[] prev . next = kids ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR3Mutator]MSP[] int count = 0 ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR2Mutator]MSP[]
if ( idTable . isEmpty () ) { MST[rv.ROR5Mutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOD1Mutator]MSP[] int count = 0 ;
for ( tail = kids ; tail . next != null ; tail = tail . next ) { MST[experimental.MemberVariableMutator]MSP[] tail . parent = container . parent ; } tail . parent = container . parent ; tail . next = container . next ; next = kids ;
&& ( parentRef != ref ) MST[rv.ROR5Mutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
|| container . child . next == null ) ) { ThreadContainer tail ; final ThreadContainer kids = container . child ; if ( prev == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] parent . child = kids ; } else { prev . next = kids ; }
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[rv.ROR1Mutator]MSP[] old . threadable == null || ( c . threadable != null
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
old . child = null ; c . parent = old ; newc . parent = old ; old . child = c ; c . next = newc ; } c = prev ; MST[VoidMethodCallMutator]MSP[] } subjectTable . clear () ; subjectTable = null ; } @Deprecated
if ( container . threadable != null ) { bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container = new ThreadContainer () ;
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[rv.ROR5Mutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
if ( prev == null ) { MST[rv.ROR5Mutator]MSP[] root . child = c . next ; } else { prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( idTable . isEmpty () ) { return null ; MST[ReturnValsMutator]MSP[] } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[rv.ROR5Mutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; MST[NonVoidMethodCallMutator]MSP[] int bogusIdCount = 0 ; if ( container != null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[InlineConstantMutator]MSP[] int count = 0 ;
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[NegateConditionalsMutator]MSP[] for ( prev = null , c = root . child , rest = c . next ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[MathMutator]MSP[] int count = 0 ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[experimental.NakedReceiverMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ( ref . parent == null )
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[rv.ROR5Mutator]MSP[] for ( prev = null , c = root . child , rest = c . next ;
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; MST[NonVoidMethodCallMutator]MSP[] idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ABSMutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.AOR4Mutator]MSP[] int count = 0 ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR5Mutator]MSP[]
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[NegateConditionalsMutator]MSP[] if ( prev == null ) {
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; MST[rv.CRCR5Mutator]MSP[] if ( container != null ) {
prev = container , container = next , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { if ( prev == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; MST[ArgumentPropagationMutator]MSP[] } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[NegateConditionalsMutator]MSP[] old . threadable == null || ( c . threadable != null
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR5Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) { MST[NegateConditionalsMutator]MSP[]
if ( container . threadable != null ) { bogusIdCount ++ ; MST[NonVoidMethodCallMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; MST[ReturnValsMutator]MSP[] } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) {
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) { MST[rv.ROR5Mutator]MSP[]
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ; MST[rv.ROR5Mutator]MSP[]
container . threadable = threadable ; MST[ArgumentPropagationMutator]MSP[] idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; for ( final String refString : references ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[InlineConstantMutator]MSP[] int count = 0 ;
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[rv.ROR2Mutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] old . threadable == null || ( c . threadable != null
for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { count ++ ; } HashMap < String , ThreadContainer > subjectTable = new HashMap <> ( (int) ( count * 1.2 ) , ( float ) 0.9 ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; if ( container != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[NegateConditionalsMutator]MSP[]
&& ( parentRef == container || container . findChild ( parentRef ) ) ) { parentRef = null ; } if ( container . parent != null ) { ThreadContainer rest , prev ; for ( prev = null , rest = container . parent . child ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR3Mutator]MSP[] int count = 0 ;
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) MST[NegateConditionalsMutator]MSP[] && ( ref . parent == null )
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) { MST[rv.ROR5Mutator]MSP[]
if ( prev == null ) { root . child = c . next ; } else { MST[experimental.MemberVariableMutator]MSP[] prev . next = c . next ; } c . next = null ; if ( old . threadable == null && c . threadable == null ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR2Mutator]MSP[]
count = 0 ; for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { Threadable threadable = c . threadable ; if ( threadable == null ) { MST[rv.ROR5Mutator]MSP[] threadable = c . child . threadable ; }
return null ; MST[ReturnValsMutator]MSP[] } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { buildContainer ( t , idTable ) ; } }
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR2Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
|| ( c . threadable == null && old . threadable != null ) || ( old . threadable != null && old . threadable . subjectIsReply () MST[ArgumentPropagationMutator]MSP[] && c . threadable != null && ! c . threadable . subjectIsReply () ) ) {
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_IF]MSP[] container . threadable == null && container . child != null && ( container . parent != null
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[rv.ROR5Mutator]MSP[] container . threadable == null && container . child != null && ( container . parent != null
public Threadable thread ( final List < ? extends Threadable > messages ) { return thread ( ( Iterable < ? extends Threadable > ) messages ) ; } public Threadable thread ( final Iterable < ? extends Threadable > messages ) { if ( messages == null ) { MST[NegateConditionalsMutator]MSP[]
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR5Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR2Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR6Mutator]MSP[] int count = 0 ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[ConstructorCallMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
if ( container . threadable != null ) { bogusIdCount ++ ; MST[rv.UOI1Mutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR2Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( prev = null , c = root . child , rest = c . next ;
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; MST[NonVoidMethodCallMutator]MSP[] ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; if ( container != null ) {
if ( container . threadable != null ) { bogusIdCount ++ ; MST[experimental.NakedReceiverMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[NegateConditionalsMutator]MSP[]
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( prev == null ) {
&& ( parentRef != ref ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
c != null ; prev = c , c = rest , rest = ( rest == null ? null : rest . next ) ) { Threadable threadable = c . threadable ; MST[rv.ROR5Mutator]MSP[] if ( threadable == null ) { threadable = c . child . threadable ; }
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[rv.ROR5Mutator]MSP[] if ( prev == null ) {
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; for ( final String refString : references ) { MST[ArgumentPropagationMutator]MSP[]
if ( idTable . isEmpty () ) { return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ; MST[VoidMethodCallMutator]MSP[]
if ( idTable . isEmpty () ) { MST[NegateConditionalsMutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
if ( container . threadable != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { if ( prev == null ) { MST[experimental.MemberVariableMutator]MSP[]
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.UOI4Mutator]MSP[] int count = 0 ;
c != null ; prev = c , c = rest , rest = ( rest == null ? null : rest . next ) ) { Threadable threadable = c . threadable ; if ( threadable == null ) { threadable = c . child . threadable ; MST[NonVoidMethodCallMutator]MSP[] }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR3Mutator]MSP[] int count = 0 ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.CRCR2Mutator]MSP[] int count = 0 ;
subjectTable . put ( subj , c ) ; count ++ ; } } if ( count == 0 ) { return; } ThreadContainer prev , c , rest ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( prev = null , c = root . child , rest = c . next ;
final ThreadContainer c = entry . getValue () ; if ( c . parent == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( c . next != null ) { throw new RuntimeException ( lr_6 + c . next . toString () ) ; } c . next = root . child ;
count = 0 ; for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { Threadable threadable = c . threadable ; if ( threadable == null ) { threadable = c . child . threadable ; MST[NonVoidMethodCallMutator]MSP[] }
container . threadable = threadable ; MST[NonVoidMethodCallMutator]MSP[] idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; for ( final String refString : references ) {
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; if ( container != null ) { MST[NegateConditionalsMutator]MSP[]
container . threadable = threadable ; idTable . put ( id , container ) ; } ThreadContainer parentRef = null ; { final String [] references = threadable . messageThreadReferences () ; MST[rv.UOI1Mutator]MSP[] for ( final String refString : references ) {
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; MST[NonVoidMethodCallMutator]MSP[] } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
for ( tail = kids ; tail . next != null ; tail = tail . next ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] tail . parent = container . parent ; } tail . parent = container . parent ; tail . next = container . next ; next = kids ;
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR5Mutator]MSP[]
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR5Mutator]MSP[]
count = 0 ; for ( ThreadContainer c = root . child ; c != null ; c = c . next ) { Threadable threadable = c . threadable ; if ( threadable == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] threadable = c . child . threadable ; }
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[InlineConstantMutator]MSP[] int count = 0 ;
if ( root . next != null ) { throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( r . threadable == null ) {
newc . threadable = old . threadable ; newc . child = old . child ; for ( ThreadContainer tail = newc . child ; tail != null ; tail = tail . next ) { tail . parent = newc ; } old . threadable = null ; MST[experimental.MemberVariableMutator]MSP[]
r . threadable = r . child . threadable . makeDummy () ; } } final Threadable result = ( root . child == null ? null : root . child . threadable ) ; root . flush () ; return result ; MST[ReturnValsMutator]MSP[] }
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[rv.ROR3Mutator]MSP[]
if ( prev == null ) { MST[rv.ROR5Mutator]MSP[] container . parent . child = container . next ; } else { prev . next = container . next ; } container . next = null ; container . parent = null ; } if ( parentRef != null ) {
if ( idTable . isEmpty () ) { MST[rv.ROR4Mutator]MSP[] return null ; } final ThreadContainer root = findRootSet ( idTable ) ; idTable . clear () ; idTable = null ; pruneEmptyContainers ( root ) ; root . reverseChildren () ; gatherSubjects ( root ) ;
if ( root . next != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new RuntimeException ( lr_1 + root ) ; } for ( ThreadContainer r = root . child ; r != null ; r = r . next ) { if ( r . threadable == null ) {
for ( tail = c . child ; tail != null ; tail = tail . next ) { tail . parent = old ; } c . child = null ; } else if ( MST[rv.ROR5Mutator]MSP[] old . threadable == null || ( c . threadable != null
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null MST[rv.ROR1Mutator]MSP[]
parent . child = container . next ; } else { prev . next = container . next ; } container = prev ; } else if ( MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] container . threadable == null && container . child != null && ( container . parent != null
if ( container . threadable != null ) { bogusIdCount ++ ; MST[NonVoidMethodCallMutator]MSP[] id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
final String subj = threadable . simplifiedSubject () ; MST[rv.ROR1Mutator]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; MST[ArgumentPropagationMutator]MSP[] int bogusIdCount = 0 ; if ( container != null ) {
if ( container . threadable != null ) { MST[rv.ROR5Mutator]MSP[] bogusIdCount ++ ; id = lr_2 + ( bogusIdCount ) + lr_3 ; container = null ; } else { container . threadable = threadable ; } } if ( container == null ) { container = new ThreadContainer () ;
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[rv.ROR1Mutator]MSP[] int count = 0 ;
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { MST[rv.ROR1Mutator]MSP[] final Map . Entry < String , ThreadContainer > entry = iter . next () ;
&& ( parentRef != ref ) MST[rv.ROR1Mutator]MSP[] && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
root . child = c ; } } return root ; } private void pruneEmptyContainers ( final ThreadContainer parent ) { MST[experimental.MemberVariableMutator]MSP[] ThreadContainer container , prev , next ; for ( prev = null , container = parent . child , next = container . next ; container != null ;
final String subj = threadable . simplifiedSubject () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( subj == null || subj . length () == 0 ) { continue; } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == c ) { continue; }
prev = container , container = next , next = ( container == null ? null : container . next ) ) { if ( container . threadable == null && container . child == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( prev == null ) {
&& ( parentRef != ref ) && ! ( ref . findChild ( parentRef ) ) ) { ref . parent = parentRef ; MST[experimental.MemberVariableMutator]MSP[] ref . next = parentRef . child ; parentRef . child = ref ; } parentRef = ref ; } } if ( parentRef != null
ThreadContainer ref = idTable . get ( refString ) ; if ( ref == null ) { ref = new ThreadContainer () ; MST[ArgumentPropagationMutator]MSP[] idTable . put ( refString , ref ) ; } if ( ( parentRef != null ) && ( ref . parent == null )
old . child = null ; c . parent = old ; newc . parent = old ; old . child = c ; MST[experimental.MemberVariableMutator]MSP[] c . next = newc ; } c = prev ; } subjectTable . clear () ; subjectTable = null ; } @Deprecated
private void buildContainer ( final Threadable threadable , final HashMap < String , ThreadContainer > idTable ) { String id = threadable . messageThreadId () ; ThreadContainer container = idTable . get ( id ) ; int bogusIdCount = 0 ; MST[rv.CRCR1Mutator]MSP[] if ( container != null ) {
container = prev ; } else if ( container . child != null ) { pruneEmptyContainers ( container ) ; } } } private void gatherSubjects ( final ThreadContainer root ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] int count = 0 ;
container . parent = parentRef ; container . next = parentRef . child ; parentRef . child = container ; } } private ThreadContainer findRootSet ( final HashMap < String , ThreadContainer > idTable ) { MST[ConstructorCallMutator]MSP[] final ThreadContainer root = new ThreadContainer () ;
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[rv.ROR4Mutator]MSP[] buildContainer ( t , idTable ) ; } }
final String subj = threadable . simplifiedSubject () ; if ( subj == null || subj . length () == 0 ) { continue; MST[NonVoidMethodCallMutator]MSP[] } final ThreadContainer old = subjectTable . get ( subj ) ; if ( old == null
final Iterator < Map . Entry < String , ThreadContainer > > iter = idTable . entrySet () . iterator () ; while ( iter . hasNext () ) { final Map . Entry < String , ThreadContainer > entry = iter . next () ; MST[NonVoidMethodCallMutator]MSP[]
root . child = c ; } } return root ; } private void pruneEmptyContainers ( final ThreadContainer parent ) { ThreadContainer container , prev , next ; for ( prev = null , container = parent . child , next = container . next ; MST[NegateConditionalsMutator]MSP[] container != null ;
c != null ; prev = c , c = rest , rest = ( rest == null ? null : rest . next ) ) { Threadable threadable = c . threadable ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( threadable == null ) { threadable = c . child . threadable ; }
return null ; } HashMap < String , ThreadContainer > idTable = new HashMap <> () ; for ( final Threadable t : messages ) { if ( ! t . isDummy () ) { MST[NegateConditionalsMutator]MSP[] buildContainer ( t , idTable ) ; } }
