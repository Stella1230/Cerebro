private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR2Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public long getSize () MST[ReturnValsMutator]MSP[N] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[InlineConstantMutator]MSP[S]
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR6Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[experimental.NakedReceiverMutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR3Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[rv.UOI2Mutator]MSP[N] { this . type = type ; }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[PrimitiveReturnsMutator]MSP[N] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR2Mutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.ROR2Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR1Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () MST[InlineConstantMutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { MST[NegateConditionalsMutator]MSP[S] final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI3Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR5Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR2Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR3Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR6Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; MST[NegateConditionalsMutator]MSP[N] } return permissions [ access ] [ permission ] ; } @Override
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR3Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public long getSize () MST[rv.UOI1Mutator]MSP[S] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] } return permissions [ access ] [ permission ] ; } @Override
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ABSMutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR3Mutator]MSP[N] { return type == FILE_TYPE ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR6Mutator]MSP[S] return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[rv.UOI2Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR5Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[rv.ROR3Mutator]MSP[N] } final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[InlineConstantMutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI1Mutator]MSP[N]
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[rv.UOI4Mutator]MSP[N] { this . size = size ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR5Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.UOI2Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR3Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR6Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[ReturnValsMutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR1Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.UOI2Mutator]MSP[S] { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.UOI2Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
private char formatType () { MST[rv.CRCR3Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[rv.CRCR2Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[InlineConstantMutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
private char formatType () { switch( type ) { case FILE_TYPE : MST[rv.UOI2Mutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( '-' ) ; } MST[rv.CRCR5Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ROR3Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[BooleanTrueReturnValsMutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_9 , timestamp ) ; MST[NonVoidMethodCallMutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.CRCR6Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR6Mutator]MSP[S] } return sb . toString () ; }
public String getGroup () MST[ReturnValsMutator]MSP[N] { return group ; } public void setUser ( final String user ) { this . user = user ; } public String getUser () { return user ; } public void setLink ( final String link ) { this . link = link ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR2Mutator]MSP[S] } return sb . toString () ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[PrimitiveReturnsMutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) MST[experimental.MemberVariableMutator]MSP[N] { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR6Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public boolean isSymbolicLink () MST[rv.ROR3Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[InlineConstantMutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[NegateConditionalsMutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.UOI1Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[NonVoidMethodCallMutator]MSP[S] return sb . toString () ; }
private char formatType () { switch( type ) { case FILE_TYPE : MST[rv.ABSMutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S]
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ABSMutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ROR4Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.ROR3Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[NonVoidMethodCallMutator]MSP[S] } return sb . toString () ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[InlineConstantMutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR6Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR2Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR2Mutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR6Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR2Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ROR2Mutator]MSP[N] } else {
public String getGroup () { return group ; } public void setUser ( final String user ) MST[experimental.MemberVariableMutator]MSP[N] { this . user = user ; } public String getUser () { return user ; } public void setLink ( final String link ) { this . link = link ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[InlineConstantMutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR1Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ROR4Mutator]MSP[N] { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR5Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR2Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () MST[InlineConstantMutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR2Mutator]MSP[N] fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[InlineConstantMutator]MSP[S] } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ABSMutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[InlineConstantMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR6Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR5Mutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR2Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR1Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[rv.ROR4Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ; MST[rv.ROR5Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[EmptyObjectReturnValsMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public int getType () MST[rv.UOI3Mutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR4Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR3Mutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR6Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[InlineConstantMutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ROR2Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[InlineConstantMutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
private char formatType () { switch( type ) { case FILE_TYPE : MST[experimental.RemoveSwitchMutator_2]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR3Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
private char formatType () { switch( type ) { case FILE_TYPE : MST[experimental.RemoveSwitchMutator_1]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () MST[ReturnValsMutator]MSP[N] { return date ; } public void setPermission ( final int access , final int permission , final boolean value )
private char formatType () { switch( type ) { case FILE_TYPE : MST[experimental.RemoveSwitchMutator_0]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.ABSMutator]MSP[N]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR2Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[rv.ROR1Mutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[rv.ABSMutator]MSP[N] { this . type = type ; }
fmt . format ( lr_9 , timestamp ) ; MST[rv.ROR4Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.UOI3Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override MST[EmptyObjectReturnValsMutator]MSP[N]
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[InlineConstantMutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.CRCR5Mutator]MSP[N] } else {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.CRCR1Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
public boolean isSymbolicLink () MST[ReturnValsMutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () MST[ReturnValsMutator]MSP[N] { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[rv.UOI1Mutator]MSP[S] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
private char formatType () { switch( type ) { case FILE_TYPE : MST[rv.UOI3Mutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[rv.CRCR3Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI2Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.UOI1Mutator]MSP[S] } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ROR4Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.UOI1Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI3Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.UOI4Mutator]MSP[S] } else {
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[ReturnValsMutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () MST[rv.CRCR6Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR5Mutator]MSP[S] } return sb . toString () ; }
public int getType () { return type ; } public void setName ( final String name ) MST[experimental.MemberVariableMutator]MSP[N] { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR6Mutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR1Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_7 , timestamp ) ; MST[rv.ROR3Mutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[rv.UOI3Mutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[rv.ABSMutator]MSP[N] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[rv.CRCR5Mutator]MSP[N]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { MST[NonVoidMethodCallMutator]MSP[S] if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public boolean isSymbolicLink () MST[rv.UOI1Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR6Mutator]MSP[S]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ROR5Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
if ( hasPermission ( access , READ_PERMISSION ) ) { MST[ConstructorCallMutator]MSP[S] sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR6Mutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () MST[rv.ABSMutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI1Mutator]MSP[N]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[rv.ROR4Mutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR4Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[InlineConstantMutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.ABSMutator]MSP[N]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR3Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[ReturnValsMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR3Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR1Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR3Mutator]MSP[N] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR3Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[NonVoidMethodCallMutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR5Mutator]MSP[S]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[experimental.NakedReceiverMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.ABSMutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR2Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public int getType () MST[PrimitiveReturnsMutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR4Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () MST[ReturnValsMutator]MSP[S] { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.ROR1Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI4Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () MST[ReturnValsMutator]MSP[N] { return name ; } public void setSize ( final long size ) { this . size = size ; }
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR6Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[InlineConstantMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR1Mutator]MSP[S] { return type == FILE_TYPE ; }
private char formatType () { MST[InlineConstantMutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[experimental.NakedReceiverMutator]MSP[S]
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; } MST[EmptyObjectReturnValsMutator]MSP[S]
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR5Mutator]MSP[S] { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[BooleanTrueReturnValsMutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ROR2Mutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ROR5Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.CRCR5Mutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[InlineConstantMutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.ROR2Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI4Mutator]MSP[N]
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[NonVoidMethodCallMutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[InlineConstantMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR3Mutator]MSP[S]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[InlineConstantMutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public long getSize () MST[rv.ABSMutator]MSP[N] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public long getSize () MST[PrimitiveReturnsMutator]MSP[N] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR1Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; } MST[ReturnValsMutator]MSP[S]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR6Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR4Mutator]MSP[S]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR3Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[InlineConstantMutator]MSP[N] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[NegateConditionalsMutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[InlineConstantMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.ABSMutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.CRCR6Mutator]MSP[N] } else {
public int getType () MST[rv.ABSMutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
public boolean isSymbolicLink () MST[rv.CRCR4Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () MST[rv.CRCR3Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : MST[rv.UOI1Mutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR5Mutator]MSP[S]
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[InlineConstantMutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[InlineConstantMutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR2Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[rv.ROR2Mutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.CRCR5Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () MST[rv.CRCR1Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; MST[rv.ROR1Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public long getSize () MST[rv.UOI4Mutator]MSP[N] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ROR2Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR4Mutator]MSP[N] { return type == FILE_TYPE ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR3Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR2Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.UOI4Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI3Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[InlineConstantMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () MST[EmptyObjectReturnValsMutator]MSP[N] { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR3Mutator]MSP[S] return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.UOI3Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.CRCR2Mutator]MSP[N] } else {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[rv.ROR2Mutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[rv.UOI3Mutator]MSP[N] { this . size = size ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[ReturnValsMutator]MSP[N] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR5Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.UOI1Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () MST[NullReturnValsMutator]MSP[N] { return date ; } public void setPermission ( final int access , final int permission , final boolean value )
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR6Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[InlineConstantMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR4Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; MST[ConstructorCallMutator]MSP[S] sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ;
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) MST[experimental.MemberVariableMutator]MSP[N] { this . group = group ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.ABSMutator]MSP[S]
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[rv.ROR4Mutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR5Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR5Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR2Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ROR3Mutator]MSP[S] } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ROR5Mutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[BooleanTrueReturnValsMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR1Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.ABSMutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR6Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[InlineConstantMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S] sb . append ( permissionToString ( GROUP_ACCESS ) ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR1Mutator]MSP[N] fmt . format ( lr_3 , getUser () , getGroup () ) ;
private char formatType () { MST[PrimitiveReturnsMutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[rv.ABSMutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR3Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR6Mutator]MSP[N] fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR4Mutator]MSP[S]
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR3Mutator]MSP[S]
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[rv.UOI4Mutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[InlineConstantMutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[NonVoidMethodCallMutator]MSP[S]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ABSMutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_7 , timestamp ) ; MST[rv.ROR2Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
sb . append ( '-' ) ; } MST[rv.CRCR1Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[InlineConstantMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI4Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.UOI3Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR5Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[rv.CRCR6Mutator]MSP[S]
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[rv.CRCR4Mutator]MSP[S] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[InlineConstantMutator]MSP[N] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () MST[EmptyObjectReturnValsMutator]MSP[S] { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { MST[rv.ROR5Mutator]MSP[S] final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String getGroup () MST[EmptyObjectReturnValsMutator]MSP[N] { return group ; } public void setUser ( final String user ) { this . user = user ; } public String getUser () { return user ; } public void setLink ( final String link ) { this . link = link ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else {
fmt . format ( lr_9 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR4Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[NonVoidMethodCallMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[experimental.NakedReceiverMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR4Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI4Mutator]MSP[N]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR3Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[rv.ROR5Mutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR3Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR4Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[InlineConstantMutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.UOI3Mutator]MSP[N] { return type == FILE_TYPE ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[experimental.NakedReceiverMutator]MSP[S]
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[PrimitiveReturnsMutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR3Mutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[InlineConstantMutator]MSP[S]
private char formatType () { MST[rv.CRCR4Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[experimental.NakedReceiverMutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
public boolean isSymbolicLink () MST[rv.CRCR4Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } MST[rv.CRCR6Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String getGroup () { return group ; } public void setUser ( final String user ) { this . user = user ; } public String getUser () { return user ; } public void setLink ( final String link ) MST[experimental.MemberVariableMutator]MSP[S] { this . link = link ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI4Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
public int getType () MST[ReturnValsMutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
public boolean isSymbolicLink () MST[rv.CRCR6Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[experimental.NakedReceiverMutator]MSP[S] } return sb . toString () ; }
fmt . format ( lr_9 , timestamp ) ; MST[rv.ROR3Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR1Mutator]MSP[S] } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () MST[ArgumentPropagationMutator]MSP[S] { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR3Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public int getType () MST[rv.UOI4Mutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[rv.CRCR1Mutator]MSP[N]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[InlineConstantMutator]MSP[S]
public boolean isSymbolicLink () MST[rv.ROR5Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; MST[VoidMethodCallMutator]MSP[S] } }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR3Mutator]MSP[S]
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR6Mutator]MSP[S] { return type == FILE_TYPE ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR5Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ROR1Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR2Mutator]MSP[S]
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR6Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ROR3Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[NonVoidMethodCallMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[NonVoidMethodCallMutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR2Mutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[rv.ABSMutator]MSP[N] { this . size = size ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[NonVoidMethodCallMutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR4Mutator]MSP[N] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR5Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR5Mutator]MSP[N] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR6Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[InlineConstantMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[experimental.NakedReceiverMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR1Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR4Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[rv.UOI4Mutator]MSP[N] { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR3Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.ROR4Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[experimental.NakedReceiverMutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI1Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[InlineConstantMutator]MSP[S]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR1Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR5Mutator]MSP[N] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override MST[ReturnValsMutator]MSP[N]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ROR1Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public long getSize () MST[rv.UOI3Mutator]MSP[N] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR5Mutator]MSP[N] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[NegateConditionalsMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR4Mutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () MST[rv.UOI4Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.CRCR3Mutator]MSP[S] } else {
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[rv.UOI2Mutator]MSP[N] { this . size = size ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR3Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[ReturnValsMutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[rv.ROR5Mutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI3Mutator]MSP[S]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR6Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR1Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[rv.ROR1Mutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR3Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[NegateConditionalsMutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[NonVoidMethodCallMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR4Mutator]MSP[N] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.CRCR3Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_9 , timestamp ) ; MST[rv.ROR5Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR6Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[InlineConstantMutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.UOI4Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR5Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR5Mutator]MSP[N]
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[rv.UOI4Mutator]MSP[N] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[experimental.MemberVariableMutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[ReturnValsMutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI1Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.UOI3Mutator]MSP[S] } else {
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S] sb . append ( permissionToString ( GROUP_ACCESS ) ) ;
fmt . format ( lr_9 , timestamp ) ; MST[rv.ROR1Mutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.CRCR5Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[rv.UOI1Mutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR5Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[InlineConstantMutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR5Mutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR4Mutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR3Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[experimental.NakedReceiverMutator]MSP[S]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ROR3Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR1Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ROR5Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI3Mutator]MSP[N]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ROR1Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR1Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } return permissions [ access ] [ permission ] ; } @Override
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () MST[EmptyObjectReturnValsMutator]MSP[N] { return name ; } public void setSize ( final long size ) { this . size = size ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR3Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () MST[NonVoidMethodCallMutator]MSP[S] { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ROR4Mutator]MSP[N] } else {
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[experimental.MemberVariableMutator]MSP[N] { this . size = size ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ROR1Mutator]MSP[S] } else {
fmt . format ( lr_9 , timestamp ) ; MST[NegateConditionalsMutator]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[ReturnValsMutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[NonVoidMethodCallMutator]MSP[S]
public void setRawListing ( final String rawListing ) MST[experimental.MemberVariableMutator]MSP[N] { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[NegateConditionalsMutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[ReturnValsMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR5Mutator]MSP[N]
sb . append ( '-' ) ; } MST[experimental.NakedReceiverMutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[NonVoidMethodCallMutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ROR1Mutator]MSP[S] { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR5Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR2Mutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR4Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR2Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[InlineConstantMutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[rv.CRCR2Mutator]MSP[N] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR6Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[InlineConstantMutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR3Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
public boolean isSymbolicLink () MST[NegateConditionalsMutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR5Mutator]MSP[N] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[NonVoidMethodCallMutator]MSP[S]
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ROR4Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { MST[ConstructorCallMutator]MSP[S] sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[rv.ROR3Mutator]MSP[N] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
public void setRawListing ( final String rawListing ) MST[experimental.MemberVariableMutator]MSP[N] { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR5Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR6Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[BooleanTrueReturnValsMutator]MSP[S] { return type == FILE_TYPE ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR5Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR5Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.UOI4Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.UOI4Mutator]MSP[N] { return type == FILE_TYPE ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR3Mutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR2Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[experimental.NakedReceiverMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[BooleanTrueReturnValsMutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.ROR1Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.CRCR1Mutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
private char formatType () { MST[rv.CRCR5Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; final Calendar newStamp = Calendar . getInstance ( newZone ) ; MST[NonVoidMethodCallMutator]MSP[S] newStamp . setTime ( original ) ; timestamp = newStamp ; } }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR4Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.ROR5Mutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR6Mutator]MSP[S]
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; } MST[NonVoidMethodCallMutator]MSP[S]
public boolean isSymbolicLink () MST[rv.CRCR5Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { MST[ReturnValsMutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getGroup () { return group ; } public void setUser ( final String user ) { this . user = user ; } public String getUser () MST[EmptyObjectReturnValsMutator]MSP[N] { return user ; } public void setLink ( final String link ) { this . link = link ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[NegateConditionalsMutator]MSP[N] { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[NonVoidMethodCallMutator]MSP[S]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[NegateConditionalsMutator]MSP[S] } else {
public long getSize () MST[rv.UOI2Mutator]MSP[S] { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public boolean isSymbolicLink () MST[rv.ROR1Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[rv.CRCR5Mutator]MSP[N] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( '-' ) ; } MST[rv.CRCR2Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR5Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR4Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR3Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR6Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.UOI2Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.CRCR6Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR5Mutator]MSP[N] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[InlineConstantMutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI4Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[NegateConditionalsMutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR1Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR2Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI3Mutator]MSP[N]
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR2Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[InlineConstantMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR6Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR6Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[PrimitiveReturnsMutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[ReturnValsMutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
private char formatType () { switch( type ) { case FILE_TYPE : MST[experimental.SwitchMutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[rv.UOI1Mutator]MSP[N] { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: MST[rv.CRCR5Mutator]MSP[S] return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[rv.UOI3Mutator]MSP[N] { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[NonVoidMethodCallMutator]MSP[N] } else {
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[NonVoidMethodCallMutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[ReturnValsMutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR1Mutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR2Mutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ; MST[NegateConditionalsMutator]MSP[S]
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.ROR3Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.ROR5Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI2Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR5Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_7 , timestamp ) ; MST[rv.CRCR4Mutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ABSMutator]MSP[S] } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR5Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.UOI4Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR6Mutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[InlineConstantMutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR3Mutator]MSP[S] { return type == FILE_TYPE ; }
public String getLink () MST[EmptyObjectReturnValsMutator]MSP[N] { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value )
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.UOI2Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.ROR4Mutator]MSP[N] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[experimental.NakedReceiverMutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR3Mutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[InlineConstantMutator]MSP[N] } else {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.ROR4Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR1Mutator]MSP[S]
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI2Mutator]MSP[N]
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ROR1Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR3Mutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR5Mutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ROR3Mutator]MSP[S] } else { sb . append ( '-' ) ; } return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR5Mutator]MSP[N] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.UOI1Mutator]MSP[S] { return type == FILE_TYPE ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[BooleanFalseReturnValsMutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR1Mutator]MSP[S]
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[InlineConstantMutator]MSP[N]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR6Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.UOI3Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.CRCR3Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.CRCR6Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
private char formatType () { MST[rv.CRCR6Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
private char formatType () { MST[rv.CRCR2Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI2Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[InlineConstantMutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR3Mutator]MSP[S] } return sb . toString () ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR6Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.UOI2Mutator]MSP[S] } else {
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[rv.UOI3Mutator]MSP[N] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
sb . append ( '-' ) ; } MST[rv.CRCR4Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[rv.CRCR3Mutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; MST[rv.ROR5Mutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR1Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR6Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public int getType () MST[rv.UOI2Mutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[NonVoidMethodCallMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.ABSMutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; MST[VoidMethodCallMutator]MSP[N] }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR2Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI1Mutator]MSP[N]
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[rv.CRCR4Mutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI2Mutator]MSP[N]
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR2Mutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR4Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR1Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[InlineConstantMutator]MSP[S] { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR4Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[experimental.NakedReceiverMutator]MSP[S]
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR1Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.ROR5Mutator]MSP[S] } else {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) { if ( ! isValid () ) { return lr_1 ; MST[NonVoidMethodCallMutator]MSP[S] } final StringBuilder sb = new StringBuilder () ;
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; MST[NonVoidMethodCallMutator]MSP[S] timestamp = newStamp ; } }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[NonVoidMethodCallMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR3Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.CRCR4Mutator]MSP[N] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String getLink () MST[ReturnValsMutator]MSP[N] { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value )
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR4Mutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[rv.CRCR3Mutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ; MST[rv.CRCR6Mutator]MSP[S]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR1Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () MST[InlineConstantMutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override MST[NonVoidMethodCallMutator]MSP[N]
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[experimental.NakedReceiverMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ROR3Mutator]MSP[S] { return type == FILE_TYPE ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.ROR2Mutator]MSP[N] { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR6Mutator]MSP[S] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.CRCR5Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR1Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.ROR2Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR6Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) MST[rv.UOI2Mutator]MSP[N] { this . hardLinkCount = links ; } public int getHardLinkCount () { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[rv.CRCR2Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) { MST[rv.CRCR5Mutator]MSP[N]
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[rv.CRCR6Mutator]MSP[N] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
fmt . format ( lr_7 , timestamp ) ; MST[rv.ROR4Mutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[NegateConditionalsMutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; sb . append ( permissionToString ( GROUP_ACCESS ) ) ; MST[NonVoidMethodCallMutator]MSP[S]
public int getType () MST[rv.UOI1Mutator]MSP[N] { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) { this . size = size ; }
fmt . format ( lr_7 , timestamp ) ; MST[NegateConditionalsMutator]MSP[S] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[EmptyObjectReturnValsMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; MST[rv.UOI1Mutator]MSP[S] } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[NegateConditionalsMutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR1Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[rv.CRCR6Mutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[InlineConstantMutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value ) MST[rv.UOI2Mutator]MSP[N]
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[ReturnValsMutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { MST[NonVoidMethodCallMutator]MSP[S] final Date original = timestamp . getTime () ; final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : MST[rv.CRCR2Mutator]MSP[S] return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR5Mutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public String getLink () { return link ; } public void setTimestamp ( final Calendar date ) MST[experimental.MemberVariableMutator]MSP[N] { this . date = date ; } public Calendar getTimestamp () { return date ; } public void setPermission ( final int access , final int permission , final boolean value )
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; MST[NonVoidMethodCallMutator]MSP[S] fmt . format ( lr_3 , getUser () , getGroup () ) ;
private char formatType () { switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : MST[InlineConstantMutator]MSP[S] return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) { MST[rv.CRCR6Mutator]MSP[S]
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[BooleanTrueReturnValsMutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.CRCR5Mutator]MSP[S] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[NonVoidMethodCallMutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[rv.CRCR4Mutator]MSP[S] } else {
sb . append ( '-' ) ; } MST[InlineConstantMutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String getGroup () { return group ; } public void setUser ( final String user ) { this . user = user ; } public String getUser () MST[ReturnValsMutator]MSP[N] { return user ; } public void setLink ( final String link ) { this . link = link ; }
sb . append ( permissionToString ( WORLD_ACCESS ) ) ; MST[experimental.NakedReceiverMutator]MSP[S] fmt . format ( lr_2 , Integer . valueOf ( getHardLinkCount () ) ) ; fmt . format ( lr_3 , getUser () , getGroup () ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[BooleanTrueReturnValsMutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { MST[rv.CRCR1Mutator]MSP[S] switch( type ) { case FILE_TYPE : return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { MST[rv.CRCR5Mutator]MSP[N] fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
public boolean isSymbolicLink () MST[rv.CRCR1Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
private char formatType () { switch( type ) { case FILE_TYPE : MST[rv.UOI4Mutator]MSP[S] return '-' ; case DIRECTORY_TYPE : return 'd' ; case SYMBOLIC_LINK_TYPE : return 'l' ; default: return '?' ; } } private String permissionToString ( final int access ) { final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_9 , timestamp ) ; } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; MST[rv.CRCR4Mutator]MSP[S] } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.CRCR2Mutator]MSP[N] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) MST[rv.UOI1Mutator]MSP[N] { if ( permissions == null ) { return false ; } return permissions [ access ] [ permission ] ; } @Override
public long getSize () { return size ; } public void setHardLinkCount ( final int links ) { this . hardLinkCount = links ; } public int getHardLinkCount () MST[rv.UOI2Mutator]MSP[S] { return hardLinkCount ; } public void setGroup ( final String group ) { this . group = group ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.ROR5Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
fmt . format ( lr_7 , timestamp ) ; MST[InlineConstantMutator]MSP[N] if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
sb . append ( '-' ) ; } MST[rv.CRCR3Mutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.CRCR6Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () MST[rv.CRCR3Mutator]MSP[S] { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { fmt . format ( lr_6 , timestamp ) ; MST[NegateConditionalsMutator]MSP[S] if ( timestamp . isSet ( Calendar . MINUTE ) ) {
fmt . format ( lr_9 , timestamp ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR4Mutator]MSP[S] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () MST[rv.UOI3Mutator]MSP[S] { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[InlineConstantMutator]MSP[S] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] } else {
{ permissions [ access ] [ permission ] = value ; } public boolean hasPermission ( final int access , final int permission ) { if ( permissions == null ) { return false ; MST[rv.ROR5Mutator]MSP[N] } return permissions [ access ] [ permission ] ; } @Override
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () { return type == DIRECTORY_TYPE ; } public boolean isFile () MST[rv.CRCR2Mutator]MSP[N] { return type == FILE_TYPE ; }
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } MST[rv.CRCR5Mutator]MSP[S] return sb . toString () ; }
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; Calendar timestamp = getTimestamp () ; MST[rv.CRCR6Mutator]MSP[S] if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR5Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
public int getType () { return type ; } public void setName ( final String name ) { this . name = name ; } public String getName () { return name ; } public void setSize ( final long size ) MST[rv.UOI1Mutator]MSP[N] { this . size = size ; }
fmt . format ( lr_9 , timestamp ) ; MST[rv.CRCR4Mutator]MSP[N] } } } fmt . format ( lr_10 , timestamp ) ; } } sb . append ( ' ' ) ; sb . append ( getName () ) ; } return sb . toString () ; }
sb . append ( '-' ) ; } MST[NonVoidMethodCallMutator]MSP[S] if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; } else { sb . append ( '-' ) ; } return sb . toString () ; }
public String toString () { return getRawListing () ; } public String toFormattedString () { return toFormattedString ( null ) ; } public String toFormattedString ( final String timezone ) MST[ReturnValsMutator]MSP[S] { if ( ! isValid () ) { return lr_1 ; } final StringBuilder sb = new StringBuilder () ;
fmt . format ( lr_7 , timestamp ) ; if ( timestamp . isSet ( Calendar . SECOND ) ) { fmt . format ( lr_8 , timestamp ) ; MST[rv.ROR5Mutator]MSP[S] if ( timestamp . isSet ( Calendar . MILLISECOND ) ) {
fmt . format ( lr_4 , Long . valueOf ( getSize () ) ) ; MST[rv.CRCR1Mutator]MSP[S] Calendar timestamp = getTimestamp () ; if ( timestamp != null ) { if ( timezone != null ) { final TimeZone newZone = TimeZone . getTimeZone ( timezone ) ;
sb . append ( '-' ) ; } if ( hasPermission ( access , EXECUTE_PERMISSION ) ) { sb . append ( 'x' ) ; MST[rv.ROR2Mutator]MSP[N] } else { sb . append ( '-' ) ; } return sb . toString () ; }
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { return permissions != null ; } public void setType ( final int type ) MST[experimental.MemberVariableMutator]MSP[N] { this . type = type ; }
public void setRawListing ( final String rawListing ) { this . rawListing = rawListing ; } public String getRawListing () { return rawListing ; } public boolean isDirectory () MST[rv.CRCR6Mutator]MSP[N] { return type == DIRECTORY_TYPE ; } public boolean isFile () { return type == FILE_TYPE ; }
try ( final Formatter fmt = new Formatter ( sb ) ) { sb . append ( formatType () ) ; sb . append ( permissionToString ( USER_ACCESS ) ) ; MST[experimental.NakedReceiverMutator]MSP[S] sb . append ( permissionToString ( GROUP_ACCESS ) ) ;
public boolean isSymbolicLink () { return type == SYMBOLIC_LINK_TYPE ; } public boolean isUnknown () { return type == UNKNOWN_TYPE ; } public boolean isValid () { MST[rv.CRCR3Mutator]MSP[N] return permissions != null ; } public void setType ( final int type ) { this . type = type ; }
if ( ! newZone . equals ( timestamp . getTimeZone () ) ) { final Date original = timestamp . getTime () ; MST[rv.ROR2Mutator]MSP[S] final Calendar newStamp = Calendar . getInstance ( newZone ) ; newStamp . setTime ( original ) ; timestamp = newStamp ; } }
fmt . format ( lr_5 , timestamp ) ; if ( timestamp . isSet ( Calendar . HOUR_OF_DAY ) ) { MST[rv.CRCR4Mutator]MSP[S] fmt . format ( lr_6 , timestamp ) ; if ( timestamp . isSet ( Calendar . MINUTE ) ) {
if ( hasPermission ( access , READ_PERMISSION ) ) { sb . append ( 'r' ) ; } else { sb . append ( '-' ) ; } MST[experimental.NakedReceiverMutator]MSP[S] if ( hasPermission ( access , WRITE_PERMISSION ) ) { sb . append ( 'w' ) ; } else {
