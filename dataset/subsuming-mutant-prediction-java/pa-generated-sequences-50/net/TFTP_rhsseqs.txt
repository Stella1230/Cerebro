public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[InlineConstantMutator]MSP[S] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[ConstructorCallMutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () MST[experimental.MemberVariableMutator]MSP[N] {
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR2Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR6Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR4Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; MST[ReturnValsMutator]MSP[S] _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[rv.ABSMutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR4Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR6Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR2Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR3Mutator]MSP[N]
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR6Mutator]MSP[N]
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[experimental.MemberVariableMutator]MSP[N]
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR2Mutator]MSP[N]
{ receiveBuffer = new byte [ PACKET_SIZE ] ; receiveDatagram = MST[ConstructorCallMutator]MSP[N] new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
receiveBuffer = null ; MST[experimental.MemberVariableMutator]MSP[N] receiveDatagram = null ; sendBuffer = null ; sendDatagram = null ; } public final void send ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . newDatagram () ) ; }
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[experimental.MemberVariableMutator]MSP[N]
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; receiveDatagram . setLength ( receiveBuffer . length ) ; _socket_ . receive ( receiveDatagram ) ; MST[VoidMethodCallMutator]MSP[N] final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR1Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; receiveDatagram . setLength ( receiveBuffer . length ) ; _socket_ . receive ( receiveDatagram ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ; MST[NonVoidMethodCallMutator]MSP[S]
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[rv.UOI4Mutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR1Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR5Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR3Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[InlineConstantMutator]MSP[N]
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[ReturnValsMutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR5Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
public final TFTPPacket receive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; MST[NullReturnValsMutator]MSP[S] _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[InlineConstantMutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; receiveDatagram . setLength ( receiveBuffer . length ) ; _socket_ . receive ( receiveDatagram ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ; MST[ReturnValsMutator]MSP[S]
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; receiveDatagram . setLength ( receiveBuffer . length ) ; MST[VoidMethodCallMutator]MSP[N] _socket_ . receive ( receiveDatagram ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; MST[NonVoidMethodCallMutator]MSP[S] _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps ()
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR2Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[rv.UOI3Mutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[EmptyObjectReturnValsMutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR6Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR4Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; MST[VoidMethodCallMutator]MSP[N] receiveDatagram . setLength ( receiveBuffer . length ) ; _socket_ . receive ( receiveDatagram ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () MST[experimental.MemberVariableMutator]MSP[N] {
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[rv.UOI1Mutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR5Mutator]MSP[N]
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException MST[ArgumentPropagationMutator]MSP[N] { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps ()
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR4Mutator]MSP[N]
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[rv.CRCR1Mutator]MSP[N]
public final TFTPPacket receive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { DatagramPacket packet ; MST[VoidMethodCallMutator]MSP[N] packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () MST[experimental.MemberVariableMutator]MSP[N] {
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR1Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR3Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
public final TFTPPacket bufferedReceive () throws IOException , InterruptedIOException , SocketException , TFTPPacketException { receiveDatagram . setData ( receiveBuffer ) ; receiveDatagram . setLength ( receiveBuffer . length ) ; _socket_ . receive ( receiveDatagram ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( receiveDatagram ) ; MST[NullReturnValsMutator]MSP[S]
public final TFTPPacket receive () throws IOException , InterruptedIOException , MST[rv.CRCR5Mutator]MSP[N] SocketException , TFTPPacketException { DatagramPacket packet ; packet = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ; _socket_ . receive ( packet ) ; final TFTPPacket newTFTPPacket = TFTPPacket . newTFTPPacket ( packet ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[experimental.MemberVariableMutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
public static final String getModeName ( final int mode ) { return TFTPRequestPacket . _modeStrings [ mode ] ; MST[rv.UOI2Mutator]MSP[S] } public final void discardPackets () throws IOException { int to ; DatagramPacket datagram ; datagram = new DatagramPacket ( new byte [ PACKET_SIZE ] , PACKET_SIZE ) ;
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[rv.CRCR3Mutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
{ receiveBuffer = new byte [ PACKET_SIZE ] ; MST[InlineConstantMutator]MSP[N] receiveDatagram = new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
{ receiveBuffer = new byte [ PACKET_SIZE ] ; receiveDatagram = MST[experimental.MemberVariableMutator]MSP[N] new DatagramPacket ( receiveBuffer , receiveBuffer . length ) ; sendBuffer = new byte [ PACKET_SIZE ] ; sendDatagram = new DatagramPacket ( sendBuffer , sendBuffer . length ) ; } public final void endBufferedOps () {
trace ( lr_1 , newTFTPPacket ) ; return newTFTPPacket ; } public final void bufferedSend ( final TFTPPacket packet ) throws IOException { trace ( lr_2 , packet ) ; _socket_ . send ( packet . _newDatagram ( sendDatagram , sendBuffer ) ) ; } public final void beginBufferedOps () MST[ConstructorCallMutator]MSP[N]
