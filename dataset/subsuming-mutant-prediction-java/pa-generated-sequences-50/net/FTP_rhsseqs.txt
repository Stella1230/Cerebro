_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[experimental.MemberVariableMutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
return sendCommand ( FTPCmd . RMD , pathname ) ; } public int mkd ( final String pathname ) throws IOException { return sendCommand ( FTPCmd . MKD , pathname ) ; } public int pwd () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . PWD ) ; }
} __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; return __commandBuffer . toString () ; } private void __send ( final String message ) throws IOException , MST[VoidMethodCallMutator]MSP[N] FTPConnectionClosedException , SocketException { try{ _controlOutput_ . write ( message ) ; _controlOutput_ . flush () ; }
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.CRCR5Mutator]MSP[N] }
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[rv.ABSMutator]MSP[N] {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
try { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } catch ( final SocketTimeoutException e ) { final IOException ioe = new IOException ( lr_8 ) ; MST[experimental.MemberVariableMutator]MSP[S] ioe . initCause ( e ) ; throw ioe ; } finally {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[InlineConstantMutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ROR4Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
public int stru ( final int structure ) throws IOException MST[rv.UOI4Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return _replyCode ; } public String [] getReplyStrings () MST[rv.ROR5Mutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
} __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; return __commandBuffer . toString () ; } private void __send ( final String message ) throws IOException , MST[NonVoidMethodCallMutator]MSP[N] FTPConnectionClosedException , SocketException { try{ _controlOutput_ . write ( message ) ; _controlOutput_ . flush () ; }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI4Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[rv.UOI2Mutator]MSP[N] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[rv.UOI3Mutator]MSP[S] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR6Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
throw new MalformedServerReplyException ( lr_4 + line + lr_5 ) ; } if ( reportReply ) { fireReplyReceived ( _replyCode , getReplyString () ) ; } if ( _replyCode == FTPReply . SERVICE_NOT_AVAILABLE ) { MST[VoidMethodCallMutator]MSP[N] throw new FTPConnectionClosedException ( lr_7 ) ; } } @Override
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[ArgumentPropagationMutator]MSP[S] {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[ConstructorCallMutator]MSP[S] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _replyCode ; } public String [] getReplyStrings () MST[NegateConditionalsMutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
private boolean __strictCheck ( final String line , final String code ) { MST[InlineConstantMutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI2Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI4Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.UOI1Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; MST[NegateConditionalsMutator]MSP[N] _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException {
} __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; return __commandBuffer . toString () ; } private void __send ( final String message ) throws IOException , MST[NonVoidMethodCallMutator]MSP[N] FTPConnectionClosedException , SocketException { try{ _controlOutput_ . write ( message ) ; _controlOutput_ . flush () ; }
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { _controlEncoding = encoding ; } public String getControlEncoding () { MST[experimental.MemberVariableMutator]MSP[N]
public int stru ( final int structure ) throws IOException MST[rv.AOR1Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.CRCR2Mutator]MSP[N] }
public int stru ( final int structure ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; MST[rv.ROR5Mutator]MSP[N] _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException {
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { MST[EmptyObjectReturnValsMutator]MSP[S] __getReply () ; } } } public void setControlEncoding ( final String encoding ) { _controlEncoding = encoding ; } public String getControlEncoding () {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOD1Mutator]MSP[N] }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI3Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
public int stru ( final int structure ) throws IOException MST[rv.AOR4Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[rv.ABSMutator]MSP[N] {
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[experimental.MemberVariableMutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOR4Mutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.ABSMutator]MSP[N] }
public int stru ( final int structure ) throws IOException MST[experimental.NakedReceiverMutator]MSP[S] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.UOI3Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
public int allo ( final long bytes ) throws IOException { return sendCommand ( FTPCmd . ALLO , Long . toString ( bytes ) ) ; } public int feat () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . FEAT ) ; }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI4Mutator]MSP[N] }
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[VoidMethodCallMutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOD1Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[InlineConstantMutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
} __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; return __commandBuffer . toString () ; } private void __send ( final String message ) throws IOException , MST[ArgumentPropagationMutator]MSP[N] FTPConnectionClosedException , SocketException { try{ _controlOutput_ . write ( message ) ; _controlOutput_ . flush () ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR2Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
if ( _controlOutput_ == null ) { throw new IOException ( lr_9 ) ; } final String message = __buildMessage ( command , args ) ; MST[VoidMethodCallMutator]MSP[N] __send ( message ) ; fireCommandSent ( command , message ) ; __getReply () ; return _replyCode ; }
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR2Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[experimental.NakedReceiverMutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
throw new MalformedServerReplyException ( lr_4 + line + lr_5 ) ; } if ( reportReply ) { MST[VoidMethodCallMutator]MSP[S] fireReplyReceived ( _replyCode , getReplyString () ) ; } if ( _replyCode == FTPReply . SERVICE_NOT_AVAILABLE ) { throw new FTPConnectionClosedException ( lr_7 ) ; } } @Override
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.ABSMutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException {
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { MST[ReturnValsMutator]MSP[S] __getReply () ; } } } public void setControlEncoding ( final String encoding ) { _controlEncoding = encoding ; } public String getControlEncoding () {
return _replyCode ; } public String [] getReplyStrings () { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () MST[NonVoidMethodCallMutator]MSP[S] { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
public int stru ( final int structure ) throws IOException MST[rv.AOD2Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[InlineConstantMutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI2Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
info . append ( h ) ; info . append ( lr_11 ) ; info . append ( port ) ; info . append ( lr_11 ) ; return sendCommand ( FTPCmd . EPRT , info . toString () ) ; } public int pasv () throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[rv.CRCR6Mutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.CRCR3Mutator]MSP[N] }
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { MST[NonVoidMethodCallMutator]MSP[S] return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.UOI4Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR4Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI4Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOR4Mutator]MSP[N] }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOR3Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
if ( _controlOutput_ == null ) { throw new IOException ( lr_9 ) ; } final String message = __buildMessage ( command , args ) ; __send ( message ) ; MST[VoidMethodCallMutator]MSP[N] fireCommandSent ( command , message ) ; __getReply () ; return _replyCode ; }
info . append ( h ) ; info . append ( lr_11 ) ; MST[NonVoidMethodCallMutator]MSP[S] info . append ( port ) ; info . append ( lr_11 ) ; return sendCommand ( FTPCmd . EPRT , info . toString () ) ; } public int pasv () throws IOException {
public int stru ( final int structure ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOD2Mutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
public int stru ( final int structure ) throws IOException { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . MODE ,
public int stru ( final int structure ) throws IOException MST[rv.ABSMutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.UOI4Mutator]MSP[N] { int num ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI3Mutator]MSP[N] }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR1Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR1Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[rv.ABSMutator]MSP[S] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
public int stru ( final int structure ) throws IOException MST[rv.UOI1Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.UOI1Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[rv.UOI2Mutator]MSP[N] {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
public int stru ( final int structure ) throws IOException MST[rv.UOI3Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[MathMutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
public int list () throws IOException { return sendCommand ( FTPCmd . LIST ) ; } public int list ( final String pathname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . LIST , pathname ) ; } public int mlsd () throws IOException {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.AOR2Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return _replyCode ; } public String [] getReplyStrings () MST[rv.ROR2Mutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
return _replyCode ; } public String [] getReplyStrings () MST[rv.ROR4Mutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException { int length ; MST[NonVoidMethodCallMutator]MSP[S] _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[rv.UOI3Mutator]MSP[N] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI1Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI1Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
public int stru ( final int structure ) throws IOException MST[MathMutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR3Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[rv.CRCR1Mutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
return sendCommand ( FTPCmd . MLSD ) ; } public int mlsd ( final String path ) throws IOException { return sendCommand ( FTPCmd . MLSD , path ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int mlst () throws IOException { return sendCommand ( FTPCmd . MLST ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI2Mutator]MSP[N] }
return sendCommand ( FTPCmd . STOR , pathname ) ; } public int stou () throws IOException { return sendCommand ( FTPCmd . STOU ) ; } public int stou ( final String pathname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . STOU , pathname ) ; }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[MathMutator]MSP[N] }
return _replyCode ; } public String [] getReplyStrings () MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOR2Mutator]MSP[N] }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[InlineConstantMutator]MSP[N] }
public int stru ( final int structure ) throws IOException MST[rv.UOI2Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
int num ; MST[NonVoidMethodCallMutator]MSP[S] final StringBuilder info = new StringBuilder () ; String h ; h = host . getHostAddress () ; num = h . indexOf ( '%' ) ; if ( num > 0 ) { h = h . substring ( 0 , num ) ; }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOR1Mutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . STOR , pathname ) ; } public int stou () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . STOU ) ; } public int stou ( final String pathname ) throws IOException { return sendCommand ( FTPCmd . STOU , pathname ) ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ROR1Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[rv.UOI1Mutator]MSP[N] {
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[InlineConstantMutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.UOI4Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI4Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
public int list () throws IOException { return sendCommand ( FTPCmd . LIST ) ; } public int list ( final String pathname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . LIST , pathname ) ; } public int mlsd () throws IOException {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.UOI2Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI1Mutator]MSP[N] }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { MST[NonVoidMethodCallMutator]MSP[S] return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException {
return _replyCode ; } public String [] getReplyStrings () MST[ReturnValsMutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
return _replyCode ; } public String [] getReplyStrings () MST[rv.ROR1Mutator]MSP[N] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.ABSMutator]MSP[N] { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[EmptyObjectReturnValsMutator]MSP[N] {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[rv.UOI4Mutator]MSP[S] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR6Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.UOI3Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR6Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { MST[NonVoidMethodCallMutator]MSP[N] return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.AOR2Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[VoidMethodCallMutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[NegateConditionalsMutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[rv.UOI4Mutator]MSP[N] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
public int stru ( final int structure ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { int num ;
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[rv.UOI1Mutator]MSP[N] {
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR1Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.UOI2Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ROR3Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI4Mutator]MSP[N] }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.ABSMutator]MSP[N] }
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
__send ( msg ) ; __getReplyNoReport () ; } @Deprecated public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( FTPCommand . getCommand ( command ) , args ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int sendCommand ( final FTPCmd command ) throws IOException {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR5Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] {
modes . substring ( mode , mode + 1 ) ) ; } public int retr ( final String pathname ) throws IOException { return sendCommand ( FTPCmd . RETR , pathname ) ; } public int stor ( final String pathname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[experimental.MemberVariableMutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[rv.UOI2Mutator]MSP[S] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
public int stru ( final int structure ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI1Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI3Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.ABSMutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _replyCode ; } public String [] getReplyStrings () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[ConstructorCallMutator]MSP[S] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI3Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.CRCR6Mutator]MSP[N] }
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[rv.CRCR3Mutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] {
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; MST[ConstructorCallMutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException {
public int stru ( final int structure ) throws IOException MST[rv.ABSMutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
public int stru ( final int structure ) throws IOException MST[rv.UOI2Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[rv.UOI3Mutator]MSP[N] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ABSMutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOD2Mutator]MSP[N] }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.ABSMutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
protected void __getReplyNoReport () throws IOException { __getReply ( false ) ; } private void __getReply ( final boolean reportReply ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { int length ; _newReplyString = true ; _replyLines . clear () ; String line = _controlInput_ . readLine () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.UOI3Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI2Mutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { int num ;
public int stru ( final int structure ) throws IOException MST[rv.AOR3Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . MLSD ) ; } public int mlsd ( final String path ) throws IOException { return sendCommand ( FTPCmd . MLSD , path ) ; } public int mlst () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . MLST ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR4Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[ArgumentPropagationMutator]MSP[N] {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI3Mutator]MSP[S] }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.AOD1Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return _replyCode ; } public String [] getReplyStrings () MST[EmptyObjectReturnValsMutator]MSP[S] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
public int stru ( final int structure ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR3Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOR3Mutator]MSP[N] }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ROR2Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ROR5Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI2Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
info . append ( ',' ) ; num = port & 0xff ; info . append ( num ) ; return sendCommand ( FTPCmd . PORT , info . toString () ) ; } public int eprt ( final InetAddress host , final int port ) throws IOException MST[rv.UOI4Mutator]MSP[N] {
private boolean __strictCheck ( final String line , final String code ) { MST[VoidMethodCallMutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[rv.UOI1Mutator]MSP[S] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . MLSD ) ; } public int mlsd ( final String path ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . MLSD , path ) ; } public int mlst () throws IOException { return sendCommand ( FTPCmd . MLST ) ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.UOI1Mutator]MSP[N] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
int num ; MST[NonVoidMethodCallMutator]MSP[N] final StringBuilder info = new StringBuilder () ; String h ; h = host . getHostAddress () ; num = h . indexOf ( '%' ) ; if ( num > 0 ) { h = h . substring ( 0 , num ) ; }
modes . substring ( mode , mode + 1 ) ) ; } public int retr ( final String pathname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( FTPCmd . RETR , pathname ) ; } public int stor ( final String pathname ) throws IOException {
return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () MST[VoidMethodCallMutator]MSP[S] { return _replyCode ; } public int getReply () throws IOException { __getReply () ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.UOI3Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
public int stru ( final int structure ) throws IOException MST[rv.UOI1Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.AOR1Mutator]MSP[N] }
private boolean __strictCheck ( final String line , final String code ) { MST[rv.CRCR5Mutator]MSP[N] return ! ( line . startsWith ( code ) && line . charAt ( REPLY_CODE_LEN ) == ' ' ) ; } private boolean __lenientCheck ( final String line ) {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[MathMutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { MST[rv.CRCR5Mutator]MSP[N] _controlEncoding = encoding ; } public String getControlEncoding () {
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.CRCR4Mutator]MSP[N] }
_socket_ . setSoTimeout ( original ) ; } } else { __getReply () ; if ( FTPReply . isPositivePreliminary ( _replyCode ) ) { __getReply () ; } } } public void setControlEncoding ( final String encoding ) { _controlEncoding = encoding ; MST[experimental.MemberVariableMutator]MSP[N] } public String getControlEncoding () {
return sendCommand ( FTPCmd . TYPE , arg . toString () ) ; } public int type ( final int fileType ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( FTPCmd . TYPE , modes . substring ( fileType , fileType + 1 ) ) ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.ABSMutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI1Mutator]MSP[N] }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; MST[experimental.NakedReceiverMutator]MSP[N] } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[NonVoidMethodCallMutator]MSP[N] { int num ;
public int stru ( final int structure ) throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( FTPCmd . STRU , modes . substring ( structure , structure + 1 ) ) ; } public int mode ( final int mode ) throws IOException { return sendCommand ( FTPCmd . MODE ,
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; MST[rv.CRCR2Mutator]MSP[N] } public int port ( final InetAddress host , final int port ) throws IOException { int num ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { int num ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[experimental.NakedReceiverMutator]MSP[N] { final StringBuilder arg = new StringBuilder () ;
arg . append ( modes . charAt ( fileType ) ) ; arg . append ( ' ' ) ; if ( fileType == LOCAL_FILE_TYPE ) { arg . append ( formatOrByteSize ) ; } else { arg . append ( modes . charAt ( formatOrByteSize ) ) ; MST[rv.UOI2Mutator]MSP[N] }
return sendCommand ( command , null ) ; } public int sendCommand ( final FTPCmd command , final String args ) throws IOException { return sendCommand ( command . getCommand () , args ) ; } public int sendCommand ( final String command ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return _controlEncoding ; } @Override public void disconnect () throws IOException { super . disconnect () ; _controlInput_ = null ; _controlOutput_ = null ; _newReplyString = false ; _replyString = null ; } public int sendCommand ( final String command , final String args ) throws IOException MST[ReturnValsMutator]MSP[S] {
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { int num ;
return _replyCode ; } public String [] getReplyStrings () MST[rv.ROR3Mutator]MSP[N] { return _replyLines . toArray ( new String [ _replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! _newReplyString ) { return _replyString ; }
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException MST[rv.CRCR5Mutator]MSP[S] { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . PASV ) ; } public int epsv () throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( FTPCmd . EPSV ) ; } public int type ( final int fileType , final int formatOrByteSize ) throws IOException { final StringBuilder arg = new StringBuilder () ;
return sendCommand ( FTPCmd . REIN ) ; } public int smnt ( final String dir ) throws IOException { return sendCommand ( FTPCmd . SMNT , dir ) ; } public int port ( final InetAddress host , final int port ) throws IOException MST[InlineConstantMutator]MSP[N] { int num ;
