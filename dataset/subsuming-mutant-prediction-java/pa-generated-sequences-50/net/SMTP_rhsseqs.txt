{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI3Mutator]MSP[S] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
public int noop () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[rv.CRCR4Mutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[rv.CRCR4Mutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; MST[NonVoidMethodCallMutator]MSP[N] if ( args != null ) { if ( includeSpace ) {
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR1Mutator]MSP[N] {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . HELP , command ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR5Mutator]MSP[N] {
public int rset () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[NegateConditionalsMutator]MSP[N] { if ( includeSpace ) {
public int noop () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; MST[VoidMethodCallMutator]MSP[N] writer . flush () ;
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI4Mutator]MSP[N] }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] {
public int noop () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
private void __getReply () throws IOException { int length ; newReplyString = true ; replyLines . clear () ; String line = reader . readLine () ; MST[NonVoidMethodCallMutator]MSP[N] if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
fireCommandSent ( command , message ) ; __getReply () ; MST[VoidMethodCallMutator]MSP[S] return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; }
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; MST[experimental.NakedReceiverMutator]MSP[N] if ( args != null ) { if ( includeSpace ) {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[ReturnValsMutator]MSP[S] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( command , null ) ; MST[rv.ABSMutator]MSP[S] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
public int rset () throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
public int noop () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
replyLines . clear () ; newReplyString = false ; MST[rv.CRCR3Mutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[ArgumentPropagationMutator]MSP[S] {
encoding ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( _output_ , encoding ) ) ; __getReply () ; } @Override public void disconnect () throws IOException { super . disconnect () ; reader = null ; MST[experimental.MemberVariableMutator]MSP[N] writer = null ; replyString = null ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ROR1Mutator]MSP[N]
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.UOI4Mutator]MSP[N]
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.UOI1Mutator]MSP[N]
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[rv.CRCR3Mutator]MSP[S] {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; MST[NonVoidMethodCallMutator]MSP[S] writer . flush () ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] {
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[InlineConstantMutator]MSP[N] {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[rv.ROR2Mutator]MSP[S] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[rv.ROR5Mutator]MSP[N] { if ( includeSpace ) {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( SMTPCommand . HELP , command ) ; }
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR2Mutator]MSP[N] {
__commandBuffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR2Mutator]MSP[N] {
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI4Mutator]MSP[S] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI2Mutator]MSP[N] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[rv.CRCR3Mutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[NegateConditionalsMutator]MSP[N]
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[rv.ABSMutator]MSP[N] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
public int rset () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[ArgumentPropagationMutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[InlineConstantMutator]MSP[N] {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; MST[NonVoidMethodCallMutator]MSP[N] } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int sendCommand ( final int command ) throws IOException {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; MST[EmptyObjectReturnValsMutator]MSP[S] } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP , command ) ; }
} public int soml ( final String reversePath ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR4Mutator]MSP[S] {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[NegateConditionalsMutator]MSP[S] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int rset () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[NonVoidMethodCallMutator]MSP[S] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
return sendCommand ( command , null ) ; MST[rv.UOI1Mutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI3Mutator]MSP[N] }
replyLines . clear () ; newReplyString = false ; MST[InlineConstantMutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI4Mutator]MSP[N] }
replyLines . clear () ; newReplyString = false ; MST[experimental.MemberVariableMutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.UOI3Mutator]MSP[N]
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; MST[VoidMethodCallMutator]MSP[S] return replyCode ; } public String [] getReplyStrings () {
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[rv.CRCR1Mutator]MSP[N] {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[NonVoidMethodCallMutator]MSP[N] }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.ABSMutator]MSP[N] }
return sendCommand ( command , null ) ; MST[rv.UOI2Mutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI3Mutator]MSP[N] }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] {
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( includeSpace ) {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[rv.ROR3Mutator]MSP[N] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ROR5Mutator]MSP[N]
private void __getReply () throws IOException { int length ; newReplyString = true ; replyLines . clear () ; MST[VoidMethodCallMutator]MSP[N] String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI1Mutator]MSP[N] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
public int noop () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( command , null ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[rv.CRCR2Mutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.ABSMutator]MSP[S] }
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[rv.CRCR6Mutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[rv.CRCR2Mutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; MST[ConstructorCallMutator]MSP[N] __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) {
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[rv.CRCR6Mutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP , command ) ; }
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP , command ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR3Mutator]MSP[S] {
public int rset () throws IOException MST[rv.CRCR3Mutator]MSP[S] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR3Mutator]MSP[S] {
public int noop () throws IOException MST[rv.CRCR4Mutator]MSP[S] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI2Mutator]MSP[N] }
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI1Mutator]MSP[N] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; MST[NonVoidMethodCallMutator]MSP[N] } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] { if ( includeSpace ) {
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI3Mutator]MSP[S] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[rv.ROR4Mutator]MSP[S] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[InlineConstantMutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
encoding ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( _output_ , encoding ) ) ; __getReply () ; } @Override public void disconnect () throws IOException { super . disconnect () ; reader = null ; writer = null ; MST[experimental.MemberVariableMutator]MSP[N] replyString = null ;
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
} public int soml ( final String reversePath ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.UOI2Mutator]MSP[N]
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[rv.CRCR6Mutator]MSP[S] {
} public int soml ( final String reversePath ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[NonVoidMethodCallMutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . HELP , command ) ; }
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ROR3Mutator]MSP[N]
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ROR4Mutator]MSP[N]
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; MST[experimental.NakedReceiverMutator]MSP[N] } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ABSMutator]MSP[N]
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[rv.CRCR5Mutator]MSP[N] {
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI2Mutator]MSP[N] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] {
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[experimental.MemberVariableMutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR3Mutator]MSP[N] {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI1Mutator]MSP[N] }
return replyLines . toArray ( new String [ replyLines . size () ] ) ; MST[NonVoidMethodCallMutator]MSP[N] } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( command , null ) ; MST[ArgumentPropagationMutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int rset () throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR4Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
replyLines . clear () ; MST[VoidMethodCallMutator]MSP[N] newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[InlineConstantMutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[NonVoidMethodCallMutator]MSP[S] }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
{ return sendCommand ( SMTPCommand . getCommand ( command ) , args ) ; MST[NonVoidMethodCallMutator]MSP[N] } public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException {
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . HELP , command ) ; }
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
replyLines . clear () ; newReplyString = false ; MST[rv.CRCR5Mutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
return sendCommand ( command , null ) ; MST[rv.UOI3Mutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ; MST[VoidMethodCallMutator]MSP[N]
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI2Mutator]MSP[N] }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[rv.CRCR3Mutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
public int noop () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; MST[NonVoidMethodCallMutator]MSP[N] final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException { return sendCommand ( SMTPCommand . HELP , command ) ; }
private void __getReply () throws IOException { int length ; newReplyString = true ; MST[rv.CRCR5Mutator]MSP[N] replyLines . clear () ; String line = reader . readLine () ; if ( line == null ) { throw new SMTPConnectionClosedException ( lr_1 ) ; } length = line . length () ;
encoding ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( _output_ , encoding ) ) ; __getReply () ; } @Override public void disconnect () throws IOException { super . disconnect () ; reader = null ; writer = null ; replyString = null ; MST[experimental.MemberVariableMutator]MSP[N]
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
} public int soml ( final String reversePath ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int noop () throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[InlineConstantMutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; MST[ReturnValsMutator]MSP[S] } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[ArgumentPropagationMutator]MSP[S] {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
__commandBuffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR2Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[InlineConstantMutator]MSP[N] {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[rv.ROR1Mutator]MSP[N] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
buffer . append ( line ) ; buffer . append ( SocketClient . NETASCII_EOL ) ; } newReplyString = false ; replyString = buffer . toString () ; return replyString ; } public int helo ( final String hostname ) throws IOException MST[InlineConstantMutator]MSP[N] {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; MST[NullReturnValsMutator]MSP[N] } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int rset () throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[ArgumentPropagationMutator]MSP[S] {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { MST[rv.ROR5Mutator]MSP[S] return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
public void removeProtocolCommandistener ( final org . apache . commons . net . ProtocolCommandListener listener ) { MST[VoidMethodCallMutator]MSP[N] removeProtocolCommandListener ( listener ) ; } @Override protected ProtocolCommandSupport getCommandSupport () { return _commandSupport_ ; }
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . HELP , command ) ; }
__commandBuffer . append ( ' ' ) ; } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; MST[experimental.NakedReceiverMutator]MSP[N] final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[PrimitiveReturnsMutator]MSP[N] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
fireCommandSent ( command , message ) ; MST[VoidMethodCallMutator]MSP[N] __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; }
public int noop () throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException MST[rv.CRCR4Mutator]MSP[N] {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } private int __sendCommand ( final int command , final String args , final boolean includeSpace ) throws IOException { return __sendCommand ( SMTPCommand . getCommand ( command ) , args , includeSpace ) ; MST[rv.UOI1Mutator]MSP[N] }
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[InlineConstantMutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
__commandBuffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
private int __sendCommand ( final String command , final String args , final boolean includeSpace ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) { if ( includeSpace ) { MST[rv.ROR2Mutator]MSP[N]
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[InlineConstantMutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
return sendCommand ( command , null ) ; MST[rv.UOI4Mutator]MSP[N] } public int getReplyCode () { return replyCode ; } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; MST[ReturnValsMutator]MSP[N] } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR6Mutator]MSP[N] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
__commandBuffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[N] } __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; final String message = __commandBuffer . toString () ; writer . write ( message ) ; writer . flush () ;
replyLines . clear () ; newReplyString = false ; MST[rv.CRCR6Mutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
encoding ) ) ; writer = new BufferedWriter ( new OutputStreamWriter ( _output_ , encoding ) ) ; __getReply () ; } @Override public void disconnect () throws IOException { super . disconnect () ; MST[VoidMethodCallMutator]MSP[N] reader = null ; writer = null ; replyString = null ;
public int noop () throws IOException { return sendCommand ( SMTPCommand . NOOP ) ; } public int turn () throws IOException { return sendCommand ( SMTPCommand . TURN ) ; } public int quit () throws IOException MST[rv.CRCR2Mutator]MSP[N] { return sendCommand ( SMTPCommand . QUIT ) ; }
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI4Mutator]MSP[S] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
} public int soml ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SOML , reversePath ) ; } public int saml ( final String reversePath ) throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . SAML , reversePath ) ; }
public int rset () throws IOException MST[rv.CRCR5Mutator]MSP[N] { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return replyLines . toArray ( new String [ replyLines . size () ] ) ; MST[ArgumentPropagationMutator]MSP[N] } public String getReplyString () { StringBuilder buffer ; if ( ! newReplyString ) { return replyString ; } buffer = new StringBuilder () ; for ( final String line : replyLines ) {
return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.ABSMutator]MSP[N] } public int getReply () throws IOException { __getReply () ; return replyCode ; } public String [] getReplyStrings () {
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[rv.CRCR3Mutator]MSP[N] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
return __sendCommand ( SMTPCommand . RCPT , forwardPath , false ) ; } public int data () throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return sendCommand ( SMTPCommand . DATA ) ; } public int send ( final String reversePath ) throws IOException { return sendCommand ( SMTPCommand . SEND , reversePath ) ;
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException MST[rv.CRCR6Mutator]MSP[N] {
replyLines . clear () ; newReplyString = false ; } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; MST[rv.CRCR5Mutator]MSP[N] } public int sendCommand ( final int command , final String args ) throws IOException
fireReplyReceived ( replyCode , getReplyString () ) ; if ( replyCode == SMTPReply . SERVICE_NOT_AVAILABLE ) { throw new SMTPConnectionClosedException ( lr_4 ) ; } } @Override protected void _connectAction_ () throws IOException { super . _connectAction_ () ; MST[VoidMethodCallMutator]MSP[S] reader = new CRLFLineReader ( new InputStreamReader ( _input_ ,
replyLines . clear () ; newReplyString = false ; MST[rv.CRCR1Mutator]MSP[N] } public int sendCommand ( final String command , final String args ) throws IOException { return __sendCommand ( command , args , true ) ; } public int sendCommand ( final int command , final String args ) throws IOException
return sendCommand ( SMTPCommand . EXPN , name ) ; } public int help () throws IOException { return sendCommand ( SMTPCommand . HELP ) ; } public int help ( final String command ) throws IOException MST[ArgumentPropagationMutator]MSP[S] { return sendCommand ( SMTPCommand . HELP , command ) ; }
public int rset () throws IOException { return sendCommand ( SMTPCommand . RSET ) ; } public int vrfy ( final String user ) throws IOException MST[rv.CRCR1Mutator]MSP[N] { return sendCommand ( SMTPCommand . VRFY , user ) ; } public int expn ( final String name ) throws IOException {
return sendCommand ( SMTPCommand . HELO , hostname ) ; } public int mail ( final String reversePath ) throws IOException MST[NonVoidMethodCallMutator]MSP[S] { return __sendCommand ( SMTPCommand . MAIL , reversePath , false ) ; } public int rcpt ( final String forwardPath ) throws IOException {
