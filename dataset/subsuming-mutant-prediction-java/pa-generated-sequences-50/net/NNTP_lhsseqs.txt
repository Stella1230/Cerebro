command . append ( lr_9 ) ; MST[NonVoidMethodCallMutator]MSP[] command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; MST[experimental.NakedReceiverMutator]MSP[] String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[rv.CRCR5Mutator]MSP[] }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR3Mutator]MSP[] } public int post () throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR5Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR1Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; MST[ConstructorCallMutator]MSP[] __commandBuffer . append ( command ) ; if ( args != null )
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[InlineConstantMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[] buffer . append ( lr_5 ) ;
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR3Mutator]MSP[] } public int list () throws IOException {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.CRCR4Mutator]MSP[] }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.ABSMutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
buffer . append ( lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[rv.UOI1Mutator]MSP[] } public int getReplyCode () { return replyCode ; }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.UOI1Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[ConstructorCallMutator]MSP[]
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; MST[NonVoidMethodCallMutator]MSP[] String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[ArgumentPropagationMutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR2Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR6Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR3Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR2Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[ArgumentPropagationMutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.UOI1Mutator]MSP[] } public int stat () throws IOException {
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR1Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
command . append ( wildmat ) ; MST[NonVoidMethodCallMutator]MSP[] return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[NonVoidMethodCallMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR4Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR5Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR1Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[rv.UOI4Mutator]MSP[] } @Deprecated
fireCommandSent ( command , message ) ; MST[VoidMethodCallMutator]MSP[] __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR4Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR3Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[rv.ABSMutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
command . append ( lr_9 ) ; MST[experimental.NakedReceiverMutator]MSP[] command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[rv.UOI1Mutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.CRCR6Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[ArgumentPropagationMutator]MSP[] }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR4Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR4Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR5Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[ConstructorCallMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI3Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR3Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR5Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.UOI4Mutator]MSP[] }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR1Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
new BufferedWriter ( new OutputStreamWriter ( _output_ , DEFAULT_ENCODING ) ) ; __getReply () ; _isAllowedToPost = replyCode == NNTPReply . SERVER_READY_POSTING_ALLOWED ; } @Override public void disconnect () throws IOException { super . disconnect () ; _reader_ = null ; MST[experimental.MemberVariableMutator]MSP[] _writer_ = null ; replyString = null ;
{ __commandBuffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR2Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR1Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.ABSMutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[NonVoidMethodCallMutator]MSP[] }
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( ' ' ) ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR6Mutator]MSP[] }
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[rv.CRCR3Mutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[InlineConstantMutator]MSP[] } public int list () throws IOException {
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[rv.ABSMutator]MSP[] }
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR1Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
_isAllowedToPost = false ; MST[rv.CRCR6Mutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[rv.CRCR3Mutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI2Mutator]MSP[] }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[rv.CRCR6Mutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[rv.UOI2Mutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR5Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
_isAllowedToPost = false ; MST[experimental.MemberVariableMutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[ArgumentPropagationMutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR3Mutator]MSP[] }
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; } @Deprecated public int head ( final int a ) throws IOException MST[NullReturnValsMutator]MSP[] { return head ( ( long ) a ) ; } @Deprecated
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.CRCR1Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[ArgumentPropagationMutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
} if ( distributions != null ) MST[NegateConditionalsMutator]MSP[] { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[InlineConstantMutator]MSP[] } public int post () throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR5Mutator]MSP[] }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI1Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR6Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR2Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[NonVoidMethodCallMutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR3Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( ' ' ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI4Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[InlineConstantMutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[]
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[NonVoidMethodCallMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[]
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[ArgumentPropagationMutator]MSP[] }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[NonVoidMethodCallMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[NonVoidMethodCallMutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR2Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.ROR1Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR2Mutator]MSP[] } public int stat () throws IOException {
_isAllowedToPost = false ; MST[rv.CRCR1Mutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR5Mutator]MSP[] } public int stat () throws IOException {
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[rv.UOI1Mutator]MSP[] } @Deprecated
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ABSMutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR5Mutator]MSP[] }
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[ArgumentPropagationMutator]MSP[] } public int getReplyCode () { return replyCode ; }
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[InlineConstantMutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR1Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR5Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
{ __commandBuffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; MST[NonVoidMethodCallMutator]MSP[] if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR6Mutator]MSP[] } public int post () throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . LIST ) ; MST[InlineConstantMutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
_isAllowedToPost = false ; MST[InlineConstantMutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[] buffer . append ( lr_5 ) ;
public int getReply () throws IOException { __getReply () ; MST[VoidMethodCallMutator]MSP[] return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR2Mutator]MSP[] } public int post () throws IOException {
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[NonVoidMethodCallMutator]MSP[] }
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; MST[VoidMethodCallMutator]MSP[] _writer_ . flush () ;
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR2Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[NonVoidMethodCallMutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI1Mutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[] buffer . append ( lr_5 ) ;
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[NonVoidMethodCallMutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR4Mutator]MSP[] } public int list () throws IOException {
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[rv.UOI2Mutator]MSP[] } public int getReplyCode () { return replyCode ; }
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[InlineConstantMutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.ROR5Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR5Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[experimental.NakedReceiverMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR2Mutator]MSP[] }
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[ArgumentPropagationMutator]MSP[] }
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.CRCR5Mutator]MSP[] }
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[]
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR6Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR4Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR5Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR6Mutator]MSP[] }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) MST[rv.ROR5Mutator]MSP[] {
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR1Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR4Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
new BufferedWriter ( new OutputStreamWriter ( _output_ , DEFAULT_ENCODING ) ) ; __getReply () ; _isAllowedToPost = replyCode == NNTPReply . SERVER_READY_POSTING_ALLOWED ; } @Override public void disconnect () throws IOException { super . disconnect () ; _reader_ = null ; _writer_ = null ; MST[experimental.MemberVariableMutator]MSP[] replyString = null ;
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR6Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[InlineConstantMutator]MSP[] }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[InlineConstantMutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[ArgumentPropagationMutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR6Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ABSMutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR4Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[rv.CRCR1Mutator]MSP[] }
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[InlineConstantMutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[NonVoidMethodCallMutator]MSP[] } public int list () throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[]
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR5Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI2Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.UOI2Mutator]MSP[] } public int stat () throws IOException {
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR2Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[NonVoidMethodCallMutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[]
return sendCommand ( NNTPCommand . STAT ) ; MST[InlineConstantMutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR3Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[InlineConstantMutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[NonVoidMethodCallMutator]MSP[]
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.UOI1Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[NegateConditionalsMutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
{ __commandBuffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
fireCommandSent ( command , message ) ; __getReply () ; MST[VoidMethodCallMutator]MSP[] return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; }
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR4Mutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.UOI2Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR4Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[NegateConditionalsMutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[InlineConstantMutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR2Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[InlineConstantMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR5Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR1Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; MST[NonVoidMethodCallMutator]MSP[] return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR6Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
} if ( distributions != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR3Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR1Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
buffer . append ( date ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR5Mutator]MSP[] }
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR5Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] _writer_ . flush () ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; MST[experimental.NakedReceiverMutator]MSP[] if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[rv.UOI3Mutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[rv.CRCR6Mutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR4Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[rv.CRCR4Mutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI3Mutator]MSP[] }
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR3Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[experimental.NakedReceiverMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[ArgumentPropagationMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; MST[experimental.NakedReceiverMutator]MSP[]
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.CRCR3Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[NonVoidMethodCallMutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR3Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[ConstructorCallMutator]MSP[] lr_2 + replyString ) ; } try
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR6Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI2Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.UOI3Mutator]MSP[] } public int stat () throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( MST[ConstructorCallMutator]MSP[] lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR1Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI3Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR4Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR6Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[NonVoidMethodCallMutator]MSP[] } public int getReplyCode () { return replyCode ; }
final StringBuilder buffer = new StringBuilder () ; MST[ConstructorCallMutator]MSP[] buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { MST[rv.ROR5Mutator]MSP[] throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR6Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR2Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.UOI2Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[NonVoidMethodCallMutator]MSP[]
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[ArgumentPropagationMutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR5Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR1Mutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[experimental.NakedReceiverMutator]MSP[] lr_2 + replyString ) ; } try
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR6Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
} if ( distributions != null ) MST[rv.ROR5Mutator]MSP[] { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR4Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR5Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
return sendCommand ( NNTPCommand . LIST ) ; MST[NonVoidMethodCallMutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR5Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR4Mutator]MSP[] }
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[NegateConditionalsMutator]MSP[]
} if ( distributions != null ) { buffer . append ( lr_6 ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR5Mutator]MSP[] } public int post () throws IOException {
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR1Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ; MST[ConstructorCallMutator]MSP[]
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[InlineConstantMutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[] buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR3Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR1Mutator]MSP[] } public int post () throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( lr_5 ) ;
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.CRCR2Mutator]MSP[] }
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI2Mutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR2Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[] buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[NonVoidMethodCallMutator]MSP[]
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR5Mutator]MSP[] } public int list () throws IOException {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR1Mutator]MSP[] } public int list () throws IOException {
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[rv.UOI3Mutator]MSP[] } public int getReplyCode () { return replyCode ; }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.UOI3Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[NonVoidMethodCallMutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[InlineConstantMutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[ConditionalsBoundaryMutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR4Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR5Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR4Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR1Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[ArgumentPropagationMutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR5Mutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[rv.ROR5Mutator]MSP[]
return sendCommand ( NNTPCommand . POST ) ; MST[ArgumentPropagationMutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.UOI4Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[] buffer . append ( lr_5 ) ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR3Mutator]MSP[] } public int stat () throws IOException {
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; MST[experimental.MemberVariableMutator]MSP[] if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[ArgumentPropagationMutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
_isAllowedToPost = false ; MST[rv.CRCR3Mutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.ROR4Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[ArgumentPropagationMutator]MSP[] } public int list () throws IOException {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[rv.CRCR5Mutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[rv.CRCR6Mutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; MST[NonVoidMethodCallMutator]MSP[] } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.CRCR6Mutator]MSP[] }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[NonVoidMethodCallMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR6Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR3Mutator]MSP[] }
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[experimental.NakedReceiverMutator]MSP[]
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( lr_5 ) ;
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR1Mutator]MSP[]
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR3Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[rv.CRCR3Mutator]MSP[] }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[NonVoidMethodCallMutator]MSP[] lr_2 + replyString ) ; } try
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; MST[NonVoidMethodCallMutator]MSP[] if ( args != null )
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; MST[NonVoidMethodCallMutator]MSP[] } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[InlineConstantMutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR4Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; MST[experimental.NakedReceiverMutator]MSP[] } if ( distributions != null ) {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[NonVoidMethodCallMutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR2Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { MST[NegateConditionalsMutator]MSP[] throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR4Mutator]MSP[] }
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[rv.CRCR2Mutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; MST[NonVoidMethodCallMutator]MSP[] buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[PrimitiveReturnsMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR6Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; MST[experimental.NakedReceiverMutator]MSP[] if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[rv.CRCR5Mutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; MST[rv.UOI4Mutator]MSP[] } @Deprecated public int head ( final int a ) throws IOException { return head ( ( long ) a ) ; } @Deprecated
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[rv.ABSMutator]MSP[] } @Deprecated
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR3Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[NonVoidMethodCallMutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR5Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[NonVoidMethodCallMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI4Mutator]MSP[] }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; MST[NonVoidMethodCallMutator]MSP[] if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[experimental.NakedReceiverMutator]MSP[] lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR1Mutator]MSP[] }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( distributions != null ) {
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[NonVoidMethodCallMutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[NonVoidMethodCallMutator]MSP[] lr_2 + replyString ) ; } try
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[InlineConstantMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT ) ; MST[NonVoidMethodCallMutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.ABSMutator]MSP[] }
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR4Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI4Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR3Mutator]MSP[] }
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR5Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; MST[NonVoidMethodCallMutator]MSP[] if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } public int post () throws IOException {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR3Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[NegateConditionalsMutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[ArgumentPropagationMutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR3Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[NonVoidMethodCallMutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ; MST[ConstructorCallMutator]MSP[]
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR1Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR6Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.UOI3Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; MST[ReturnValsMutator]MSP[] } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[NonVoidMethodCallMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[InlineConstantMutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR2Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[ArgumentPropagationMutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
public int body ( final int a ) throws IOException { return body ( ( long ) a ) ; } @Deprecated public int head ( final int a ) throws IOException MST[ReturnValsMutator]MSP[] { return head ( ( long ) a ) ; } @Deprecated
} if ( distributions != null ) { buffer . append ( lr_6 ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR2Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ; MST[experimental.NakedReceiverMutator]MSP[]
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR2Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR5Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR3Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) MST[NegateConditionalsMutator]MSP[] {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR1Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.UOI4Mutator]MSP[] } public int stat () throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; MST[ArgumentPropagationMutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.UOI1Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[InlineConstantMutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[NonVoidMethodCallMutator]MSP[]
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR6Mutator]MSP[] } public int list () throws IOException {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[rv.CRCR4Mutator]MSP[] } public int post () throws IOException {
return sendCommand ( NNTPCommand . POST ) ; MST[rv.CRCR2Mutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[rv.CRCR6Mutator]MSP[] }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR4Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } public int post () throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.CRCR6Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[InlineConstantMutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; MST[ReturnValsMutator]MSP[] } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[] buffer . append ( lr_5 ) ;
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.CRCR3Mutator]MSP[] }
{ __commandBuffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[] __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[NonVoidMethodCallMutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; MST[NonVoidMethodCallMutator]MSP[] return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; MST[rv.CRCR2Mutator]MSP[] } public int list () throws IOException {
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[rv.UOI4Mutator]MSP[] } public int getReplyCode () { return replyCode ; }
} if ( distributions != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[rv.CRCR5Mutator]MSP[] }
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[ArgumentPropagationMutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[rv.CRCR2Mutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI3Mutator]MSP[] }
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[ArgumentPropagationMutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[rv.CRCR4Mutator]MSP[] }
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[rv.CRCR3Mutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] }
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[InlineConstantMutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR6Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR2Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[ReturnValsMutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR1Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
return sendCommand ( NNTPCommand . STAT ) ; MST[ArgumentPropagationMutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[rv.CRCR3Mutator]MSP[] }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR3Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.UOI1Mutator]MSP[] }
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.UOI3Mutator]MSP[] }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[experimental.NakedReceiverMutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; MST[ArgumentPropagationMutator]MSP[] }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; MST[rv.ABSMutator]MSP[] } public int getReplyCode () { return replyCode ; }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR2Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; } public int post () throws IOException {
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; MST[rv.CRCR1Mutator]MSP[] } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
return sendCommand ( NNTPCommand . POST ) ; } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; MST[InlineConstantMutator]MSP[] } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[ArgumentPropagationMutator]MSP[] } public int stat ( final String messageId ) throws IOException {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR4Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[NonVoidMethodCallMutator]MSP[] } public int stat ( final String messageId ) throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[ConstructorCallMutator]MSP[] lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . POST ) ; MST[NonVoidMethodCallMutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.ROR3Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
fireCommandSent ( command , message ) ; __getReply () ; return replyCode ; } public int sendCommand ( final int command , final String args ) throws IOException { return sendCommand ( NNTPCommand . getCommand ( command ) , args ) ; MST[rv.UOI1Mutator]MSP[] }
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[rv.UOI3Mutator]MSP[] } @Deprecated
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] }
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[ArgumentPropagationMutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR2Mutator]MSP[] }
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { throw new MalformedServerReplyException ( MST[NonVoidMethodCallMutator]MSP[] lr_2 + replyString ) ; } try
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR3Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[NonVoidMethodCallMutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] {
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR6Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR3Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[InlineConstantMutator]MSP[] } public int stat ( final String messageId ) throws IOException {
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; MST[ConstructorCallMutator]MSP[] buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[rv.CRCR2Mutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR6Mutator]MSP[] }
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; MST[BooleanTrueReturnValsMutator]MSP[] } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
return sendCommand ( NNTPCommand . POST ) ; MST[InlineConstantMutator]MSP[] } public int quit () throws IOException { return sendCommand ( NNTPCommand . QUIT ) ; } public int authinfoUser ( final String username ) throws IOException { final String userParameter = lr_7 + username ;
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[InlineConstantMutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR5Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[InlineConstantMutator]MSP[] }
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[NonVoidMethodCallMutator]MSP[] } @Deprecated
if ( replyCode == NNTPReply . SERVICE_DISCONTINUED ) { throw new NNTPConnectionClosedException ( lr_4 ) ; } } @Override protected void _connectAction_ () throws IOException { super . _connectAction_ () ; MST[VoidMethodCallMutator]MSP[] _reader_ = new CRLFLineReader ( new InputStreamReader ( _input_ , DEFAULT_ENCODING ) ) ; _writer_ =
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; MST[ArgumentPropagationMutator]MSP[] } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; MST[rv.CRCR2Mutator]MSP[] } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; } public int head ( final long articleNumber ) throws IOException {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; MST[experimental.NakedReceiverMutator]MSP[] return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; MST[rv.CRCR4Mutator]MSP[] } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; }
return sendCommand ( NNTPCommand . STAT , messageId ) ; MST[rv.CRCR2Mutator]MSP[] } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; } public int stat () throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR6Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
return sendCommand ( NNTPCommand . LIST ) ; } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; MST[rv.CRCR6Mutator]MSP[] } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
_isAllowedToPost = false ; MST[rv.CRCR5Mutator]MSP[] } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR1Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return sendCommand ( NNTPCommand . LIST ) ; MST[rv.CRCR1Mutator]MSP[] } public int next () throws IOException { return sendCommand ( NNTPCommand . NEXT ) ; } public int newgroups ( final String date , final String time , final boolean GMT , final String distributions ) throws IOException {
new BufferedWriter ( new OutputStreamWriter ( _output_ , DEFAULT_ENCODING ) ) ; __getReply () ; _isAllowedToPost = replyCode == NNTPReply . SERVER_READY_POSTING_ALLOWED ; } @Override public void disconnect () throws IOException { super . disconnect () ; MST[VoidMethodCallMutator]MSP[] _reader_ = null ; _writer_ = null ; replyString = null ;
buffer . append ( date ) ; MST[experimental.NakedReceiverMutator]MSP[] buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.ABSMutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
public int article ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , Long . toString ( articleNumber ) ) ; MST[rv.CRCR5Mutator]MSP[] } public int article () throws IOException { return sendCommand ( NNTPCommand . ARTICLE ) ; }
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; MST[BooleanFalseReturnValsMutator]MSP[] } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; if ( args != null )
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; MST[rv.CRCR1Mutator]MSP[] }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; MST[rv.CRCR4Mutator]MSP[] } public int stat ( final String messageId ) throws IOException {
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; MST[ArgumentPropagationMutator]MSP[] }
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; MST[EmptyObjectReturnValsMutator]MSP[] } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; }
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; MST[experimental.NakedReceiverMutator]MSP[] } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ;
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[NonVoidMethodCallMutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
public int newnews ( final String newsgroups , final String date , final String time , final boolean GMT , final String distributions ) throws IOException { final StringBuilder buffer = new StringBuilder () ; buffer . append ( newsgroups ) ; buffer . append ( ' ' ) ; MST[rv.CRCR4Mutator]MSP[]
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[rv.CRCR4Mutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
_isAllowedToPost = false ; } public boolean isAllowedToPost () { return _isAllowedToPost ; } public int sendCommand ( final String command , final String args ) throws IOException { final StringBuilder __commandBuffer = new StringBuilder () ; __commandBuffer . append ( command ) ; MST[experimental.NakedReceiverMutator]MSP[] if ( args != null )
{ __commandBuffer . append ( ' ' ) ; __commandBuffer . append ( args ) ; } __commandBuffer . append ( SocketClient . NETASCII_EOL ) ; String message ; _writer_ . write ( message = __commandBuffer . toString () ) ; _writer_ . flush () ; MST[VoidMethodCallMutator]MSP[]
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.ABSMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT ) ; MST[rv.CRCR5Mutator]MSP[] } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; }
buffer . append ( date ) ; buffer . append ( ' ' ) ; MST[rv.CRCR3Mutator]MSP[] buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ; } if ( distributions != null ) {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[rv.CRCR3Mutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
command . append ( wildmat ) ; MST[experimental.NakedReceiverMutator]MSP[] return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; } @Deprecated
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR1Mutator]MSP[] } public int stat () throws IOException {
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.ROR2Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[InlineConstantMutator]MSP[] }
return sendCommand ( NNTPCommand . STAT , messageId ) ; } public int stat ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . STAT , Long . toString ( articleNumber ) ) ; MST[rv.CRCR6Mutator]MSP[] } public int stat () throws IOException {
buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) { buffer . append ( ' ' ) ; MST[InlineConstantMutator]MSP[] buffer . append ( lr_5 ) ; } if ( distributions != null ) {
command . append ( lr_9 ) ; command . append ( selectedArticles ) ; return sendCommand ( NNTPCommand . XHDR , command . toString () ) ; MST[InlineConstantMutator]MSP[] } public int listActive ( final String wildmat ) throws IOException { final StringBuilder command = new StringBuilder ( lr_10 ) ;
command . append ( wildmat ) ; return sendCommand ( NNTPCommand . LIST , command . toString () ) ; } @Deprecated public int article ( final int a ) throws IOException { return article ( ( long ) a ) ; MST[rv.UOI2Mutator]MSP[] } @Deprecated
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; } return sendCommand ( NNTPCommand . NEWNEWS , buffer . toString () ) ; MST[ArgumentPropagationMutator]MSP[] } public int post () throws IOException {
public int sendCommand ( final String command ) throws IOException { return sendCommand ( command , null ) ; } public int sendCommand ( final int command ) throws IOException { return sendCommand ( command , null ) ; } public int getReplyCode () { return replyCode ; MST[rv.UOI4Mutator]MSP[] }
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[InlineConstantMutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
return sendCommand ( NNTPCommand . STAT ) ; } public int group ( final String newsgroup ) throws IOException { return sendCommand ( NNTPCommand . GROUP , newsgroup ) ; } public int help () throws IOException { return sendCommand ( NNTPCommand . HELP ) ; MST[rv.CRCR2Mutator]MSP[] }
return sendCommand ( NNTPCommand . HEAD , Long . toString ( articleNumber ) ) ; MST[rv.UOI4Mutator]MSP[] } public int head () throws IOException { return sendCommand ( NNTPCommand . HEAD ) ; } public int stat ( final String messageId ) throws IOException {
public int body () throws IOException { return sendCommand ( NNTPCommand . BODY ) ; } public int head ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . HEAD , messageId ) ; MST[rv.CRCR6Mutator]MSP[] } public int head ( final long articleNumber ) throws IOException {
public int body ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . BODY , messageId ) ; } public int body ( final long articleNumber ) throws IOException { return sendCommand ( NNTPCommand . BODY , Long . toString ( articleNumber ) ) ; MST[rv.UOI2Mutator]MSP[] }
public int xover ( final String selectedArticles ) throws IOException { return sendCommand ( NNTPCommand . XOVER , selectedArticles ) ; MST[ArgumentPropagationMutator]MSP[] } public int xhdr ( final String header , final String selectedArticles ) throws IOException { final StringBuilder command = new StringBuilder ( header ) ;
} if ( distributions != null ) { buffer . append ( lr_6 ) ; buffer . append ( distributions ) ; buffer . append ( '>' ) ; MST[experimental.NakedReceiverMutator]MSP[] } return sendCommand ( NNTPCommand . NEWGROUPS , buffer . toString () ) ; }
public int getReply () throws IOException { __getReply () ; return replyCode ; } public String getReplyString () { return replyString ; } public int article ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . ARTICLE , messageId ) ; MST[rv.CRCR1Mutator]MSP[] }
new BufferedWriter ( new OutputStreamWriter ( _output_ , DEFAULT_ENCODING ) ) ; __getReply () ; _isAllowedToPost = replyCode == NNTPReply . SERVER_READY_POSTING_ALLOWED ; } @Override public void disconnect () throws IOException { super . disconnect () ; _reader_ = null ; _writer_ = null ; replyString = null ; MST[experimental.MemberVariableMutator]MSP[]
private void __getReply () throws IOException { replyString = _reader_ . readLine () ; if ( replyString == null ) { throw new NNTPConnectionClosedException ( lr_1 ) ; } if ( replyString . length () < 3 ) { MST[rv.CRCR1Mutator]MSP[] throw new MalformedServerReplyException ( lr_2 + replyString ) ; } try
return sendCommand ( NNTPCommand . AUTHINFO , userParameter ) ; MST[rv.CRCR3Mutator]MSP[] } public int authinfoPass ( final String password ) throws IOException { final String passParameter = lr_8 + password ; return sendCommand ( NNTPCommand . AUTHINFO , passParameter ) ; }
final StringBuilder buffer = new StringBuilder () ; buffer . append ( date ) ; buffer . append ( ' ' ) ; buffer . append ( time ) ; if ( GMT ) MST[rv.ROR2Mutator]MSP[] { buffer . append ( ' ' ) ; buffer . append ( lr_5 ) ;
public int ihave ( final String messageId ) throws IOException { return sendCommand ( NNTPCommand . IHAVE , messageId ) ; MST[rv.CRCR4Mutator]MSP[] } public int last () throws IOException { return sendCommand ( NNTPCommand . LAST ) ; } public int list () throws IOException {
