_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.ABSMutator]MSP[]
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[rv.UOI4Mutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR5Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.UOI2Mutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[NonVoidMethodCallMutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ROR3Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.UOI1Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.CRCR2Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[rv.ROR2Mutator]MSP[]
return _socket_ . getKeepAlive () ; } public void setSoLinger ( final boolean on , final int val ) throws SocketException { _socket_ . setSoLinger ( on , val ) ; } public int getSoLinger () throws SocketException MST[NonVoidMethodCallMutator]MSP[] { return _socket_ . getSoLinger () ; } public int getLocalPort ()
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.CRCR6Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI1Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[rv.ROR3Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public boolean verifyRemote ( final Socket socket ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) {
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI3Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
if ( receiveBufferSize != - 1 ) { MST[rv.UOI4Mutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR5Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException MST[experimental.MemberVariableMutator]MSP[] { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ;
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[rv.ROR4Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[rv.UOI3Mutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
public boolean verifyRemote ( final Socket socket ) { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) MST[experimental.MemberVariableMutator]MSP[] {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ROR2Mutator]MSP[]
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.ABSMutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.CRCR6Mutator]MSP[]
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.CRCR1Mutator]MSP[]
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[VoidMethodCallMutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.ABSMutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
public boolean verifyRemote ( final Socket socket ) MST[rv.ROR5Mutator]MSP[] { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) {
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException MST[NonVoidMethodCallMutator]MSP[] {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[NegateConditionalsMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[rv.CRCR5Mutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[rv.UOI3Mutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR3Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
protected void _connectAction_ () throws IOException MST[experimental.MemberVariableMutator]MSP[] { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ;
if ( receiveBufferSize != - 1 ) { MST[VoidMethodCallMutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[VoidMethodCallMutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[ReturnValsMutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
} catch ( final IOException e ) { } } } private void closeQuietly ( final Closeable close ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( close != null ) { try { close . close () ; } catch ( final IOException e ) { } } } public boolean isConnected () {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public boolean verifyRemote ( final Socket socket ) MST[NonVoidMethodCallMutator]MSP[] { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) {
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[rv.ROR1Mutator]MSP[]
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[NonVoidMethodCallMutator]MSP[]
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[rv.ROR5Mutator]MSP[]
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.ABSMutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[NegateConditionalsMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[InlineConstantMutator]MSP[]
} catch ( final IOException e ) { } } } private void closeQuietly ( final Closeable close ) { MST[rv.CRCR3Mutator]MSP[] if ( close != null ) { try { close . close () ; } catch ( final IOException e ) { } } } public boolean isConnected () {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[rv.UOI2Mutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
public boolean verifyRemote ( final Socket socket ) MST[NegateConditionalsMutator]MSP[] { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[NonVoidMethodCallMutator]MSP[]
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI4Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
getCommandSupport () . fireCommandSent ( command , message ) ; } } protected void createCommandSupport () { commandSupport = new ProtocolCommandSupport ( this ) ; } protected ProtocolCommandSupport getCommandSupport () { MST[experimental.MemberVariableMutator]MSP[] return commandSupport ; } public void setProxy ( final Proxy proxy ) {
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
if ( receiveBufferSize != - 1 ) { MST[rv.UOI1Mutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR3Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[ConditionalsBoundaryMutator]MSP[]
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[rv.UOI1Mutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[rv.ABSMutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ROR3Mutator]MSP[]
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; MST[experimental.MemberVariableMutator]MSP[] } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
protected void _connectAction_ () throws IOException MST[NonVoidMethodCallMutator]MSP[] { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ;
public void setDefaultPort ( final int port ) MST[rv.ABSMutator]MSP[] { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[VoidMethodCallMutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.CRCR2Mutator]MSP[]
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI2Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
public void setDefaultPort ( final int port ) MST[rv.UOI4Mutator]MSP[] { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[InlineConstantMutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[NegateConditionalsMutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ROR4Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[rv.CRCR1Mutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[rv.ROR5Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[rv.ABSMutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[rv.UOI4Mutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[InlineConstantMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; } @SuppressWarnings ( lr_1 ) MST[rv.ABSMutator]MSP[] public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[rv.UOI2Mutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.UOI4Mutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throws SocketException , IOException { _hostname_ = null ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[ReturnValsMutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.UOI3Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ROR1Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI4Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ROR5Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[rv.CRCR6Mutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[VoidMethodCallMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
closeQuietly ( _output_ ) ; _socket_ = null ; _hostname_ = null ; _input_ = null ; _output_ = null ; } private void closeQuietly ( final Socket socket ) { if ( socket != null ) { try { MST[VoidMethodCallMutator]MSP[] socket . close () ;
getCommandSupport () . fireCommandSent ( command , message ) ; } } protected void createCommandSupport () { commandSupport = new ProtocolCommandSupport ( this ) ; } protected ProtocolCommandSupport getCommandSupport () { MST[ConstructorCallMutator]MSP[] return commandSupport ; } public void setProxy ( final Proxy proxy ) {
if ( receiveBufferSize != - 1 ) { MST[ConstructorCallMutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR6Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { MST[experimental.MemberVariableMutator]MSP[] if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[InlineConstantMutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[NegateConditionalsMutator]MSP[]
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI4Mutator]MSP[]
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[VoidMethodCallMutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ROR4Mutator]MSP[]
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI2Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI1Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[experimental.MemberVariableMutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; MST[NegateConditionalsMutator]MSP[] } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[InlineConstantMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[]
public boolean verifyRemote ( final Socket socket ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) {
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[NegateConditionalsMutator]MSP[]
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[rv.UOI3Mutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ROR5Mutator]MSP[]
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI3Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.CRCR4Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
return _socket_ . getKeepAlive () ; } public void setSoLinger ( final boolean on , final int val ) throws SocketException { _socket_ . setSoLinger ( on , val ) ; } public int getSoLinger () throws SocketException { return _socket_ . getSoLinger () ; } public int getLocalPort () MST[NonVoidMethodCallMutator]MSP[]
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[rv.ROR4Mutator]MSP[]
getCommandSupport () . fireCommandSent ( command , message ) ; } } protected void createCommandSupport () { commandSupport = new ProtocolCommandSupport ( this ) ; } protected ProtocolCommandSupport getCommandSupport () { MST[VoidMethodCallMutator]MSP[] return commandSupport ; } public void setProxy ( final Proxy proxy ) {
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[BooleanTrueReturnValsMutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[NegateConditionalsMutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
} catch ( final IOException e ) { } } } private void closeQuietly ( final Closeable close ) { MST[rv.CRCR5Mutator]MSP[] if ( close != null ) { try { close . close () ; } catch ( final IOException e ) { } } } public boolean isConnected () {
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[rv.ROR1Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
if ( receiveBufferSize != - 1 ) { MST[rv.UOI2Mutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI3Mutator]MSP[]
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[ConstructorCallMutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[NonVoidMethodCallMutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.UOI2Mutator]MSP[]
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR5Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[NonVoidMethodCallMutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI1Mutator]MSP[]
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { MST[rv.UOI1Mutator]MSP[] _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { MST[rv.UOI3Mutator]MSP[] _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException {
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.ABSMutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR6Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.UOI3Mutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.UOI1Mutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[PrimitiveReturnsMutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI1Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[experimental.MemberVariableMutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { MST[NonVoidMethodCallMutator]MSP[] return receiveBufferSize ; } public int getSoTimeout () throws SocketException { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI3Mutator]MSP[]
closeQuietly ( _output_ ) ; MST[VoidMethodCallMutator]MSP[] _socket_ = null ; _hostname_ = null ; _input_ = null ; _output_ = null ; } private void closeQuietly ( final Socket socket ) { if ( socket != null ) { try { socket . close () ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ABSMutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.ROR1Mutator]MSP[]
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI4Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.CRCR1Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI1Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.CRCR4Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.CRCR5Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException MST[NonVoidMethodCallMutator]MSP[] { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ;
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[VoidMethodCallMutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ROR2Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
return false ; } if ( _socket_ . isOutputShutdown () ) { MST[rv.CRCR3Mutator]MSP[] return false ; } _socket_ . getInputStream () ; _socket_ . getOutputStream () ; } catch ( final IOException ioex ) { return false ; } return true ; } return false ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[rv.UOI2Mutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
public boolean verifyRemote ( final Socket socket ) { InetAddress host1 , host2 ; host1 = socket . getInetAddress () ; host2 = getRemoteAddress () ; return host1 . equals ( host2 ) ; } public void setSocketFactory ( final SocketFactory factory ) MST[experimental.MemberVariableMutator]MSP[] {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.UOI4Mutator]MSP[]
{ return _socket_ . getLocalPort () ; } public InetAddress getLocalAddress () { return _socket_ . getLocalAddress () ; MST[NonVoidMethodCallMutator]MSP[] } public int getRemotePort () { return _socket_ . getPort () ; } public InetAddress getRemoteAddress () { return _socket_ . getInetAddress () ; }
public void setReceiveBufferSize ( final int size ) throws SocketException { receiveBufferSize = size ; } protected int getReceiveBufferSize () { return receiveBufferSize ; } public int getSoTimeout () throws SocketException MST[rv.UOI1Mutator]MSP[] { return _socket_ . getSoTimeout () ; } public void setTcpNoDelay ( final boolean on ) throws SocketException {
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.UOI3Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
public void setSoTimeout ( final int timeout ) throws SocketException MST[rv.UOI2Mutator]MSP[] { _socket_ . setSoTimeout ( timeout ) ; } public void setSendBufferSize ( final int size ) throws SocketException { sendBufferSize = size ; } protected int getSendBufferSize () { return sendBufferSize ; }
if ( receiveBufferSize != - 1 ) { MST[rv.UOI3Mutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( _socket_ == null ) { return false ; } return _socket_ . isConnected () ; MST[rv.ROR2Mutator]MSP[] } @SuppressWarnings ( lr_1 ) public boolean isAvailable () { if ( isConnected () ) { try { if ( _socket_ . getInetAddress () == null ) { return false ; }
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
if ( receiveBufferSize != - 1 ) { MST[rv.ABSMutator]MSP[] _socket_ . setReceiveBufferSize ( receiveBufferSize ) ; } if ( sendBufferSize != - 1 ) { _socket_ . setSendBufferSize ( sendBufferSize ) ; } if ( localAddr != null ) {
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[experimental.MemberVariableMutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ROR5Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[rv.ABSMutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { MST[NonVoidMethodCallMutator]MSP[] _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException {
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[experimental.MemberVariableMutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
_connect ( host , port , null , - 1 ) ; } public void connect ( final String hostname , final int port ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _hostname_ = hostname ;
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI2Mutator]MSP[]
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) throws SocketException , IOException { _hostname_ = null ; MST[rv.CRCR5Mutator]MSP[]
getCommandSupport () . addProtocolCommandListener ( listener ) ; } public void removeProtocolCommandListener ( final ProtocolCommandListener listener ) { getCommandSupport () . removeProtocolCommandListener ( listener ) ; } protected void fireReplyReceived ( final int replyCode , final String reply ) { MST[rv.ROR3Mutator]MSP[]
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.ABSMutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[rv.UOI4Mutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
if ( factory == null ) { _socketFactory_ = DEFAULT_SOCKET_FACTORY ; } else { _socketFactory_ = factory ; } connProxy = null ; MST[rv.ROR5Mutator]MSP[] } public void setServerSocketFactory ( final ServerSocketFactory factory ) { if ( factory == null ) { _serverSocketFactory_ = DEFAULT_SERVER_SOCKET_FACTORY ; } else {
{ return _socket_ . getLocalPort () ; } public InetAddress getLocalAddress () { return _socket_ . getLocalAddress () ; } public int getRemotePort () MST[NonVoidMethodCallMutator]MSP[] { return _socket_ . getPort () ; } public InetAddress getRemoteAddress () { return _socket_ . getInetAddress () ; }
_connect ( host , port , localAddr , localPort ) ; } private void _connect ( final InetAddress host , final int port , final InetAddress localAddr , final int localPort ) MST[rv.CRCR4Mutator]MSP[] throws SocketException , IOException { _socket_ = _socketFactory_ . createSocket () ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[rv.UOI4Mutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
protected void _connectAction_ () throws IOException { _socket_ . setSoTimeout ( _timeout_ ) ; _input_ = _socket_ . getInputStream () ; _output_ = _socket_ . getOutputStream () ; } public void connect ( final InetAddress host , final int port ) MST[NonVoidMethodCallMutator]MSP[] throws SocketException , IOException { _hostname_ = null ;
public void setDefaultPort ( final int port ) { _defaultPort_ = port ; } public int getDefaultPort () { return _defaultPort_ ; } public void setDefaultTimeout ( final int timeout ) MST[experimental.MemberVariableMutator]MSP[] { _timeout_ = timeout ; } public int getDefaultTimeout () { return _timeout_ ; }
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[VoidMethodCallMutator]MSP[]
_socket_ . setTcpNoDelay ( on ) ; } public boolean getTcpNoDelay () throws SocketException { return _socket_ . getTcpNoDelay () ; } public void setKeepAlive ( final boolean keepAlive ) throws SocketException { _socket_ . setKeepAlive ( keepAlive ) ; } public boolean getKeepAlive () throws SocketException { MST[rv.UOI2Mutator]MSP[]
_connect ( InetAddress . getByName ( hostname ) , port , null , - 1 ) ; } public void connect ( final InetAddress host , final int port , MST[rv.UOI4Mutator]MSP[] final InetAddress localAddr , final int localPort ) throws SocketException , IOException { _hostname_ = null ;
