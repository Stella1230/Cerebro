return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[NonVoidMethodCallMutator]MSP[S] lr_7 + getPrecision () + lr_8 + getRootDelay () +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI4Mutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR1Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.ABSMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 | MST[NonVoidMethodCallMutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ABSMutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR5Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.ABSMutator]MSP[N]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ROR3Mutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR1Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[ConditionalsBoundaryMutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI2Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOR4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[experimental.NakedReceiverMutator]MSP[S] lr_7 + getPrecision () + lr_8 + getRootDelay () +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOD2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { MST[rv.UOI4Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ROR2Mutator]MSP[S] {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.UOI3Mutator]MSP[N] {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR5Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
if ( stratum >= 2 ) { MST[rv.ROR1Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[PrimitiveReturnsMutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOR2Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[InlineConstantMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI2Mutator]MSP[S] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR1Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR6Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[NonVoidMethodCallMutator]MSP[N] { if ( this == obj ) { return true ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI2Mutator]MSP[S]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR6Mutator]MSP[N] {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN2Mutator]MSP[N] public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR3Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[InlineConstantMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
if ( stratum >= 2 ) { MST[ReturnValsMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override MST[NonVoidMethodCallMutator]MSP[S] public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ul ( buf [ index + 2 ] ) << 40 | MST[MathMutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[InlineConstantMutator]MSP[S]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI4Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR1Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR5Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI3Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR6Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + MST[NonVoidMethodCallMutator]MSP[N] ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI1Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR3Mutator]MSP[S]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR3Mutator]MSP[S] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[MathMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR5Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR5Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.UOI3Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI1Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ul ( buf [ index + 2 ] ) << 40 | MST[rv.OBBN1Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR4Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI3Mutator]MSP[N] {
@Override MST[MathMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[NullReturnValsMutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOR4Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR4Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ABSMutator]MSP[S]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setMode ( final int mode ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOD2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR6Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ABSMutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOD2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + MST[experimental.NakedReceiverMutator]MSP[S] lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
public void setStratum ( final int stratum ) MST[InlineConstantMutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[InlineConstantMutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.UOI3Mutator]MSP[S] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.ABSMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOD1Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ROR2Mutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR4Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR1Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[NegateConditionalsMutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR1Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[rv.CRCR5Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR4Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 | MST[MathMutator]MSP[N]
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.ABSMutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR6Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.ABSMutator]MSP[N]
@Override MST[rv.UOI2Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[MathMutator]MSP[N]
final long i = b & 0xFF ; return i ; } @Override MST[experimental.NakedReceiverMutator]MSP[S] public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | MST[NonVoidMethodCallMutator]MSP[N] ul ( buf [ index + 5 ] ) << 16 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR4Mutator]MSP[N]
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[BooleanFalseReturnValsMutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOR3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[NegateConditionalsMutator]MSP[N]
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.UOI2Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR6Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR6Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.UOI3Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI2Mutator]MSP[N] {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR3Mutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; }
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ROR3Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR2Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override MST[rv.CRCR3Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[MathMutator]MSP[N] { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR6Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[ReturnValsMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + MST[NonVoidMethodCallMutator]MSP[S] lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR2Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR5Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[MathMutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.OBBN1Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[rv.CRCR4Mutator]MSP[S] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
if ( obj == null || getClass () != obj . getClass () ) { MST[NonVoidMethodCallMutator]MSP[N] return false ; } final NtpV3Impl other = ( NtpV3Impl ) obj ; return java . util . Arrays . equals ( buf , other . buf ) ; } @Override public int hashCode ()
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.CRCR4Mutator]MSP[S]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[InlineConstantMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[MathMutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI3Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI4Mutator]MSP[N] {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[InlineConstantMutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[RemoveConditionalMutator_ORDER_IF]MSP[S] { final StringBuilder id = new StringBuilder () ;
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + MST[NonVoidMethodCallMutator]MSP[N] lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setStratum ( final int stratum ) MST[rv.CRCR2Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[InlineConstantMutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR1Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[NegateConditionalsMutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setMode ( final int mode ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI2Mutator]MSP[N]
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
if ( stratum >= 2 ) { MST[rv.CRCR6Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOR1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR2Mutator]MSP[S] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR5Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setMode ( final int mode ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR5Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOD1Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR5Mutator]MSP[N] {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[ConditionalsBoundaryMutator]MSP[S] {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI2Mutator]MSP[S] public void setMode ( final int mode ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | MST[rv.OBBN1Mutator]MSP[N] ul ( buf [ index + 5 ] ) << 16 |
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.CRCR4Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.UOI3Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + MST[experimental.NakedReceiverMutator]MSP[S] lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[MathMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI1Mutator]MSP[S] public void setMode ( final int mode ) {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.UOI4Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.OBBN3Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[NullReturnValsMutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR2Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR6Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[InlineConstantMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR3Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR5Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR4Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN1Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR4Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[rv.UOI1Mutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.OBBN2Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI1Mutator]MSP[S]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI2Mutator]MSP[S]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[rv.UOI4Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR4Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR1Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOR3Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR6Mutator]MSP[N] return true ; }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOR3Mutator]MSP[N] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN2Mutator]MSP[S] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[rv.UOI2Mutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI3Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[BooleanTrueReturnValsMutator]MSP[N] return true ; }
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[ReturnValsMutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR6Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; MST[NullReturnValsMutator]MSP[N] dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR3Mutator]MSP[N] return true ; }
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI4Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN3Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[NonVoidMethodCallMutator]MSP[N] lr_7 + getPrecision () + lr_8 + getRootDelay () +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[InlineConstantMutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN1Mutator]MSP[N] {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ROR2Mutator]MSP[N]
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.UOI1Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOR1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR3Mutator]MSP[S] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR5Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ROR3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | MST[rv.ABSMutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[experimental.NakedReceiverMutator]MSP[S] break; } id . append ( c ) ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOD1Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[NonVoidMethodCallMutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ROR5Mutator]MSP[S] {
if ( stratum >= 2 ) { MST[NonVoidMethodCallMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI1Mutator]MSP[S] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.ABSMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override MST[rv.CRCR1Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN3Mutator]MSP[N] public void setMode ( final int mode ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR2Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[InlineConstantMutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR1Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override MST[rv.UOI1Mutator]MSP[S] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
@Override MST[rv.UOI3Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[ReturnValsMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ROR5Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR5Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR3Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { MST[EmptyObjectReturnValsMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.UOI2Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
@Override MST[rv.CRCR3Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOR2Mutator]MSP[N]
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[rv.UOI4Mutator]MSP[N] {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.ABSMutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR1Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR1Mutator]MSP[N]
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[RemoveConditionalMutator_ORDER_IF]MSP[N] {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN2Mutator]MSP[S] public void setMode ( final int mode ) {
if ( stratum >= 2 ) { MST[ConditionalsBoundaryMutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR2Mutator]MSP[S]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI3Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[MathMutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[MathMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[ConstructorCallMutator]MSP[N] {
if ( stratum >= 2 ) { MST[rv.UOI1Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[ReturnValsMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[NonVoidMethodCallMutator]MSP[S] break; } id . append ( c ) ; }
@Override MST[rv.ABSMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI1Mutator]MSP[S] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.OBBN1Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[MathMutator]MSP[N] {
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR5Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR6Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ROR4Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR2Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + MST[NonVoidMethodCallMutator]MSP[N] lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[InlineConstantMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR5Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI1Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR3Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override MST[EmptyObjectReturnValsMutator]MSP[N] public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR5Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR5Mutator]MSP[S] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setStratum ( final int stratum ) MST[rv.UOI3Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI1Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR2Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOR3Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
@Override MST[InlineConstantMutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.UOI1Mutator]MSP[S]
if ( stratum >= 2 ) { MST[NegateConditionalsMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[MathMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[InlineConstantMutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR1Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[InlineConstantMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[NonVoidMethodCallMutator]MSP[N] lr_7 + getPrecision () + lr_8 + getRootDelay () +
if ( stratum >= 2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR4Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
public void setStratum ( final int stratum ) MST[rv.CRCR5Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[NegateConditionalsMutator]MSP[S] {
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ABSMutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[NegateConditionalsMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[PrimitiveReturnsMutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.ABSMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI2Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR1Mutator]MSP[N]
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.UOI4Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[IncrementsMutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI4Mutator]MSP[S]
if ( stratum >= 2 ) { MST[rv.CRCR3Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR1Mutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR6Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR2Mutator]MSP[N] {
@Override MST[rv.CRCR6Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override MST[rv.CRCR5Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR4Mutator]MSP[N] {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; dp . setAddress ( srcDp . getAddress () ) ; MST[VoidMethodCallMutator]MSP[S] final int port = srcDp . getPort () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[rv.UOI2Mutator]MSP[S]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 | MST[rv.OBBN1Mutator]MSP[N]
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.OBBN2Mutator]MSP[S] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOD1Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
} @Override MST[rv.ROR5Mutator]MSP[N] public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR4Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.UOI4Mutator]MSP[S] {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + MST[NonVoidMethodCallMutator]MSP[N] lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
} @Override MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
@Override MST[rv.CRCR4Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN2Mutator]MSP[S] public void setMode ( final int mode ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[NullReturnValsMutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ROR3Mutator]MSP[N] {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setMode ( final int mode ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR5Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ABSMutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR1Mutator]MSP[N] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOD1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[InlineConstantMutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[InlineConstantMutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[ReturnValsMutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( this == obj ) { return true ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.ABSMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR6Mutator]MSP[N]
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; }
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
if ( stratum >= 2 ) { MST[EmptyObjectReturnValsMutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.ABSMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.UOI3Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR1Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[ConstructorCallMutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[InlineConstantMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI2Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR6Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
len = buf . length ; MST[NonVoidMethodCallMutator]MSP[N] } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ROR4Mutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR4Mutator]MSP[N] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR3Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR6Mutator]MSP[N]
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[NonVoidMethodCallMutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.CRCR3Mutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[EmptyObjectReturnValsMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { MST[rv.ROR5Mutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR2Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[rv.ABSMutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () MST[VoidMethodCallMutator]MSP[N] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[InlineConstantMutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI3Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ROR5Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[InlineConstantMutator]MSP[N] {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[VoidMethodCallMutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR2Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR3Mutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.UOI1Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[InlineConstantMutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR1Mutator]MSP[S] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR1Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.OBBN3Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
final long i = b & 0xFF ; return i ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
public void setStratum ( final int stratum ) MST[rv.CRCR6Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[PrimitiveReturnsMutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[PrimitiveReturnsMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[InlineConstantMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
} @Override MST[NegateConditionalsMutator]MSP[N] public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setStratum ( final int stratum ) MST[rv.CRCR3Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR5Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN1Mutator]MSP[N] public void setMode ( final int mode ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.UOI4Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR5Mutator]MSP[N]
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.UOI4Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[PrimitiveReturnsMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[ReturnValsMutator]MSP[N] return true ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[rv.UOI3Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + MST[NonVoidMethodCallMutator]MSP[S] lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOD2Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[EmptyObjectReturnValsMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN3Mutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN2Mutator]MSP[S]
@Override MST[NonVoidMethodCallMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR5Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR6Mutator]MSP[N] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR5Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR3Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR6Mutator]MSP[N] {
@Override MST[rv.CRCR1Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.UOI4Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[InlineConstantMutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.UOI3Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S]
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOR3Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI3Mutator]MSP[S]
if ( stratum >= 2 ) { MST[rv.CRCR5Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[ReturnValsMutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[InlineConstantMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI1Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + MST[NonVoidMethodCallMutator]MSP[N] ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR3Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ABSMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR4Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR2Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI4Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR3Mutator]MSP[N]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.ABSMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR5Mutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.OBBN3Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[InlineConstantMutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ROR4Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.UOI2Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | MST[rv.OBBN2Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.UOI2Mutator]MSP[S] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[rv.UOI4Mutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN1Mutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ROR1Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR4Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[InlineConstantMutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR2Mutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR5Mutator]MSP[S] public void setMode ( final int mode ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[InlineConstantMutator]MSP[N]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR4Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR5Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR2Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI2Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
public void setStratum ( final int stratum ) MST[rv.UOI1Mutator]MSP[S] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] { final StringBuilder id = new StringBuilder () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[MathMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR1Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.UOI1Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[NonVoidMethodCallMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
if ( stratum >= 2 ) { MST[rv.ROR2Mutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN2Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setMode ( final int mode ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[NegateConditionalsMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR3Mutator]MSP[N]
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOR2Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[rv.ABSMutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[rv.CRCR6Mutator]MSP[S] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[InlineConstantMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN1Mutator]MSP[N] public void setMode ( final int mode ) {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + MST[NonVoidMethodCallMutator]MSP[N] lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI1Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR3Mutator]MSP[S]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR5Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[MathMutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR6Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.UOI2Mutator]MSP[S]
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[PrimitiveReturnsMutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[ConstructorCallMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI2Mutator]MSP[N] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[rv.ROR5Mutator]MSP[N] { if ( this == obj ) { return true ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR1Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR3Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR4Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[rv.UOI3Mutator]MSP[S] break; } id . append ( c ) ; }
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR6Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[InlineConstantMutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { MST[rv.UOI2Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 | MST[rv.OBBN2Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR5Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[NegateConditionalsMutator]MSP[N] { if ( this == obj ) { return true ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI4Mutator]MSP[N] {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI1Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOR2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[MathMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ABSMutator]MSP[N] {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR5Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOD1Mutator]MSP[N] {
public void setStratum ( final int stratum ) MST[rv.UOI4Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.UOI3Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOR2Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR2Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
final int stratum = getStratum () ; MST[NonVoidMethodCallMutator]MSP[N] if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; } if ( version == VERSION_4 ) { return idAsHex () ; } }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR3Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.UOI1Mutator]MSP[S] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOR2Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[MathMutator]MSP[N]
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR4Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR6Mutator]MSP[S]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR2Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR5Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.ABSMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR1Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.UOI4Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.OBBN1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ROR5Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI2Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR1Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR5Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR6Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI4Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.ABSMutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR3Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override MST[rv.CRCR5Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[NonVoidMethodCallMutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[InlineConstantMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[InlineConstantMutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[VoidMethodCallMutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.OBBN3Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.UOI1Mutator]MSP[S] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR6Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[InlineConstantMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ul ( buf [ index + 2 ] ) << 40 | MST[MathMutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[VoidMethodCallMutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR2Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.OBBN2Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
@Override MST[rv.OBBN3Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) MST[rv.CRCR1Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR2Mutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR2Mutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
@Override MST[rv.CRCR1Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[InlineConstantMutator]MSP[N] {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR1Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR2Mutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR5Mutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
if ( stratum >= 2 ) { MST[rv.CRCR2Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI2Mutator]MSP[S] public void setMode ( final int mode ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | MST[MathMutator]MSP[N] ul ( buf [ index + 5 ] ) << 16 |
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override MST[rv.CRCR4Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[rv.ROR5Mutator]MSP[N] {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[NonVoidMethodCallMutator]MSP[S] lr_7 + getPrecision () + lr_8 + getRootDelay () +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[ConditionalsBoundaryMutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[ReturnValsMutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR6Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.ABSMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[MathMutator]MSP[N] public void setMode ( final int mode ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR3Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR1Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR6Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.ABSMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR2Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR5Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
} @Override public synchronized DatagramPacket getDatagramPacket () MST[experimental.MemberVariableMutator]MSP[N] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[ReturnValsMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOD2Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI3Mutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI2Mutator]MSP[S]
if ( obj == null || getClass () != obj . getClass () ) { MST[BooleanTrueReturnValsMutator]MSP[N] return false ; } final NtpV3Impl other = ( NtpV3Impl ) obj ; return java . util . Arrays . equals ( buf , other . buf ) ; } @Override public int hashCode ()
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[ReturnValsMutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[MathMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.OBBN1Mutator]MSP[N] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR5Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI4Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[MathMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI3Mutator]MSP[S] {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[rv.UOI1Mutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
public void setStratum ( final int stratum ) MST[rv.CRCR4Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR3Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOR3Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR4Mutator]MSP[N] {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.CRCR5Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ABSMutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.UOI4Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.UOI2Mutator]MSP[S]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.OBBN2Mutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setMode ( final int mode ) {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[ReturnValsMutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[rv.UOI1Mutator]MSP[S] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.OBBN1Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.UOI1Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ROR1Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR1Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[ArgumentPropagationMutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR4Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI4Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR4Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.ABSMutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[NegateConditionalsMutator]MSP[N] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR3Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ROR2Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR2Mutator]MSP[N] {
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOR4Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI1Mutator]MSP[S] {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + MST[experimental.NakedReceiverMutator]MSP[S] lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI2Mutator]MSP[S] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR3Mutator]MSP[S] public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[S] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR3Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR5Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[ArgumentPropagationMutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[MathMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.ABSMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[rv.CRCR3Mutator]MSP[S] {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ROR1Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | MST[rv.OBBN2Mutator]MSP[S] ul ( buf [ index + 5 ] ) << 16 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[ConditionalsBoundaryMutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[NegateConditionalsMutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.UOI2Mutator]MSP[S] public void setRootDispersion ( final int dispersion ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR3Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOD1Mutator]MSP[S]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR6Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR2Mutator]MSP[N] {
return id . toString () ; } private String idAsHex () MST[NonVoidMethodCallMutator]MSP[N] { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI1Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR3Mutator]MSP[N] {
@Override MST[rv.UOI2Mutator]MSP[S] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR6Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.CRCR2Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
return id . toString () ; } private String idAsHex () MST[EmptyObjectReturnValsMutator]MSP[N] { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[MathMutator]MSP[N]
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.UOI1Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN1Mutator]MSP[N] {
@Override MST[rv.ABSMutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override MST[MathMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOR3Mutator]MSP[N]
public void setStratum ( final int stratum ) MST[rv.CRCR2Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI3Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOR4Mutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI2Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR3Mutator]MSP[N]
if ( stratum >= 2 ) { MST[rv.CRCR4Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[InlineConstantMutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ABSMutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR4Mutator]MSP[S]
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR6Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setStratum ( final int stratum ) MST[InlineConstantMutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[MathMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR2Mutator]MSP[N]
@Override MST[rv.CRCR2Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.UOI4Mutator]MSP[N]
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + MST[experimental.NakedReceiverMutator]MSP[S] lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI1Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI4Mutator]MSP[N] {
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR6Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[rv.UOI3Mutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setMode ( final int mode ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.OBBN2Mutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.CRCR2Mutator]MSP[S]
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[NonVoidMethodCallMutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ROR2Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR1Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.ABSMutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR3Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[experimental.NakedReceiverMutator]MSP[S] lr_7 + getPrecision () + lr_8 + getRootDelay () +
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI4Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.OBBN2Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOR1Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[rv.UOI3Mutator]MSP[N]
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[PrimitiveReturnsMutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.UOI1Mutator]MSP[S]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[MathMutator]MSP[N] {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[NonVoidMethodCallMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR3Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[MathMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.OBBN1Mutator]MSP[N] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[MathMutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[NonVoidMethodCallMutator]MSP[N] { if ( this == obj ) { return true ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR6Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
} @Override public synchronized DatagramPacket getDatagramPacket () MST[ConstructorCallMutator]MSP[N] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR4Mutator]MSP[N]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI2Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public void setMode ( final int mode ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN2Mutator]MSP[S]
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI1Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
public void setStratum ( final int stratum ) MST[rv.UOI2Mutator]MSP[S] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN1Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | MST[rv.UOI2Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN3Mutator]MSP[N]
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOR4Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR1Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[rv.UOI3Mutator]MSP[N] {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; MST[ReturnValsMutator]MSP[N] dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR6Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR6Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR3Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override MST[rv.CRCR3Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[rv.ABSMutator]MSP[S] break; } id . append ( c ) ; }
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN1Mutator]MSP[N] public void setMode ( final int mode ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ROR3Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR3Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR5Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | MST[InlineConstantMutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI1Mutator]MSP[N]
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[ArgumentPropagationMutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
@Override MST[rv.CRCR5Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR4Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR5Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + MST[NonVoidMethodCallMutator]MSP[N] lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setMode ( final int mode ) {
if ( stratum >= 2 ) { MST[rv.CRCR1Mutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR3Mutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[rv.CRCR5Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOR1Mutator]MSP[N] {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.UOI2Mutator]MSP[S]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR4Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.ABSMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[VoidMethodCallMutator]MSP[N] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOR1Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[InlineConstantMutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ROR4Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR5Mutator]MSP[N] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[InlineConstantMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR1Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR4Mutator]MSP[N] {
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR3Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.UOI4Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ABSMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ul ( buf [ index + 2 ] ) << 40 | MST[rv.ABSMutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ul ( buf [ index + 2 ] ) << 40 | MST[rv.OBBN3Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.ABSMutator]MSP[N] public void setMode ( final int mode ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 | MST[ReturnValsMutator]MSP[N]
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.AOD2Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
public void setStratum ( final int stratum ) MST[rv.OBBN3Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( this == obj ) { return true ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[MathMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
@Override MST[PrimitiveReturnsMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[VoidMethodCallMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override MST[experimental.NakedReceiverMutator]MSP[S] public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.UOI2Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOR4Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[ConstructorCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.UOI3Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR5Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR6Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOR1Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[InlineConstantMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { MST[rv.ABSMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override MST[ReturnValsMutator]MSP[N] public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOD2Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[InlineConstantMutator]MSP[N] return true ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR6Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR2Mutator]MSP[S] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOD2Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI1Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ROR1Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[PrimitiveReturnsMutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
} @Override public synchronized DatagramPacket getDatagramPacket () MST[InlineConstantMutator]MSP[S] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.UOI2Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR3Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ROR1Mutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOR2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR5Mutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR3Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[S] public TimeStamp getReferenceTimeStamp () {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[PrimitiveReturnsMutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[InlineConstantMutator]MSP[N]
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[S] public TimeStamp getReferenceTimeStamp () {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.UOI1Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.CRCR6Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[NullReturnValsMutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[InlineConstantMutator]MSP[N]
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR3Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR5Mutator]MSP[S] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[S] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR1Mutator]MSP[N] {
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[InlineConstantMutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI4Mutator]MSP[S]
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[PrimitiveReturnsMutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR4Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR6Mutator]MSP[S]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.OBBN2Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR6Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[NegateConditionalsMutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
@Override MST[rv.CRCR6Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S]
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[InlineConstantMutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.OBBN1Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR3Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.ABSMutator]MSP[S] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setMode ( final int mode ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI1Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.OBBN2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI4Mutator]MSP[N]
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ABSMutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR1Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR4Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR3Mutator]MSP[N] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override MST[ReturnValsMutator]MSP[N] public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR3Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + MST[experimental.NakedReceiverMutator]MSP[S] lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ROR5Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR4Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.UOI3Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI2Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI3Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.ABSMutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setMode ( final int mode ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR6Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { MST[rv.ROR3Mutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOR4Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[PrimitiveReturnsMutator]MSP[N] { final double l = getRootDispersion () ; return l / 65.536 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI4Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[ReturnValsMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
@Override MST[InlineConstantMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[ReturnValsMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[InlineConstantMutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI1Mutator]MSP[N]
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR6Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR5Mutator]MSP[N] {
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR5Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR4Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
if ( stratum >= 2 ) { MST[ReturnValsMutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOD1Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[rv.CRCR3Mutator]MSP[S] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_IF]MSP[N] { if ( this == obj ) { return true ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[MathMutator]MSP[N] {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ROR3Mutator]MSP[S] {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.UOI1Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setMode ( final int mode ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[InlineConstantMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ROR4Mutator]MSP[N] {
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[NullReturnValsMutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR2Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ROR4Mutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR6Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR3Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR3Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.ABSMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR2Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[NonVoidMethodCallMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[IncrementsMutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + MST[NonVoidMethodCallMutator]MSP[N] lr_7 + getPrecision () + lr_8 + getRootDelay () +
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN3Mutator]MSP[N] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[ReturnValsMutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.AOR3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[ReturnValsMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setMode ( final int mode ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.UOI2Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[MathMutator]MSP[N] public void setMode ( final int mode ) {
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR1Mutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[InlineConstantMutator]MSP[S] public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOD2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ROR1Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ul ( buf [ index + 2 ] ) << 40 | MST[NonVoidMethodCallMutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.UOI2Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[rv.UOI2Mutator]MSP[N] break; } id . append ( c ) ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR1Mutator]MSP[N] {
public void setStratum ( final int stratum ) MST[rv.CRCR5Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] { if ( this == obj ) { return true ; }
return id . toString () ; } private String idAsHex () MST[ReturnValsMutator]MSP[N] { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
if ( srcDp == null || srcDp . getLength () < buf . length ) { MST[NonVoidMethodCallMutator]MSP[N] throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[ReturnValsMutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR5Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR1Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[MathMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR2Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI2Mutator]MSP[N]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ABSMutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
@Override MST[rv.CRCR1Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setStratum ( final int stratum ) MST[rv.ABSMutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[InlineConstantMutator]MSP[N] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR6Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOD2Mutator]MSP[N] {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.CRCR6Mutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR1Mutator]MSP[N] return true ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI4Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[MathMutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOR1Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
@Override MST[rv.OBBN2Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
if ( stratum >= 2 ) { MST[InlineConstantMutator]MSP[N] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI1Mutator]MSP[N]
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR6Mutator]MSP[S]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR1Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override MST[NonVoidMethodCallMutator]MSP[S] public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR6Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR4Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[MathMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI3Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR3Mutator]MSP[S] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI3Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.UOI4Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI4Mutator]MSP[N]
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR2Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR6Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[InlineConstantMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[MathMutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI3Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR5Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override MST[EmptyObjectReturnValsMutator]MSP[N] public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setMode ( final int mode ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[MathMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR2Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public void setMode ( final int mode ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | MST[rv.OBBN3Mutator]MSP[N] ul ( buf [ index + 5 ] ) << 16 |
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.CRCR6Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.ABSMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[rv.UOI1Mutator]MSP[N] break; } id . append ( c ) ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] { if ( this == obj ) { return true ; }
ul ( buf [ index + 2 ] ) << 40 | MST[MathMutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.UOI1Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI3Mutator]MSP[S] public void setMode ( final int mode ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.AOR2Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) MST[rv.CRCR3Mutator]MSP[S] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI4Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[MathMutator]MSP[N] public void setMode ( final int mode ) {
return id . toString () ; } private String idAsHex () MST[NonVoidMethodCallMutator]MSP[N] { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[RemoveConditionalMutator_ORDER_IF]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[VoidMethodCallMutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
@Override MST[rv.CRCR3Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.ABSMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[S] { final int i = ui ( buf [ index ] ) << 24 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR4Mutator]MSP[S] public void setDatagramPacket ( final DatagramPacket srcDp ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR3Mutator]MSP[N] {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
if ( obj == null || getClass () != obj . getClass () ) { MST[BooleanFalseReturnValsMutator]MSP[N] return false ; } final NtpV3Impl other = ( NtpV3Impl ) obj ; return java . util . Arrays . equals ( buf , other . buf ) ; } @Override public int hashCode ()
@Override MST[rv.CRCR6Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.UOI2Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + MST[experimental.NakedReceiverMutator]MSP[N] ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.OBBN3Mutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR3Mutator]MSP[S] public void setMode ( final int mode ) {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.CRCR4Mutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ROR3Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.OBBN3Mutator]MSP[N]
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.ROR2Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[S] {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR3Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI3Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override MST[ReturnValsMutator]MSP[N] public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.ABSMutator]MSP[S]
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR4Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
public void setStratum ( final int stratum ) MST[rv.OBBN1Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[NonVoidMethodCallMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override MST[ReturnValsMutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[ConditionalsBoundaryMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
dp . setPort ( port > 0 ? port : NTP_PORT ) ; dp . setData ( buf ) ; } @Override public boolean equals ( final Object obj ) { if ( this == obj ) { MST[rv.CRCR5Mutator]MSP[N] return true ; }
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[InlineConstantMutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[InlineConstantMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
public void setStratum ( final int stratum ) MST[rv.CRCR6Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.UOI1Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + MST[NonVoidMethodCallMutator]MSP[N] ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR6Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR1Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.ABSMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.CRCR4Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.UOI2Mutator]MSP[N] } if ( version == VERSION_4 ) { return idAsHex () ; } }
if ( stratum >= 2 ) { MST[rv.UOI3Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI1Mutator]MSP[S] {
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOR1Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI2Mutator]MSP[S] {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR1Mutator]MSP[N] {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.UOI3Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI3Mutator]MSP[N] {
final int stratum = getStratum () ; MST[ReturnValsMutator]MSP[N] if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; } if ( version == VERSION_4 ) { return idAsHex () ; } }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[NonVoidMethodCallMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ROR2Mutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR1Mutator]MSP[N] {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[NonVoidMethodCallMutator]MSP[S] {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR4Mutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[NegateConditionalsMutator]MSP[N]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.UOI1Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR5Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR4Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.UOI4Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[InlineConstantMutator]MSP[N]
final long i = b & 0xFF ; return i ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public String toString () { return lr_3 + lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR4Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR1Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR5Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.UOI2Mutator]MSP[S] {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.ABSMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[EmptyObjectReturnValsMutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setMode ( final int mode ) {
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[rv.CRCR1Mutator]MSP[S] {
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; MST[NonVoidMethodCallMutator]MSP[N] } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR1Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[InlineConstantMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI3Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR5Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR5Mutator]MSP[N] {
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[PrimitiveReturnsMutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI1Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[MathMutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
public void setStratum ( final int stratum ) MST[MathMutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) { final int i = ui ( buf [ index ] ) << 24 | MST[rv.OBBN3Mutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[rv.CRCR2Mutator]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.ABSMutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[MathMutator]MSP[N]
if ( stratum >= 2 ) { MST[NonVoidMethodCallMutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | MST[ReturnValsMutator]MSP[N] ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[InlineConstantMutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.OBBN2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR6Mutator]MSP[N] {
final int stratum = getStratum () ; if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[S] } if ( version == VERSION_4 ) { return idAsHex () ; } }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOD1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR5Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR5Mutator]MSP[S] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.OBBN1Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[ReturnValsMutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[rv.UOI2Mutator]MSP[S] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[NonVoidMethodCallMutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.CRCR5Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI2Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOR4Mutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI4Mutator]MSP[N]
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[MathMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.CRCR2Mutator]MSP[N] {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[ReturnValsMutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
for ( int i = 0 ; i <= 3 ; i ++ ) { final char c = ( char ) buf [ REFERENCE_ID_INDEX + i ] ; if ( c == 0 ) { MST[rv.UOI4Mutator]MSP[S] break; } id . append ( c ) ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.UOI1Mutator]MSP[N]
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[rv.CRCR3Mutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
buf [ VERSION_INDEX ] = (byte) ( buf [ VERSION_INDEX ] & 0xC7 | ( ( version & 0x7 ) << VERSION_SHIFT ) ) ; } @Override public int getStratum () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ STRATUM_INDEX ] ) ; } @Override
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR3Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ROR1Mutator]MSP[S] {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR5Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.UOI4Mutator]MSP[S]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.OBBN3Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR3Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI2Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.UOI1Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ROR5Mutator]MSP[N] {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override MST[VoidMethodCallMutator]MSP[N] public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override public void setReceiveTimeStamp ( final TimeStamp ts ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ROR4Mutator]MSP[S] {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR2Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.ABSMutator]MSP[S]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.UOI2Mutator]MSP[S] {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR6Mutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
@Override MST[rv.CRCR2Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
@Override MST[rv.UOI4Mutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[InlineConstantMutator]MSP[N]
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[NonVoidMethodCallMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR1Mutator]MSP[N] {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR5Mutator]MSP[N] public void setMode ( final int mode ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.ROR5Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
} @Override MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[N] public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[rv.UOI4Mutator]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + MST[experimental.NakedReceiverMutator]MSP[S] lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.UOI1Mutator]MSP[S] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[NegateConditionalsMutator]MSP[N] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.ABSMutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI1Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN2Mutator]MSP[S] {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[rv.ABSMutator]MSP[S] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR2Mutator]MSP[N]
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[ReturnValsMutator]MSP[N] {
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + MST[NonVoidMethodCallMutator]MSP[N] lr_4 + getVersion () + lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN3Mutator]MSP[N] public void setMode ( final int mode ) {
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.ABSMutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR2Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.OBBN1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[NonVoidMethodCallMutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN3Mutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOD2Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[InlineConstantMutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.ABSMutator]MSP[N] public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) MST[rv.OBBN2Mutator]MSP[S] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
@Override MST[rv.UOI1Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[experimental.NakedReceiverMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR6Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.CRCR3Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR1Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | MST[rv.CRCR6Mutator]MSP[N] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR4Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[InlineConstantMutator]MSP[N]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.CRCR6Mutator]MSP[N] {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR1Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR1Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[MathMutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR2Mutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | MST[InlineConstantMutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.UOI1Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[N]
final int stratum = getStratum () ; MST[EmptyObjectReturnValsMutator]MSP[N] if ( version == VERSION_3 || version == VERSION_4 ) { if ( stratum == 0 || stratum == 1 ) { return idAsString () ; } if ( version == VERSION_4 ) { return idAsHex () ; } }
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.UOI3Mutator]MSP[N]
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[MathMutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOR2Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR6Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR6Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.CRCR3Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.ABSMutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.AOR3Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.UOI4Mutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.UOI3Mutator]MSP[N]
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; MST[NonVoidMethodCallMutator]MSP[S] final DatagramPacket dp = getDatagramPacket () ; dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
} @Override public synchronized DatagramPacket getDatagramPacket () MST[rv.CRCR6Mutator]MSP[S] { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) {
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[NegateConditionalsMutator]MSP[N] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ABSMutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI3Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR2Mutator]MSP[N]
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[rv.CRCR1Mutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.CRCR4Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.CRCR5Mutator]MSP[S]
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[InlineConstantMutator]MSP[S] public TimeStamp getReferenceTimeStamp () {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[ConditionalsBoundaryMutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR2Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[InlineConstantMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | MST[rv.AOD1Mutator]MSP[S] ul ( buf [ index + 3 ] ) << 32 | ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.AOD2Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[VoidMethodCallMutator]MSP[N]
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR5Mutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override public TimeStamp getReferenceTimeStamp () {
return getTimestamp ( REFERENCE_TIMESTAMP_INDEX ) ; } @Override public void setReferenceTime ( final TimeStamp ts ) { setTimestamp ( REFERENCE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getReceiveTimeStamp () { return getTimestamp ( RECEIVE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public void setReceiveTimeStamp ( final TimeStamp ts ) {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[NegateConditionalsMutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR4Mutator]MSP[S] public String getReferenceIdString () { final int version = getVersion () ;
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[rv.CRCR6Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR3Mutator]MSP[S] {
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.CRCR3Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.CRCR5Mutator]MSP[N] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR4Mutator]MSP[N] {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.UOI4Mutator]MSP[N]
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN1Mutator]MSP[N]
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[MathMutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () MST[rv.AOR2Mutator]MSP[N] { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () { final double l = getRootDispersion () ; return l / 65.536 ; }
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.ABSMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.CRCR2Mutator]MSP[N] { final StringBuilder id = new StringBuilder () ;
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override MST[rv.ABSMutator]MSP[N] public int getPoll () { return buf [ POLL_INDEX ] ; } @Override
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.AOD1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.CRCR5Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[rv.OBBN3Mutator]MSP[N] {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[RemoveConditionalMutator_ORDER_ELSE]MSP[N] {
@Override MST[rv.UOI4Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI3Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[InlineConstantMutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
@Override MST[rv.OBBN1Mutator]MSP[N] public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override public void setMode ( final int mode ) {
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () MST[InlineConstantMutator]MSP[N] { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
if ( obj == null || getClass () != obj . getClass () ) { MST[ReturnValsMutator]MSP[N] return false ; } final NtpV3Impl other = ( NtpV3Impl ) obj ; return java . util . Arrays . equals ( buf , other . buf ) ; } @Override public int hashCode ()
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[MathMutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.CRCR6Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.CRCR4Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[InlineConstantMutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
final long i = b & 0xFF ; return i ; } @Override public String toString () { return lr_3 + lr_4 + getVersion () + MST[NonVoidMethodCallMutator]MSP[S] lr_5 + getMode () + lr_6 + getPoll () + lr_7 + getPrecision () + lr_8 + getRootDelay () +
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.OBBN3Mutator]MSP[N] public void setMode ( final int mode ) {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI4Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR5Mutator]MSP[N]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.CRCR1Mutator]MSP[N] public void setMode ( final int mode ) {
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
public void setLeapIndicator ( final int li ) { buf [ LI_INDEX ] = (byte) ( buf [ LI_INDEX ] & 0x3F | ( ( li & 0x3 ) << LI_SHIFT ) ) ; } @Override public int getPoll () { return buf [ POLL_INDEX ] ; } @Override MST[rv.CRCR5Mutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[rv.ROR5Mutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
for ( int i = 3 ; i >= 0 ; i -- ) { buf [ idx + i ] = (byte) ( value & 0xff ) ; value >>>= 8 ; } } private TimeStamp getTimestamp ( final int index ) MST[rv.ABSMutator]MSP[N] {
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[ReturnValsMutator]MSP[N] public TimeStamp getReferenceTimeStamp () {
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI2Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.AOR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.AOR2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( stratum >= 2 ) { return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () MST[rv.UOI4Mutator]MSP[N] { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
len = buf . length ; } System . arraycopy ( incomingBuf , 0 , buf , 0 , len ) ; final DatagramPacket dp = getDatagramPacket () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[S] dp . setAddress ( srcDp . getAddress () ) ; final int port = srcDp . getPort () ;
setTimestamp ( TRANSMIT_TIMESTAMP_INDEX , ts ) ; } @Override public void setOriginateTimeStamp ( final TimeStamp ts ) { setTimestamp ( ORIGINATE_TIMESTAMP_INDEX , ts ) ; } @Override public TimeStamp getOriginateTimeStamp () { return getTimestamp ( ORIGINATE_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR5Mutator]MSP[S] public TimeStamp getReferenceTimeStamp () {
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[rv.UOI1Mutator]MSP[S] public void setMode ( final int mode ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[InlineConstantMutator]MSP[N] {
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override MST[rv.CRCR4Mutator]MSP[N] public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override MST[rv.CRCR3Mutator]MSP[N] public void setTransmitTime ( final TimeStamp ts ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.CRCR3Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
setInt ( ROOT_DISPERSION_INDEX , dispersion ) ; } @Override public long getRootDispersionInMillis () { final long l = getRootDispersion () ; return ( l * 1000 ) / 65536L ; } @Override public double getRootDispersionInMillisDouble () MST[rv.AOR4Mutator]MSP[S] { final double l = getRootDispersion () ; return l / 65.536 ; }
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.OBBN3Mutator]MSP[N] {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.OBBN3Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[NonVoidMethodCallMutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.CRCR4Mutator]MSP[N]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR2Mutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) MST[rv.CRCR1Mutator]MSP[N] {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.CRCR3Mutator]MSP[S] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () MST[rv.UOI2Mutator]MSP[S] { final StringBuilder id = new StringBuilder () ;
ul ( buf [ index + 6 ] ) << 8 | ul ( buf [ index + 7 ] ) ; return i ; } private void setTimestamp ( final int index , final TimeStamp t ) MST[InlineConstantMutator]MSP[S] {
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.UOI2Mutator]MSP[S] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () MST[rv.CRCR4Mutator]MSP[N] { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | MST[rv.UOI4Mutator]MSP[N] ul ( buf [ index + 1 ] ) << 48 |
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[rv.UOI2Mutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
@Override MST[VoidMethodCallMutator]MSP[N] public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ;
if ( stratum >= 2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.UOI1Mutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; MST[rv.UOI2Mutator]MSP[N] for ( int i = 7 ; i >= 0 ; i -- ) { buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () MST[rv.UOI3Mutator]MSP[N] { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override public void setRootDispersion ( final int dispersion ) {
ui ( buf [ index + 1 ] ) << 16 | ui ( buf [ index + 2 ] ) << 8 | ui ( buf [ index + 3 ] ) ; return i ; } private void setInt ( final int idx , int value ) MST[IncrementsMutator]MSP[N] {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[rv.OBBN2Mutator]MSP[N]
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override MST[NegateConditionalsMutator]MSP[N] public void setDatagramPacket ( final DatagramPacket srcDp ) {
} @Override public synchronized DatagramPacket getDatagramPacket () { if ( dp == null ) { dp = new DatagramPacket ( buf , buf . length ) ; dp . setPort ( NTP_PORT ) ; } return dp ; } @Override public void setDatagramPacket ( final DatagramPacket srcDp ) MST[RemoveConditionalMutator_ORDER_IF]MSP[S] {
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[PrimitiveReturnsMutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
if ( stratum >= 2 ) { MST[rv.ROR4Mutator]MSP[S] return idAsIPAddress () ; } return idAsHex () ; } private String idAsIPAddress () { return ui ( buf [ REFERENCE_ID_INDEX ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 1 ] ) + lr_1 +
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 | MST[rv.AOR1Mutator]MSP[N]
public void setPoll ( final int poll ) { buf [ POLL_INDEX ] = (byte) ( poll & 0xFF ) ; } @Override public int getPrecision () { return buf [ PRECISION_INDEX ] ; } @Override public void setPrecision ( final int precision ) MST[rv.OBBN2Mutator]MSP[S] {
public void setStratum ( final int stratum ) MST[rv.CRCR4Mutator]MSP[N] { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) {
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override MST[rv.UOI3Mutator]MSP[S] public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override public String getReferenceIdString () { final int version = getVersion () ; MST[rv.ROR1Mutator]MSP[S]
@Override public void setReferenceId ( final int refId ) { setInt ( REFERENCE_ID_INDEX , refId ) ; } @Override public int getReferenceId () { return getInt ( REFERENCE_ID_INDEX ) ; } @Override MST[rv.ROR5Mutator]MSP[N] public String getReferenceIdString () { final int version = getVersion () ;
return id . toString () ; } private String idAsHex () { return Integer . toHexString ( getReferenceId () ) ; } @Override MST[rv.CRCR2Mutator]MSP[N] public TimeStamp getTransmitTimeStamp () { return getTimestamp ( TRANSMIT_TIMESTAMP_INDEX ) ; } @Override public void setTransmitTime ( final TimeStamp ts ) {
ui ( buf [ REFERENCE_ID_INDEX + 2 ] ) + lr_1 + ui ( buf [ REFERENCE_ID_INDEX + 3 ] ) ; } private String idAsString () { final StringBuilder id = new StringBuilder () ; MST[rv.ABSMutator]MSP[S]
@Override public int getMode () { return ( ui ( buf [ MODE_INDEX ] ) >> MODE_SHIFT ) & 0x7 ; } @Override public String getModeName () { return NtpUtils . getModeName ( getMode () ) ; } @Override MST[InlineConstantMutator]MSP[N] public void setMode ( final int mode ) {
return new TimeStamp ( getLong ( index ) ) ; } private long getLong ( final int index ) MST[InlineConstantMutator]MSP[N] { final long i = ul ( buf [ index ] ) << 56 | ul ( buf [ index + 1 ] ) << 48 |
if ( srcDp == null || srcDp . getLength () < buf . length ) { throw new IllegalArgumentException () ; } final byte [] incomingBuf = srcDp . getData () ; int len = srcDp . getLength () ; if ( len > buf . length ) { MST[rv.CRCR1Mutator]MSP[N]
long ntpTime = ( t == null ) ? 0 : t . ntpValue () ; for ( int i = 7 ; i >= 0 ; i -- ) { MST[rv.OBBN1Mutator]MSP[N] buf [ index + i ] = (byte) ( ntpTime & 0xFF ) ; ntpTime >>>= 8 ; }
buf [ MODE_INDEX ] = (byte) ( buf [ MODE_INDEX ] & 0xF8 | mode & 0x7 ) ; } @Override public int getLeapIndicator () { return ( ui ( buf [ LI_INDEX ] ) >> LI_SHIFT ) & 0x3 ; } @Override MST[InlineConstantMutator]MSP[N]
buf [ PRECISION_INDEX ] = (byte) ( precision & 0xFF ) ; } @Override public int getVersion () MST[rv.UOI1Mutator]MSP[N] { return ( ui ( buf [ VERSION_INDEX ] ) >> VERSION_SHIFT ) & 0x7 ; } @Override public void setVersion ( final int version ) {
ul ( buf [ index + 2 ] ) << 40 | ul ( buf [ index + 3 ] ) << 32 | MST[rv.ABSMutator]MSP[N] ul ( buf [ index + 4 ] ) << 24 | ul ( buf [ index + 5 ] ) << 16 |
setInt ( ROOT_DELAY_INDEX , delay ) ; } @Override public double getRootDelayInMillisDouble () { final double l = getRootDelay () ; return l / 65.536 ; } @Override public int getRootDispersion () { return getInt ( ROOT_DISPERSION_INDEX ) ; } @Override MST[VoidMethodCallMutator]MSP[N] public void setRootDispersion ( final int dispersion ) {
setTimestamp ( RECEIVE_TIMESTAMP_INDEX , ts ) ; } @Override public String getType () { return lr_2 ; } private int getInt ( final int index ) MST[rv.ABSMutator]MSP[N] { final int i = ui ( buf [ index ] ) << 24 |
public void setStratum ( final int stratum ) { buf [ STRATUM_INDEX ] = (byte) ( stratum & 0xFF ) ; } @Override public int getRootDelay () { return getInt ( ROOT_DELAY_INDEX ) ; } @Override public void setRootDelay ( final int delay ) MST[rv.UOI4Mutator]MSP[N] {
