public void addInitializer ( final String name , final BackgroundInitializer < ? > init ) { if ( name == null ) { throw new IllegalArgumentException ( lr_1 ) ; } if ( init == null ) { throw new IllegalArgumentException ( lr_2 ) ; }
synchronized ( this ) { if ( isStarted () ) { throw new IllegalStateException ( lr_3 ) ; } childInitializers . put ( name , init ) ; } } @Override protected int getTaskCount () { int result = 1 ;
for ( final BackgroundInitializer < ? > bi : childInitializers . values () ) { result += bi . getTaskCount () ; } return result ; } @Override protected MultiBackgroundInitializerResults initialize () throws Exception { Map < String , BackgroundInitializer < ? > > inits ;
synchronized ( this ) { inits = new HashMap < String , BackgroundInitializer < ? > > ( childInitializers ) ; } final ExecutorService exec = getActiveExecutor () ; for ( final BackgroundInitializer < ? > bi : inits . values () ) {
if ( bi . getExternalExecutor () == null ) { bi . setExternalExecutor ( exec ) ; } bi . start () ; } final Map < String , Object > results = new HashMap < String , Object > () ;
final Map < String , ConcurrentException > excepts = new HashMap < String , ConcurrentException > () ; for ( final Map . Entry < String , BackgroundInitializer < ? > > e : inits . entrySet () ) { try {
results . put ( e . getKey () , e . getValue () . get () ) ; } catch ( final ConcurrentException cex ) { excepts . put ( e . getKey () , cex ) ; } }
return new MultiBackgroundInitializerResults ( inits , results , excepts ) ; } public BackgroundInitializer < ? > getInitializer ( final String name ) { return checkName ( name ) ; } public Object getResultObject ( final String name ) { checkName ( name ) ;
return resultObjects . get ( name ) ; } public boolean isException ( final String name ) { checkName ( name ) ; return exceptions . containsKey ( name ) ; } public ConcurrentException getException ( final String name ) { checkName ( name ) ;
return exceptions . get ( name ) ; } public Set < String > initializerNames () { return Collections . unmodifiableSet ( initializers . keySet () ) ; } public boolean isSuccessful () { return exceptions . isEmpty () ; }
private BackgroundInitializer < ? > checkName ( final String name ) { final BackgroundInitializer < ? > init = initializers . get ( name ) ; if ( init == null ) { throw new NoSuchElementException ( lr_4 + name ) ; } return init ; }
