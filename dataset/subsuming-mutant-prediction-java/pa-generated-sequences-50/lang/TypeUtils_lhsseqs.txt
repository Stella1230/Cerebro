if ( type instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR5Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR5Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return buf . toString () ; MST[NonVoidMethodCallMutator]MSP[] } private static String typeVariableToString ( final TypeVariable < ? > v ) { final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] for ( final Type bound : upperBounds ) {
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR5Mutator]MSP[] return null ; }
if ( type instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( t1 instanceof WildcardType ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( t1 instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[NonVoidMethodCallMutator]MSP[] if ( midType instanceof Class < ? > ) {
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR5Mutator]MSP[]
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; MST[ReturnValsMutator]MSP[] } if ( toType instanceof GenericArrayType ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; } } return true ; MST[InlineConstantMutator]MSP[] } return false ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[InlineConstantMutator]MSP[] }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR5Mutator]MSP[] final Type ... typeArguments ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return null ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[rv.CRCR3Mutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[]
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { MST[NonVoidMethodCallMutator]MSP[] return null ; }
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[InlineConstantMutator]MSP[]
if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[NegateConditionalsMutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[NegateConditionalsMutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[rv.ROR1Mutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[rv.ROR5Mutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
parameterizedTypeArguments = new HashMap < TypeVariable < ? > , Type > ( typeArguments ) ; parameterizedTypeArguments . putAll ( TypeUtils . getTypeArguments ( p ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } final Type [] args = p . getActualTypeArguments () ;
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI2Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; MST[ReturnValsMutator]MSP[] } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[rv.ROR2Mutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI2Mutator]MSP[]
if ( toParameterizedType . equals ( type ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[NegateConditionalsMutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ROR1Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[ReturnValsMutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.ROR4Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR4Mutator]MSP[] + type ) ; } return replacementType ; }
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static String toString ( final Type type ) { MST[rv.CRCR5Mutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[rv.ROR1Mutator]MSP[] } } return true ; } return false ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR1Mutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[rv.CRCR6Mutator]MSP[] types . add ( type1 ) ; } }
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR2Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ROR1Mutator]MSP[]
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; MST[EmptyObjectReturnValsMutator]MSP[] }
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR4Mutator]MSP[]
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[rv.ROR5Mutator]MSP[] } } return false ; }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } MST[ArgumentPropagationMutator]MSP[] break; } while ( true ); return result ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
final TypeVariable < ? > typeVar = entry . getKey () ; final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) , MST[NonVoidMethodCallMutator]MSP[]
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR5Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
useOwner = raw . getEnclosingClass () ; } else { MST[InlineConstantMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[NullReturnValsMutator]MSP[] if ( typeArguments == null ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI4Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[rv.CRCR6Mutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI1Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR6Mutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { MST[NegateConditionalsMutator]MSP[] return true ; } if ( toParameterizedType == null ) { return false ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[NonVoidMethodCallMutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR6Mutator]MSP[] }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[ReturnValsMutator]MSP[] }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[rv.ROR1Mutator]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[]
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.UOI1Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[InlineConstantMutator]MSP[] } else if ( owner == null ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR6Mutator]MSP[] if ( t1 . length == t2 . length ) {
return buf . toString () ; MST[rv.CRCR5Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ROR2Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[ArgumentPropagationMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[NegateConditionalsMutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.ROR5Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI2Mutator]MSP[] return false ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR3Mutator]MSP[]
midClass = ( Class < ? > ) midType ; } else { MST[rv.ROR1Mutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.ROR1Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[ArgumentPropagationMutator]MSP[] } else if ( owner == null ) {
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR3Mutator]MSP[] } while ( true ); return result ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR2Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( type instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[]
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[rv.ROR3Mutator]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[rv.CRCR6Mutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[rv.ROR2Mutator]MSP[]
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[NegateConditionalsMutator]MSP[] } } return false ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[NegateConditionalsMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
useOwner = raw . getEnclosingClass () ; } else { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[ReturnValsMutator]MSP[] if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[rv.ROR5Mutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[ArgumentPropagationMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[rv.CRCR1Mutator]MSP[]
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ROR5Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[rv.CRCR5Mutator]MSP[] typeVarAssigns ) ) {
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[rv.ROR2Mutator]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ; MST[NonVoidMethodCallMutator]MSP[]
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[] return false ; } } return true ; }
return cls . isArray () MST[rv.ROR2Mutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI1Mutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR1Mutator]MSP[] }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; for ( final Type type1 : bounds ) { MST[ReturnValsMutator]MSP[] boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR4Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[experimental.NakedReceiverMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
for ( int i = 0 ; i < typeParams . length ; i ++ ) { MST[NonVoidMethodCallMutator]MSP[] final Type typeArg = typeArgs [ i ] ; typeVarAssigns . put ( typeParams [ i ] , typeVarAssigns . containsKey ( typeArg ) ? typeVarAssigns
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[rv.CRCR1Mutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; MST[rv.CRCR5Mutator]MSP[] break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; } return replacementType ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return new GenericArrayTypeImpl ( Validate . notNull ( componentType , lr_20 ) ) ; } @SuppressWarnings ( lr_1 ) MST[BooleanTrueReturnValsMutator]MSP[] public static boolean equals ( final Type t1 , final Type t2 ) { if ( ObjectUtils . equals ( t1 , t2 ) ) { return true ; }
return null ; } if ( cls . isPrimitive () ) { MST[NegateConditionalsMutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[NonVoidMethodCallMutator]MSP[]
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[rv.ROR2Mutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[InlineConstantMutator]MSP[] }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR5Mutator]MSP[] final Type ... typeArguments ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[ArgumentPropagationMutator]MSP[]
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass MST[NonVoidMethodCallMutator]MSP[] . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[rv.ROR4Mutator]MSP[] }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR4Mutator]MSP[] if ( assigningType == null ) { return null ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI4Mutator]MSP[] } return null ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR3Mutator]MSP[]
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI2Mutator]MSP[] return false ; } } return true ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( toParameterizedType . equals ( type ) ) { MST[rv.ROR2Mutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.ABSMutator]MSP[] return false ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI4Mutator]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[rv.ROR3Mutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI2Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI1Mutator]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[NegateConditionalsMutator]MSP[] if ( typeArguments == null ) {
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[]
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[rv.ROR3Mutator]MSP[]
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[rv.ROR4Mutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[InlineConstantMutator]MSP[] if ( typeArguments == null ) {
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[NonVoidMethodCallMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[NonVoidMethodCallMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( typeArguments == null ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[rv.ROR3Mutator]MSP[] } else {
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[rv.ROR1Mutator]MSP[] } } return false ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR5Mutator]MSP[] if ( t1 . length == t2 . length ) {
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI1Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ABSMutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR3Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.UOI1Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return equals ( ( WildcardType ) t1 , t2 ) ; MST[ReturnValsMutator]MSP[] } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[ArgumentPropagationMutator]MSP[] final Type ... typeArguments ) {
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR1Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
typeVarAssigns ) ) { return false ; } } } return true ; } private static Class < ? > getRawType ( final ParameterizedType parameterizedType ) { final Type rawType = parameterizedType . getRawType () ; if ( ! ( rawType instanceof Class < ? > ) ) { MST[NonVoidMethodCallMutator]MSP[]
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; MST[ConstructorCallMutator]MSP[] }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[rv.ROR5Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; } } return true ; MST[rv.CRCR3Mutator]MSP[] } return false ; }
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { MST[ConstructorCallMutator]MSP[] buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; buf . append ( '>' ) ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI2Mutator]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NegateConditionalsMutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[NonVoidMethodCallMutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI1Mutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[ConditionalsBoundaryMutator]MSP[] if ( typeArguments == null ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[rv.ROR4Mutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR2Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR3Mutator]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[rv.ROR1Mutator]MSP[] } else {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[ReturnValsMutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[InlineConstantMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[InlineConstantMutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI2Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[rv.CRCR3Mutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR2Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[InlineConstantMutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[rv.ROR5Mutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type ... types ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notEmpty ( Validate . noNullElements ( types ) ) ; if ( types . length > 0 ) {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR1Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR2Mutator]MSP[] } }
if ( cls . equals ( superClass ) ) { MST[rv.ROR1Mutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.ABSMutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
&& typeVarAssigns . containsKey ( typeVar ) ) { MST[rv.UOI4Mutator]MSP[] typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; } } }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI3Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR3Mutator]MSP[]
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI4Mutator]MSP[] return false ; }
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return wildcardType () . withUpperBounds ( unrollBounds ( typeArguments , wild . getUpperBounds () ) ) MST[NonVoidMethodCallMutator]MSP[] . withLowerBounds ( unrollBounds ( typeArguments , wild . getLowerBounds () ) ) . build () ; } } return type ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR2Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.ROR3Mutator]MSP[] }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[NegateConditionalsMutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[NegateConditionalsMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI3Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[rv.CRCR3Mutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[InlineConstantMutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[rv.ROR3Mutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass MST[ReturnValsMutator]MSP[] . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) {
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ROR2Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ROR5Mutator]MSP[] if ( typeArguments == null ) {
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; } return replacementType ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[rv.CRCR4Mutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR1Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.CRCR5Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR1Mutator]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[]
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.ROR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.ABSMutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.ROR4Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[ReturnValsMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[ArgumentPropagationMutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR2Mutator]MSP[]
return buf . toString () ; MST[ConditionalsBoundaryMutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[rv.ROR4Mutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR6Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[rv.ROR4Mutator]MSP[]
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[rv.ROR3Mutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } return true ; } return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR3Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.ROR3Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[]
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.ABSMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return equals ( ( WildcardType ) t1 , t2 ) ; MST[NonVoidMethodCallMutator]MSP[] } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return null ; } if ( cls . isPrimitive () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
} if ( genericInterface != null ) { MST[rv.ROR3Mutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR3Mutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[InlineConstantMutator]MSP[]
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[rv.CRCR3Mutator]MSP[] } else if ( owner == null ) {
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[NegateConditionalsMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR3Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[ReturnValsMutator]MSP[]
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; MST[NullReturnValsMutator]MSP[] } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
private static boolean equals ( final GenericArrayType a , final Type t ) { MST[rv.CRCR5Mutator]MSP[] return t instanceof GenericArrayType && equals ( a . getGenericComponentType () , ( ( GenericArrayType ) t ) . getGenericComponentType () ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[InlineConstantMutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[ReturnValsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[BooleanTrueReturnValsMutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ROR1Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR1Mutator]MSP[]
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[ReturnValsMutator]MSP[] }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
typeArguments = Collections . < TypeVariable < ? > , Type > emptyMap () ; } if ( containsTypeVariables ( type ) ) { if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR5Mutator]MSP[] return unrollVariables ( typeArguments , typeArguments . get ( type ) ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR6Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI3Mutator]MSP[]
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ABSMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR5Mutator]MSP[] }
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR4Mutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[rv.CRCR6Mutator]MSP[] }
return buf . toString () ; MST[NonVoidMethodCallMutator]MSP[] } private static String typeVariableToString ( final TypeVariable < ? > v ) { final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
final TypeVariable < ? > typeVar = entry . getKey () ; MST[ArgumentPropagationMutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
if ( fromTypeVarAssigns == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[]
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[ReturnValsMutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI3Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR5Mutator]MSP[]
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[ArgumentPropagationMutator]MSP[] final Type ... typeArguments ) {
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI2Mutator]MSP[]
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () MST[rv.ROR5Mutator]MSP[] : isAssignable ( value . getClass () , type , null ) ; }
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[NegateConditionalsMutator]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[ReturnValsMutator]MSP[] return false ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
Class < ? > c = ( Class < ? > ) d ; while ( true ) { MST[NonVoidMethodCallMutator]MSP[] if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[IncrementsMutator]MSP[]
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; MST[NonVoidMethodCallMutator]MSP[] } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
if ( t1 instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.CRCR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[experimental.NakedReceiverMutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI3Mutator]MSP[] } return null ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR1Mutator]MSP[] }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t1 . length == t2 . length ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[experimental.NakedReceiverMutator]MSP[]
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.CRCR1Mutator]MSP[]
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[rv.ROR1Mutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR3Mutator]MSP[] + type ) ; } return replacementType ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[ReturnValsMutator]MSP[] if ( t1 . length == t2 . length ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( toType instanceof GenericArrayType ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR6Mutator]MSP[] }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR6Mutator]MSP[] final Type ... typeArguments ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR3Mutator]MSP[] }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[NegateConditionalsMutator]MSP[]
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[rv.ROR5Mutator]MSP[]
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; for ( final Type type1 : bounds ) { MST[NullReturnValsMutator]MSP[] boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ABSMutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[NonVoidMethodCallMutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[BooleanFalseReturnValsMutator]MSP[] return false ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[rv.ROR5Mutator]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > () MST[NonVoidMethodCallMutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI3Mutator]MSP[] return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[InlineConstantMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[rv.ROR5Mutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
if ( toParameterizedType . equals ( type ) ) { return true ; MST[ReturnValsMutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
public static String toString ( final Type type ) { MST[rv.CRCR6Mutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR2Mutator]MSP[]
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[ArgumentPropagationMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[ConditionalsBoundaryMutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[rv.CRCR5Mutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[rv.ROR3Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } else {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI1Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI2Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR6Mutator]MSP[] return null ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { MST[ReturnValsMutator]MSP[] return null ; }
typeArguments = Collections . < TypeVariable < ? > , Type > emptyMap () ; } if ( containsTypeVariables ( type ) ) { if ( type instanceof TypeVariable < ? > ) { MST[NegateConditionalsMutator]MSP[] return unrollVariables ( typeArguments , typeArguments . get ( type ) ) ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NullReturnValsMutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[NonVoidMethodCallMutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[rv.ROR1Mutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR2Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[ReturnValsMutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[NegateConditionalsMutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[NegateConditionalsMutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
if ( toClass . equals ( cls ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ROR1Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR4Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[rv.CRCR1Mutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[NegateConditionalsMutator]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[NonVoidMethodCallMutator]MSP[] }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[ConditionalsBoundaryMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR5Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[NonVoidMethodCallMutator]MSP[] } } }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR6Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[rv.ROR5Mutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[]
if ( type instanceof WildcardType ) { MST[NonVoidMethodCallMutator]MSP[] for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR1Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR2Mutator]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI4Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[rv.ROR2Mutator]MSP[] } else {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[rv.CRCR6Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR5Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
typeArguments = Collections . < TypeVariable < ? > , Type > emptyMap () ; } if ( containsTypeVariables ( type ) ) { if ( type instanceof TypeVariable < ? > ) { return unrollVariables ( typeArguments , typeArguments . get ( type ) ) ; MST[NonVoidMethodCallMutator]MSP[] }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[rv.CRCR5Mutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[BooleanFalseReturnValsMutator]MSP[] return false ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[NegateConditionalsMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[NegateConditionalsMutator]MSP[] }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[NegateConditionalsMutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.CRCR1Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR3Mutator]MSP[] if ( t1 . length == t2 . length ) {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[ReturnValsMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; MST[NonVoidMethodCallMutator]MSP[] }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; MST[ReturnValsMutator]MSP[] } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
if ( containsTypeVariables ( arg ) ) { MST[InlineConstantMutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR1Mutator]MSP[] } }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR2Mutator]MSP[] } while ( true ); return result ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NegateConditionalsMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.CRCR6Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
midClass = ( Class < ? > ) midType ; } else { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[ArgumentPropagationMutator]MSP[] return null ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[NegateConditionalsMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
public static String toString ( final Type type ) { MST[BooleanTrueReturnValsMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
if ( t1 instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[rv.ROR2Mutator]MSP[] } else {
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI2Mutator]MSP[] return false ; } } return true ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[rv.CRCR2Mutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[rv.ROR1Mutator]MSP[]
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR6Mutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[rv.ROR5Mutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.CRCR1Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return cls . isArray () MST[rv.ROR3Mutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI2Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR2Mutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[NonVoidMethodCallMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[InlineConstantMutator]MSP[] }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[rv.ROR1Mutator]MSP[]
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[rv.CRCR4Mutator]MSP[] typeVarAssigns ) ) {
private static boolean equals ( final GenericArrayType a , final Type t ) { MST[InlineConstantMutator]MSP[] return t instanceof GenericArrayType && equals ( a . getGenericComponentType () , ( ( GenericArrayType ) t ) . getGenericComponentType () ) ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR1Mutator]MSP[]
if ( fromTypeVarAssigns == null ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR3Mutator]MSP[] if ( assigningType == null ) { return null ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.ROR4Mutator]MSP[] }
if ( type instanceof Class < ? > ) { MST[rv.ROR1Mutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR5Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR4Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR6Mutator]MSP[] final Type ... typeArguments ) {
&& typeVarAssigns . containsKey ( typeVar ) ) { MST[rv.UOI3Mutator]MSP[] typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; } } }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR6Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( type instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR3Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( fromTypeVarAssigns == null ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[NonVoidMethodCallMutator]MSP[] }
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[rv.ROR5Mutator]MSP[] if ( midType instanceof Class < ? > ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[NullReturnValsMutator]MSP[] }
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.ABSMutator]MSP[] } else if ( midType instanceof Class < ? > ) {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( cls . equals ( superClass ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[rv.CRCR3Mutator]MSP[]
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[] return false ; } } return true ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[ArgumentPropagationMutator]MSP[]
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[NegateConditionalsMutator]MSP[] if ( midType instanceof Class < ? > ) {
if ( useOwner instanceof Class < ? > ) { buf . append ( ( ( Class < ? > ) useOwner ) . getName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[] buf . append ( useOwner . toString () ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[rv.ROR5Mutator]MSP[] }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass MST[NullReturnValsMutator]MSP[] . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) {
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR2Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.ROR2Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } }
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[ArgumentPropagationMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () MST[NegateConditionalsMutator]MSP[] : isAssignable ( value . getClass () , type , null ) ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI2Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return buf . toString () ; MST[InlineConstantMutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[rv.ROR2Mutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.ABSMutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[rv.ROR2Mutator]MSP[] return true ; }
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[rv.ROR4Mutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI2Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; MST[ReturnValsMutator]MSP[] } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[rv.CRCR3Mutator]MSP[] typeVarAssigns ) ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR5Mutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR3Mutator]MSP[] }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return cls . isArray () MST[rv.ROR4Mutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; MST[NullReturnValsMutator]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[rv.ROR2Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR4Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ROR3Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[ConditionalsBoundaryMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; MST[rv.CRCR3Mutator]MSP[] break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.ROR5Mutator]MSP[] }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[BooleanFalseReturnValsMutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ABSMutator]MSP[] if ( t1 . length == t2 . length ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR2Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[NonVoidMethodCallMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR3Mutator]MSP[] } }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR5Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[rv.ROR1Mutator]MSP[]
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI1Mutator]MSP[]
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI4Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return buf . toString () ; MST[experimental.NakedReceiverMutator]MSP[] } private static String typeVariableToString ( final TypeVariable < ? > v ) { final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.CRCR3Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR4Mutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[NegateConditionalsMutator]MSP[] } } }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[ReturnValsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR5Mutator]MSP[] } while ( true ); return result ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[ArgumentPropagationMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[BooleanFalseReturnValsMutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[rv.ROR3Mutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[NonVoidMethodCallMutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.ABSMutator]MSP[] } return null ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
final TypeVariable < ? > typeVar = entry . getKey () ; final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { MST[NonVoidMethodCallMutator]MSP[] if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[rv.ROR2Mutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } if ( toParameterizedType == null ) { return false ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ABSMutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.CRCR6Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[NonVoidMethodCallMutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } return false ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.CRCR6Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[rv.ROR3Mutator]MSP[] } } return false ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[NegateConditionalsMutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[NegateConditionalsMutator]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
return null ; } if ( cls . isPrimitive () ) { MST[rv.ROR4Mutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI4Mutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI3Mutator]MSP[]
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR3Mutator]MSP[]
buf . append ( toString ( types [ 0 ] ) ) ; for ( int i = 1 ; i < types . length ; i ++ ) { MST[NonVoidMethodCallMutator]MSP[] buf . append ( sep ) . append ( toString ( types [ i ] ) ) ; } }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR6Mutator]MSP[] final Type ... typeArguments ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR5Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[RemoveConditionalMutator_ORDER_IF]MSP[]
} if ( genericInterface != null ) { MST[rv.ROR2Mutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[NegateConditionalsMutator]MSP[] return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; MST[NegateConditionalsMutator]MSP[] if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ;
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { MST[NonVoidMethodCallMutator]MSP[] final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null && ! toTypeArg . equals ( fromTypeArg )
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return isAssignable ( type , ( Class < ? > ) toType ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ABSMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[ArgumentPropagationMutator]MSP[]
if ( useOwner instanceof Class < ? > ) { buf . append ( ( ( Class < ? > ) useOwner ) . getName () ) ; MST[NonVoidMethodCallMutator]MSP[] } else { buf . append ( useOwner . toString () ) ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[NonVoidMethodCallMutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR4Mutator]MSP[] if ( t1 . length == t2 . length ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[NegateConditionalsMutator]MSP[]
return buf . toString () ; MST[rv.UOI1Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[rv.CRCR6Mutator]MSP[]
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI1Mutator]MSP[] return false ; } } return true ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { MST[NullReturnValsMutator]MSP[] return null ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ABSMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return true ; } return false ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI1Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.UOI2Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( toParameterizedType . equals ( type ) ) { return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ; MST[ArgumentPropagationMutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI4Mutator]MSP[]
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR2Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[InlineConstantMutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR1Mutator]MSP[] }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[InlineConstantMutator]MSP[] return null ; }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR3Mutator]MSP[] final Type ... typeArguments ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR5Mutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean containsTypeVariables ( final Type type ) { MST[InlineConstantMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR1Mutator]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI2Mutator]MSP[] } return null ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR1Mutator]MSP[]
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( type instanceof GenericArrayType ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[NonVoidMethodCallMutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR3Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( type instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
return types . toArray ( new Type [ types . size () ] ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
return null ; } if ( cls . isPrimitive () ) { MST[rv.ROR1Mutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[rv.ROR4Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.CRCR6Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[NegateConditionalsMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type ... types ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notEmpty ( Validate . noNullElements ( types ) ) ; if ( types . length > 0 ) {
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR1Mutator]MSP[]
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR1Mutator]MSP[] return null ; }
if ( type instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR2Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR3Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[InlineConstantMutator]MSP[]
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[rv.ROR5Mutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.ABSMutator]MSP[] } else if ( midType instanceof Class < ? > ) {
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[rv.CRCR5Mutator]MSP[] types . add ( type1 ) ; } }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[rv.ROR5Mutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[rv.ROR1Mutator]MSP[]
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[rv.CRCR5Mutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[BooleanTrueReturnValsMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR2Mutator]MSP[]
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR6Mutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[NonVoidMethodCallMutator]MSP[] }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR1Mutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[experimental.NakedReceiverMutator]MSP[]
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR4Mutator]MSP[] } } return null ; }
buf . append ( '.' ) . append ( raw . getSimpleName () ) ; MST[NonVoidMethodCallMutator]MSP[] } appendAllTo ( buf . append ( '<' ) , lr_22 , typeArguments ) . append ( '>' ) ; return buf . toString () ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[rv.CRCR5Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && ! toTypeArg . equals ( fromTypeArg )
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( toParameterizedType . equals ( type ) ) { return true ; MST[rv.CRCR2Mutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR5Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[rv.ROR1Mutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { MST[rv.ROR5Mutator]MSP[] return false ; } if ( toClass . equals ( type ) ) { return true ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; MST[NonVoidMethodCallMutator]MSP[] if ( typeVarList . contains ( typeArg )
if ( type instanceof WildcardType ) { MST[BooleanTrueReturnValsMutator]MSP[] for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[ArgumentPropagationMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[InlineConstantMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[rv.ROR3Mutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
} if ( genericInterface != null ) { MST[rv.ROR5Mutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[rv.CRCR5Mutator]MSP[] } else if ( owner == null ) {
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[rv.CRCR6Mutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR1Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[rv.ROR2Mutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[VoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[BooleanTrueReturnValsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR6Mutator]MSP[] }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
public static < T > Typed < T > wrap ( final Class < T > type ) { return TypeUtils . <T > wrap ( ( Type ) type ) ; } private static String classToString ( final Class < ? > c ) { MST[NullReturnValsMutator]MSP[]
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[BooleanFalseReturnValsMutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[rv.ROR3Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[rv.ROR3Mutator]MSP[] return true ; }
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( midType instanceof Class < ? > ) {
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , MST[ArgumentPropagationMutator]MSP[] toClass , typeVarAssigns ) ;
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[NonVoidMethodCallMutator]MSP[] return null ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[NonVoidMethodCallMutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI3Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI2Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI4Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( toType instanceof TypeVariable < ? > ) {
return wildcardType () . withUpperBounds ( unrollBounds ( typeArguments , wild . getUpperBounds () ) ) MST[NonVoidMethodCallMutator]MSP[] . withLowerBounds ( unrollBounds ( typeArguments , wild . getLowerBounds () ) ) . build () ; } } return type ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[rv.ROR1Mutator]MSP[]
public static String toString ( final Type type ) { MST[rv.CRCR3Mutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.CRCR5Mutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { MST[ReturnValsMutator]MSP[] return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) {
useOwner = raw . getEnclosingClass () ; MST[rv.ROR5Mutator]MSP[] } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[experimental.NakedReceiverMutator]MSP[]
if ( lowerBounds . length > 1 || lowerBounds . length == 1 && lowerBounds [ 0 ] != null ) { appendAllTo ( buf . append ( lr_25 ) , lr_24 , lowerBounds ) ; MST[EmptyObjectReturnValsMutator]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR1Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[rv.ROR5Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[ReturnValsMutator]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[rv.ROR1Mutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[rv.ROR5Mutator]MSP[] buf . append ( '>' ) ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } MST[NonVoidMethodCallMutator]MSP[] return getRawType ( typeArgument , assigningType ) ;
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.UOI3Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; MST[NegateConditionalsMutator]MSP[] useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[ReturnValsMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[InlineConstantMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[rv.ROR2Mutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
parameterizedTypeArguments = new HashMap < TypeVariable < ? > , Type > ( typeArguments ) ; parameterizedTypeArguments . putAll ( TypeUtils . getTypeArguments ( p ) ) ; MST[NegateConditionalsMutator]MSP[] } final Type [] args = p . getActualTypeArguments () ;
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[] return false ; } } return true ; }
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; MST[ReturnValsMutator]MSP[] } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[NegateConditionalsMutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[InlineConstantMutator]MSP[] typeVarAssigns ) ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI4Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR5Mutator]MSP[]
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR3Mutator]MSP[]
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI2Mutator]MSP[]
if ( toParameterizedType . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[rv.ROR1Mutator]MSP[]
midClass = ( Class < ? > ) midType ; } else { MST[NegateConditionalsMutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[] return false ; } } return true ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR5Mutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR5Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.UOI3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[rv.ROR3Mutator]MSP[]
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[rv.CRCR2Mutator]MSP[] types . add ( type1 ) ; } }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[InlineConstantMutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[EmptyObjectReturnValsMutator]MSP[]
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR3Mutator]MSP[]
for ( final Type midType : interfaceTypes ) { MST[NonVoidMethodCallMutator]MSP[] Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; } else if ( midType instanceof Class < ? > ) {
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[rv.ROR2Mutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR4Mutator]MSP[]
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[NonVoidMethodCallMutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( t1 . length == t2 . length ) {
if ( type instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[rv.ROR2Mutator]MSP[]
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.CRCR3Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR5Mutator]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.CRCR2Mutator]MSP[] return false ; }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR1Mutator]MSP[] return null ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[NegateConditionalsMutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR5Mutator]MSP[] if ( t1 . length == t2 . length ) {
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR1Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
return buf . toString () ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[rv.CRCR3Mutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[rv.CRCR3Mutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR2Mutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[rv.ROR3Mutator]MSP[]
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR3Mutator]MSP[]
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[BooleanFalseReturnValsMutator]MSP[] }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[rv.ROR3Mutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[NonVoidMethodCallMutator]MSP[]
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass MST[ArgumentPropagationMutator]MSP[] . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[ArgumentPropagationMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( containsTypeVariables ( arg ) ) { MST[NegateConditionalsMutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[rv.ROR1Mutator]MSP[] } } }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.CRCR5Mutator]MSP[] if ( typeArguments == null ) {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[NegateConditionalsMutator]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( toWildcardType . equals ( type ) ) { MST[NegateConditionalsMutator]MSP[] return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[RemoveConditionalMutator_ORDER_IF]MSP[] if ( typeArguments == null ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.ABSMutator]MSP[] } return null ; }
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[NonVoidMethodCallMutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.ROR1Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[ArgumentPropagationMutator]MSP[] }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.ABSMutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR4Mutator]MSP[] if ( t1 . length == t2 . length ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.ROR4Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI1Mutator]MSP[]
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[NegateConditionalsMutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return buf . toString () ; MST[rv.ROR5Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR3Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ;
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[NegateConditionalsMutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; MST[ArgumentPropagationMutator]MSP[] } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI2Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
midClass = ( Class < ? > ) midType ; } else { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toWildcardType . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[rv.ROR3Mutator]MSP[] if ( midType instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( cls . equals ( superClass ) ) { MST[NonVoidMethodCallMutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[NegateConditionalsMutator]MSP[] }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR6Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[ArgumentPropagationMutator]MSP[] if ( typeArguments == null ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.CRCR5Mutator]MSP[] return false ; }
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.CRCR6Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ; MST[ReturnValsMutator]MSP[]
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[ArgumentPropagationMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[rv.CRCR6Mutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR5Mutator]MSP[] if ( assigningType == null ) { return null ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[rv.CRCR5Mutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ; MST[NegateConditionalsMutator]MSP[]
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } while ( true ); return result ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[ReturnValsMutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[rv.CRCR3Mutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
buf . append ( '.' ) . append ( raw . getSimpleName () ) ; MST[NonVoidMethodCallMutator]MSP[] } appendAllTo ( buf . append ( '<' ) , lr_22 , typeArguments ) . append ( '>' ) ; return buf . toString () ; }
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR2Mutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[rv.CRCR6Mutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[EmptyObjectReturnValsMutator]MSP[]
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ROR2Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[rv.ROR5Mutator]MSP[]
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[rv.ROR1Mutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
if ( type instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[InlineConstantMutator]MSP[] }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null && ! toTypeArg . equals ( fromTypeArg )
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[rv.ROR5Mutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return buf . toString () ; MST[rv.CRCR6Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
return cls . isArray () MST[NegateConditionalsMutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[NegateConditionalsMutator]MSP[] return false ; }
if ( type instanceof Class < ? > ) { MST[rv.ROR3Mutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI3Mutator]MSP[] if ( t1 . length == t2 . length ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI2Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[]
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.ROR5Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[experimental.NakedReceiverMutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[rv.ROR4Mutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR1Mutator]MSP[] }
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[rv.ROR2Mutator]MSP[] } } return false ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[rv.ROR3Mutator]MSP[] } else {
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI2Mutator]MSP[]
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[ArgumentPropagationMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR6Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[NonVoidMethodCallMutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
if ( type instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } }
for ( int i = 0 ; i < typeParams . length ; i ++ ) { final Type typeArg = typeArgs [ i ] ; MST[NonVoidMethodCallMutator]MSP[] typeVarAssigns . put ( typeParams [ i ] , typeVarAssigns . containsKey ( typeArg ) ? typeVarAssigns
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[rv.CRCR1Mutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[NonVoidMethodCallMutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[]
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR5Mutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[rv.ROR2Mutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; MST[NonVoidMethodCallMutator]MSP[] } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; final Class < ? > midClass = getRawType ( midParameterizedType ) ;
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; MST[NonVoidMethodCallMutator]MSP[] }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR2Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[NegateConditionalsMutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ROR1Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[ReturnValsMutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
return buf . toString () ; MST[rv.ROR2Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.ROR2Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return null ; } if ( cls . isPrimitive () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR5Mutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
if ( type instanceof TypeVariable < ? > ) { MST[NegateConditionalsMutator]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[rv.CRCR4Mutator]MSP[] }
useOwner = raw . getEnclosingClass () ; } else { MST[InlineConstantMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[NonVoidMethodCallMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[InlineConstantMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[] return false ; } } return true ; }
static Map < TypeVariable < ? > , Type > getTypeArguments ( final ParameterizedType type ) { MST[NullReturnValsMutator]MSP[] return getTypeArguments ( type , getRawType ( type ) , null ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[rv.ROR4Mutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; MST[NonVoidMethodCallMutator]MSP[] } return replacementType ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[rv.CRCR3Mutator]MSP[] }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[NegateConditionalsMutator]MSP[] } } return null ; }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR5Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR2Mutator]MSP[] + type ) ; } return replacementType ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] toComponentType , typeVarAssigns ) ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI1Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[NonVoidMethodCallMutator]MSP[]
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[ReturnValsMutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR1Mutator]MSP[] } } return null ; }
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[rv.ROR4Mutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[rv.CRCR1Mutator]MSP[]
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR4Mutator]MSP[] } while ( true ); return result ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ABSMutator]MSP[] if ( typeArguments == null ) {
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[rv.CRCR6Mutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
if ( cls . equals ( superClass ) ) { MST[rv.ROR5Mutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[InlineConstantMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[ConstructorCallMutator]MSP[]
typeArguments = Collections . < TypeVariable < ? > , Type > emptyMap () ; } if ( containsTypeVariables ( type ) ) { if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return unrollVariables ( typeArguments , typeArguments . get ( type ) ) ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ABSMutator]MSP[]
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI3Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.CRCR2Mutator]MSP[] return false ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[NonVoidMethodCallMutator]MSP[] if ( t1 . length == t2 . length ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.ROR2Mutator]MSP[] }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR4Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( fromTypeVarAssigns == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR5Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
public static String toString ( final Type type ) { MST[EmptyObjectReturnValsMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[rv.ROR4Mutator]MSP[] } } }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI4Mutator]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ROR1Mutator]MSP[] if ( typeArguments == null ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[InlineConstantMutator]MSP[] if ( t1 . length == t2 . length ) {
return parameterizeWithOwner ( p . getOwnerType () , ( Class < ? > ) p . getRawType () , args ) ; MST[rv.ROR5Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( cls . equals ( superClass ) ) { MST[rv.ROR2Mutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[NonVoidMethodCallMutator]MSP[] return false ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.CRCR3Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ABSMutator]MSP[] if ( t1 . length == t2 . length ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.ROR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[NonVoidMethodCallMutator]MSP[] final Type ... typeArguments ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI4Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.CRCR5Mutator]MSP[] return false ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[rv.ROR4Mutator]MSP[] }
if ( toGenericArrayType . equals ( type ) ) { MST[NegateConditionalsMutator]MSP[] return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ROR4Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( t1 instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NegateConditionalsMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR4Mutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ROR4Mutator]MSP[] if ( typeArguments == null ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.ROR2Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; } } return true ; MST[BooleanTrueReturnValsMutator]MSP[] } return false ; }
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[NegateConditionalsMutator]MSP[]
final TypeVariable < ? > typeVar = entry . getKey () ; MST[rv.CRCR5Mutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
buf . append ( toString ( types [ 0 ] ) ) ; for ( int i = 1 ; i < types . length ; i ++ ) { MST[BooleanTrueReturnValsMutator]MSP[] buf . append ( sep ) . append ( toString ( types [ i ] ) ) ; } }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[InlineConstantMutator]MSP[] final Type ... typeArguments ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR5Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { MST[rv.ROR5Mutator]MSP[] return false ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[ArgumentPropagationMutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[NonVoidMethodCallMutator]MSP[]
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR2Mutator]MSP[]
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[rv.CRCR3Mutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
parameterizedTypeArguments = new HashMap < TypeVariable < ? > , Type > ( typeArguments ) ; parameterizedTypeArguments . putAll ( TypeUtils . getTypeArguments ( p ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } final Type [] args = p . getActualTypeArguments () ;
return cls . isArray () MST[rv.ROR1Mutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[NonVoidMethodCallMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
midClass = ( Class < ? > ) midType ; } else { MST[rv.ROR4Mutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR1Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.CRCR4Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ROR5Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[VoidMethodCallMutator]MSP[]
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[]
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[InlineConstantMutator]MSP[] return null ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[]
useOwner = raw . getEnclosingClass () ; MST[NonVoidMethodCallMutator]MSP[] } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR5Mutator]MSP[] + type ) ; } return replacementType ; }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; } return replacementType ; MST[NegateConditionalsMutator]MSP[] }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; MST[ReturnValsMutator]MSP[] } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.ABSMutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[rv.CRCR5Mutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( typeArguments == null ) {
if ( type instanceof ParameterizedType ) { MST[NonVoidMethodCallMutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return buf . toString () ; MST[rv.CRCR3Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( toParameterizedType . equals ( type ) ) { MST[rv.ROR3Mutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[InlineConstantMutator]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[rv.ROR2Mutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[rv.CRCR3Mutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[NonVoidMethodCallMutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI4Mutator]MSP[] return false ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[BooleanFalseReturnValsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[ReturnValsMutator]MSP[] if ( midType instanceof Class < ? > ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[experimental.NakedReceiverMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR5Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR3Mutator]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[InlineConstantMutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR2Mutator]MSP[] if ( t1 . length == t2 . length ) {
useOwner = raw . getEnclosingClass () ; } else { MST[InlineConstantMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR5Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[rv.ROR2Mutator]MSP[] if ( midType instanceof Class < ? > ) {
if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[NegateConditionalsMutator]MSP[] toComponentType , typeVarAssigns ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR6Mutator]MSP[]
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[rv.CRCR5Mutator]MSP[] if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI2Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[ReturnValsMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR4Mutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[rv.ROR3Mutator]MSP[]
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[rv.ROR4Mutator]MSP[] } else {
result |= Arrays . hashCode ( lowerBounds ) ; return result ; } public static boolean isAssignable ( final Type type , final Type toType ) { return isAssignable ( type , toType , null ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR2Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
if ( containsTypeVariables ( arg ) ) { MST[rv.CRCR1Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.CRCR1Mutator]MSP[] if ( typeArguments == null ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[IncrementsMutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[InlineConstantMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI2Mutator]MSP[] return false ; }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[NegateConditionalsMutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[]
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[InlineConstantMutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[rv.ROR4Mutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR3Mutator]MSP[] } } return null ; }
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] buf . append ( '>' ) ; }
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[rv.ROR1Mutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[rv.ROR2Mutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; MST[ArgumentPropagationMutator]MSP[] } return replacementType ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR2Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR1Mutator]MSP[]
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[rv.CRCR3Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ABSMutator]MSP[] if ( typeArguments == null ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[experimental.NakedReceiverMutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls ,
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( toParameterizedType . equals ( type ) ) { return true ; MST[rv.CRCR4Mutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.ABSMutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[InlineConstantMutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ; MST[NonVoidMethodCallMutator]MSP[]
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[NonVoidMethodCallMutator]MSP[] }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR2Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR4Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type ... types ) { MST[ArgumentPropagationMutator]MSP[] Validate . notEmpty ( Validate . noNullElements ( types ) ) ; if ( types . length > 0 ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[rv.CRCR3Mutator]MSP[] types . add ( type1 ) ; } }
useOwner = raw . getEnclosingClass () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; MST[ArgumentPropagationMutator]MSP[] } if ( type instanceof GenericArrayType ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[NegateConditionalsMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( type instanceof Class < ? > ) { MST[rv.ROR4Mutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR5Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ROR2Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[InlineConstantMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR1Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.CRCR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[rv.ROR5Mutator]MSP[] return true ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[NegateConditionalsMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ROR4Mutator]MSP[]
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[NullReturnValsMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR6Mutator]MSP[]
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR5Mutator]MSP[] }
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[NegateConditionalsMutator]MSP[] return true ; }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[]
if ( cls . equals ( superClass ) ) { MST[rv.ROR4Mutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI2Mutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.ABSMutator]MSP[]
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[rv.ROR5Mutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
public static String toString ( final Type type ) { MST[ReturnValsMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[rv.ROR4Mutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return buf . toString () ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[rv.CRCR5Mutator]MSP[]
private static boolean equals ( final GenericArrayType a , final Type t ) { MST[rv.CRCR1Mutator]MSP[] return t instanceof GenericArrayType && equals ( a . getGenericComponentType () , ( ( GenericArrayType ) t ) . getGenericComponentType () ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NullReturnValsMutator]MSP[] }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[rv.CRCR6Mutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
buf . append ( toString ( types [ 0 ] ) ) ; for ( int i = 1 ; i < types . length ; i ++ ) { MST[NonVoidMethodCallMutator]MSP[] buf . append ( sep ) . append ( toString ( types [ i ] ) ) ; } }
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[rv.CRCR6Mutator]MSP[] }
return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitUpperBounds ( final WildcardType wildcardType ) { MST[ArgumentPropagationMutator]MSP[] Validate . notNull ( wildcardType , lr_10 ) ;
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } while ( true ); return result ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR5Mutator]MSP[]
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
return new GenericArrayTypeImpl ( Validate . notNull ( componentType , lr_20 ) ) ; } @SuppressWarnings ( lr_1 ) MST[ReturnValsMutator]MSP[] public static boolean equals ( final Type t1 , final Type t2 ) { if ( ObjectUtils . equals ( t1 , t2 ) ) { return true ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[rv.ROR5Mutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR1Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
&& typeVarAssigns . containsKey ( typeVar ) ) { MST[rv.UOI1Mutator]MSP[] typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; } } }
public static boolean containsTypeVariables ( final Type type ) { MST[NegateConditionalsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR4Mutator]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI2Mutator]MSP[] if ( typeArguments == null ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR3Mutator]MSP[] if ( t1 . length == t2 . length ) {
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.ROR5Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR3Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR1Mutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[NonVoidMethodCallMutator]MSP[]
} if ( genericInterface != null ) { MST[rv.ROR1Mutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[NegateConditionalsMutator]MSP[]
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[NegateConditionalsMutator]MSP[]
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[rv.CRCR6Mutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; MST[ReturnValsMutator]MSP[] } if ( t1 instanceof WildcardType ) {
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ROR5Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR6Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; MST[rv.CRCR5Mutator]MSP[] } if ( toClass . equals ( type ) ) { return true ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[rv.ROR3Mutator]MSP[] }
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI1Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[ReturnValsMutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR4Mutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR5Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR3Mutator]MSP[] }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[InlineConstantMutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR6Mutator]MSP[] }
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR1Mutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[rv.CRCR1Mutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[rv.ROR1Mutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI4Mutator]MSP[]
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[rv.ROR5Mutator]MSP[]
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI3Mutator]MSP[] } return null ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR6Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[NegateConditionalsMutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR5Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR5Mutator]MSP[]
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[]
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[rv.ROR4Mutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR3Mutator]MSP[] } while ( true ); return result ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR5Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR1Mutator]MSP[] + type ) ; } return replacementType ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI3Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR4Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[rv.ROR1Mutator]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[VoidMethodCallMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[InlineConstantMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.UOI4Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
return cls . isArray () MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[rv.ROR1Mutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( toType instanceof GenericArrayType ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[InlineConstantMutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[rv.ROR4Mutator]MSP[] } } return true ; } return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return wildcardType () . withUpperBounds ( unrollBounds ( typeArguments , wild . getUpperBounds () ) ) MST[NullReturnValsMutator]MSP[] . withLowerBounds ( unrollBounds ( typeArguments , wild . getLowerBounds () ) ) . build () ; } } return type ; }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR3Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.ROR1Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[rv.CRCR2Mutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[rv.CRCR1Mutator]MSP[]
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ROR4Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[rv.ROR4Mutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI3Mutator]MSP[] if ( t1 . length == t2 . length ) {
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[ArgumentPropagationMutator]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; MST[BooleanTrueReturnValsMutator]MSP[] } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( type instanceof WildcardType ) { MST[NonVoidMethodCallMutator]MSP[] for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NegateConditionalsMutator]MSP[] }
useOwner = raw . getEnclosingClass () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[rv.ROR1Mutator]MSP[] } } return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[rv.ROR5Mutator]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR4Mutator]MSP[] final Type ... typeArguments ) {
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[rv.CRCR2Mutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( typeArguments == null ) {
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[rv.ROR2Mutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
final TypeVariable < ? > typeVar = entry . getKey () ; MST[rv.CRCR1Mutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[InlineConstantMutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI1Mutator]MSP[] } return null ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR6Mutator]MSP[]
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[NegateConditionalsMutator]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[rv.CRCR3Mutator]MSP[] }
return new GenericArrayTypeImpl ( Validate . notNull ( componentType , lr_20 ) ) ; } @SuppressWarnings ( lr_1 ) MST[NonVoidMethodCallMutator]MSP[] public static boolean equals ( final Type t1 , final Type t2 ) { if ( ObjectUtils . equals ( t1 , t2 ) ) { return true ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[InlineConstantMutator]MSP[] }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { MST[NonVoidMethodCallMutator]MSP[] return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; MST[NullReturnValsMutator]MSP[] } if ( type instanceof GenericArrayType ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[BooleanTrueReturnValsMutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[InlineConstantMutator]MSP[] }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI4Mutator]MSP[]
return types . toArray ( new Type [ types . size () ] ) ; MST[NonVoidMethodCallMutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; final Class < ? > midClass = getRawType ( midParameterizedType ) ; MST[NullReturnValsMutator]MSP[]
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI4Mutator]MSP[] } return null ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
if ( toGenericArrayType . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR6Mutator]MSP[]
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[NegateConditionalsMutator]MSP[]
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI1Mutator]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR5Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( containsTypeVariables ( arg ) ) { MST[rv.ROR4Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
final HashMap < TypeVariable < ? > , Type > typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > () MST[ArgumentPropagationMutator]MSP[] : new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.CRCR5Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR3Mutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return buf . toString () ; MST[rv.UOI3Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[InlineConstantMutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
if ( type instanceof WildcardType ) { MST[BooleanFalseReturnValsMutator]MSP[] for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[]
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.ABSMutator]MSP[] return false ; }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[rv.CRCR2Mutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ROR5Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI1Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[NegateConditionalsMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[rv.ROR5Mutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[rv.ROR4Mutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
if ( t1 instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[rv.CRCR6Mutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[rv.ROR3Mutator]MSP[] } } }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI2Mutator]MSP[] if ( typeArguments == null ) {
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[rv.CRCR3Mutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
public static boolean containsTypeVariables ( final Type type ) { MST[ReturnValsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[rv.ROR3Mutator]MSP[]
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR2Mutator]MSP[] if ( assigningType == null ) { return null ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR4Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.ROR3Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[NonVoidMethodCallMutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR2Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR1Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return null ; } if ( cls . isPrimitive () ) { MST[rv.ROR3Mutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR3Mutator]MSP[] return null ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[rv.ROR3Mutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR6Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[InlineConstantMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[InlineConstantMutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR4Mutator]MSP[] }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; } if ( toClass . equals ( type ) ) { return true ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR6Mutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ABSMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[NegateConditionalsMutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeArgMappings ) { Validate . notNull ( raw , lr_13 ) ; Validate . notNull ( typeArgMappings , lr_14 ) ;
if ( toClass . equals ( cls ) ) { MST[ConstructorCallMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; MST[ReturnValsMutator]MSP[] } if ( type instanceof GenericArrayType ) {
private static boolean equals ( final GenericArrayType a , final Type t ) { MST[ReturnValsMutator]MSP[] return t instanceof GenericArrayType && equals ( a . getGenericComponentType () , ( ( GenericArrayType ) t ) . getGenericComponentType () ) ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR3Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR3Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR1Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.ABSMutator]MSP[]
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI2Mutator]MSP[]
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[rv.CRCR5Mutator]MSP[]
midClass = ( Class < ? > ) midType ; } else { MST[rv.ROR3Mutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[NegateConditionalsMutator]MSP[] + type ) ; } return replacementType ; }
} if ( genericInterface != null ) { MST[NonVoidMethodCallMutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( typeArguments == null ) {
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[rv.ROR2Mutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
if ( containsTypeVariables ( arg ) ) { MST[ConditionalsBoundaryMutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
&& ! ( toTypeArg instanceof WildcardType && isAssignable ( fromTypeArg , toTypeArg , typeVarAssigns ) ) ) { return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } return true ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( t1 instanceof WildcardType ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
&& ! ( toTypeArg instanceof WildcardType && isAssignable ( fromTypeArg , toTypeArg , typeVarAssigns ) ) ) { return false ; MST[rv.ROR5Mutator]MSP[] } } return true ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI3Mutator]MSP[] return false ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI2Mutator]MSP[]
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[rv.CRCR6Mutator]MSP[]
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[rv.ROR2Mutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.UOI4Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[InlineConstantMutator]MSP[] types . add ( type1 ) ; } }
if ( t1 instanceof ParameterizedType ) { MST[NonVoidMethodCallMutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[NullReturnValsMutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI4Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toParameterizedType . equals ( type ) ) { MST[NegateConditionalsMutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR5Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return cls . isArray () MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } MST[NonVoidMethodCallMutator]MSP[] if ( type instanceof ParameterizedType ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.CRCR3Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( type instanceof Class < ? > ) { MST[NegateConditionalsMutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[BooleanTrueReturnValsMutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () : isAssignable ( value . getClass () , type , null ) ; MST[rv.CRCR5Mutator]MSP[] }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR4Mutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI3Mutator]MSP[]
return isAssignable ( type , ( Class < ? > ) toType ) ; MST[ReturnValsMutator]MSP[] } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[rv.ROR1Mutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR5Mutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[InlineConstantMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR4Mutator]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( typeArguments == null ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; } } return true ; MST[rv.CRCR1Mutator]MSP[] } return false ; }
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[NonVoidMethodCallMutator]MSP[] return null ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[ConditionalsBoundaryMutator]MSP[]
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR3Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[NonVoidMethodCallMutator]MSP[]
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ROR2Mutator]MSP[] if ( typeArguments == null ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
Class < ? > c = ( Class < ? > ) d ; MST[ConstructorCallMutator]MSP[] while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[NonVoidMethodCallMutator]MSP[]
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( type == null ) { MST[rv.ROR5Mutator]MSP[] return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; } } return false ; MST[BooleanTrueReturnValsMutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return parameterizeWithOwner ( p . getOwnerType () , ( Class < ? > ) p . getRawType () , args ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ;
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR3Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[rv.CRCR6Mutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[IncrementsMutator]MSP[]
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[rv.CRCR3Mutator]MSP[]
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; break; } } if ( ! subtypeFound ) { MST[rv.CRCR4Mutator]MSP[] types . add ( type1 ) ; } }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR5Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[ReturnValsMutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR4Mutator]MSP[] } }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; MST[NonVoidMethodCallMutator]MSP[] final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[rv.ROR5Mutator]MSP[] } else {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[NegateConditionalsMutator]MSP[] } else {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[NonVoidMethodCallMutator]MSP[] } else {
return buf . toString () ; MST[rv.ROR3Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
return buf . toString () ; MST[rv.CRCR1Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[rv.ROR4Mutator]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[rv.ROR1Mutator]MSP[] if ( midType instanceof Class < ? > ) {
if ( toParameterizedType . equals ( type ) ) { return true ; MST[rv.CRCR5Mutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.UOI3Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[rv.ROR2Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[rv.CRCR5Mutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
if ( type == null ) { MST[NegateConditionalsMutator]MSP[] return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.ROR4Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[rv.ROR5Mutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[NegateConditionalsMutator]MSP[] } else {
if ( toParameterizedType . equals ( type ) ) { MST[rv.ROR5Mutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
if ( cls . equals ( superClass ) ) { MST[rv.ROR3Mutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI3Mutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ABSMutator]MSP[] if ( t1 . length == t2 . length ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[]
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI2Mutator]MSP[] } return null ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; MST[ReturnValsMutator]MSP[] }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI2Mutator]MSP[] return false ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[ReturnValsMutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[rv.ROR4Mutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[ReturnValsMutator]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR6Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.CRCR4Mutator]MSP[] return false ; }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[RemoveConditionalMutator_EQUAL_IF]MSP[] + type ) ; } return replacementType ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } MST[ArgumentPropagationMutator]MSP[] if ( type instanceof ParameterizedType ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; MST[NonVoidMethodCallMutator]MSP[] } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( t1 instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR5Mutator]MSP[] } }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[NegateConditionalsMutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR1Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[NegateConditionalsMutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[rv.ROR2Mutator]MSP[] }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR5Mutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NegateConditionalsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[ReturnValsMutator]MSP[] typeVarAssigns ) ) {
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[rv.ROR5Mutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[InlineConstantMutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[rv.ROR2Mutator]MSP[] } } return false ; }
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[NegateConditionalsMutator]MSP[] } }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[rv.ROR2Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.CRCR4Mutator]MSP[] return false ; }
if ( toClass . equals ( cls ) ) { MST[rv.ROR5Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
} if ( genericInterface != null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
if ( type instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR3Mutator]MSP[] if ( t1 . length == t2 . length ) {
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR3Mutator]MSP[] return null ; }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[]
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI3Mutator]MSP[] } return null ; }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; MST[NonVoidMethodCallMutator]MSP[] } final Type ownerType = parameterizedType . getOwnerType () ; Map < TypeVariable < ? > , Type > typeVarAssigns ;
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR5Mutator]MSP[]
final HashMap < TypeVariable < ? > , Type > typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > () MST[NonVoidMethodCallMutator]MSP[] : new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ;
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
public static boolean containsTypeVariables ( final Type type ) { MST[InlineConstantMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[rv.ROR1Mutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[rv.ROR3Mutator]MSP[] } } return true ; } return false ; }
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[rv.CRCR3Mutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR3Mutator]MSP[] final Type ... typeArguments ) {
public static String toString ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[NonVoidMethodCallMutator]MSP[] final Type ... typeArguments ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ROR3Mutator]MSP[]
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[NonVoidMethodCallMutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
return types . toArray ( new Type [ types . size () ] ) ; MST[NegateConditionalsMutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI1Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
buf . append ( toString ( types [ 0 ] ) ) ; for ( int i = 1 ; i < types . length ; i ++ ) { MST[BooleanFalseReturnValsMutator]MSP[] buf . append ( sep ) . append ( toString ( types [ i ] ) ) ; } }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI1Mutator]MSP[]
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[InlineConstantMutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR1Mutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[BooleanTrueReturnValsMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR6Mutator]MSP[] if ( t1 . length == t2 . length ) {
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI3Mutator]MSP[] if ( typeArguments == null ) {
return buf . toString () ; MST[rv.UOI4Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[] return false ; } } return true ; }
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[NonVoidMethodCallMutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR3Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] buf . append ( '>' ) ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR2Mutator]MSP[] if ( t1 . length == t2 . length ) {
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; final Class < ? > midClass = getRawType ( midParameterizedType ) ; MST[ReturnValsMutator]MSP[]
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[rv.ROR4Mutator]MSP[]
if ( toWildcardType . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR2Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR2Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[rv.ROR4Mutator]MSP[]
result |= Arrays . hashCode ( lowerBounds ) ; return result ; } public static boolean isAssignable ( final Type type , final Type toType ) { return isAssignable ( type , toType , null ) ; MST[NonVoidMethodCallMutator]MSP[] }
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[NegateConditionalsMutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
useOwner = raw . getEnclosingClass () ; MST[experimental.NakedReceiverMutator]MSP[] } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
if ( t1 instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[rv.CRCR5Mutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR5Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[NonVoidMethodCallMutator]MSP[]
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; MST[ReturnValsMutator]MSP[] } if ( type instanceof TypeVariable < ? > ) { if ( assigningType == null ) { return null ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ROR4Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[rv.ROR1Mutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
final Type [] bounds = wildcardType . getUpperBounds () ; return bounds . length == 0 ? new Type [] { Object . class } : normalizeUpperBounds ( bounds ) ; } public static Type [] getImplicitLowerBounds ( final WildcardType wildcardType ) { MST[ArgumentPropagationMutator]MSP[]
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[ReturnValsMutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[NegateConditionalsMutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[InlineConstantMutator]MSP[] }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[NonVoidMethodCallMutator]MSP[] if ( typeArguments == null ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR2Mutator]MSP[]
public static < T > Typed < T > wrap ( final Class < T > type ) { return TypeUtils . <T > wrap ( ( Type ) type ) ; } private static String classToString ( final Class < ? > c ) { MST[NonVoidMethodCallMutator]MSP[]
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] + type ) ; } return replacementType ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[rv.CRCR3Mutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[rv.CRCR6Mutator]MSP[] } else if ( owner == null ) {
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[NonVoidMethodCallMutator]MSP[] buf . append ( '>' ) ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[]
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[rv.ROR4Mutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR1Mutator]MSP[] if ( t1 . length == t2 . length ) {
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) { MST[rv.ROR2Mutator]MSP[]
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[rv.ROR1Mutator]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[rv.ROR5Mutator]MSP[] + type ) ; } return replacementType ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[rv.ROR5Mutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
buf . append ( toString ( types [ 0 ] ) ) ; for ( int i = 1 ; i < types . length ; i ++ ) { MST[ReturnValsMutator]MSP[] buf . append ( sep ) . append ( toString ( types [ i ] ) ) ; } }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR3Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[rv.ROR5Mutator]MSP[] } else {
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[rv.ROR2Mutator]MSP[] } } }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.ABSMutator]MSP[] return false ; }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR1Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.ROR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[]
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[InlineConstantMutator]MSP[]
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR3Mutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI2Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.ROR3Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[InlineConstantMutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[ConditionalsBoundaryMutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[rv.ROR3Mutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[NonVoidMethodCallMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; MST[ReturnValsMutator]MSP[] }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI1Mutator]MSP[] if ( t1 . length == t2 . length ) {
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ! toTypeArg . equals ( fromTypeArg )
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR5Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[rv.CRCR2Mutator]MSP[] }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[rv.ROR3Mutator]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR3Mutator]MSP[] final Type ... typeArguments ) {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[ArgumentPropagationMutator]MSP[]
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
&& ! ( toTypeArg instanceof WildcardType && isAssignable ( fromTypeArg , toTypeArg , typeVarAssigns ) ) ) { return false ; MST[NegateConditionalsMutator]MSP[] } } return true ; }
if ( toParameterizedType . equals ( type ) ) { return true ; MST[InlineConstantMutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; MST[EmptyObjectReturnValsMutator]MSP[] } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR5Mutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return wildcardType () . withUpperBounds ( unrollBounds ( typeArguments , wild . getUpperBounds () ) ) MST[NonVoidMethodCallMutator]MSP[] . withLowerBounds ( unrollBounds ( typeArguments , wild . getLowerBounds () ) ) . build () ; } } return type ; }
return types . toArray ( new Type [ types . size () ] ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[NegateConditionalsMutator]MSP[] }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.CRCR6Mutator]MSP[] return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR1Mutator]MSP[] if ( t1 . length == t2 . length ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI3Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[NegateConditionalsMutator]MSP[] } while ( true ); return result ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[rv.CRCR4Mutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR2Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[InlineConstantMutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[ReturnValsMutator]MSP[] if ( typeArguments == null ) {
return buf . toString () ; MST[rv.ROR4Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; MST[rv.CRCR4Mutator]MSP[] } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[ConditionalsBoundaryMutator]MSP[] if ( t1 . length == t2 . length ) {
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ABSMutator]MSP[] if ( typeArguments == null ) {
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[rv.ROR3Mutator]MSP[] } } return false ; }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR3Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
&& typeVarAssigns . containsKey ( typeVar ) ) { typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; MST[rv.ROR5Mutator]MSP[] } } }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.ROR3Mutator]MSP[] if ( typeArguments == null ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI4Mutator]MSP[] if ( t1 . length == t2 . length ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR3Mutator]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.CRCR3Mutator]MSP[] return false ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] }
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[rv.ROR5Mutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; MST[BooleanFalseReturnValsMutator]MSP[] }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[RemoveConditionalMutator_ORDER_IF]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[rv.ROR2Mutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR6Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[] return false ; } } return true ; }
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[]
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI1Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { MST[rv.CRCR4Mutator]MSP[] final Class < ? > cls = ( Class < ? > ) type ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ABSMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( toParameterizedType . equals ( type ) ) { MST[rv.ROR4Mutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] toComponentType , typeVarAssigns ) ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[rv.ROR1Mutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[ReturnValsMutator]MSP[]
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( assigningType == null ) { return null ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI1Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[]
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[rv.ROR4Mutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[rv.ROR3Mutator]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
public static boolean containsTypeVariables ( final Type type ) { MST[NegateConditionalsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( toParameterizedType . equals ( type ) ) { return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[NegateConditionalsMutator]MSP[]
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR5Mutator]MSP[] }
if ( lowerBounds . length > 1 || lowerBounds . length == 1 && lowerBounds [ 0 ] != null ) { appendAllTo ( buf . append ( lr_25 ) , lr_24 , lowerBounds ) ; MST[ReturnValsMutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NonVoidMethodCallMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI3Mutator]MSP[] return false ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI4Mutator]MSP[] return false ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] if ( t1 . length == t2 . length ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI2Mutator]MSP[] } return null ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI1Mutator]MSP[] } return null ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; MST[rv.ROR5Mutator]MSP[] useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[rv.ROR1Mutator]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; final Class < ? > midClass = getRawType ( midParameterizedType ) ; MST[NonVoidMethodCallMutator]MSP[]
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[rv.CRCR5Mutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
if ( type == null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; MST[NonVoidMethodCallMutator]MSP[] } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls ,
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[ReturnValsMutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
result |= Arrays . hashCode ( lowerBounds ) ; return result ; } public static boolean isAssignable ( final Type type , final Type toType ) { return isAssignable ( type , toType , null ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR2Mutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
final TypeVariable < ? > typeVar = entry . getKey () ; MST[rv.CRCR3Mutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR6Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[rv.ROR2Mutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[ReturnValsMutator]MSP[] }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI3Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[NonVoidMethodCallMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR6Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[ReturnValsMutator]MSP[] }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR1Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[rv.ROR5Mutator]MSP[]
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI1Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
if ( toParameterizedType . equals ( type ) ) { MST[rv.ROR1Mutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[rv.ROR4Mutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[InlineConstantMutator]MSP[]
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; MST[rv.ROR5Mutator]MSP[] if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[rv.CRCR6Mutator]MSP[]
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[ConditionalsBoundaryMutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
private static boolean equals ( final GenericArrayType a , final Type t ) { MST[rv.CRCR6Mutator]MSP[] return t instanceof GenericArrayType && equals ( a . getGenericComponentType () , ( ( GenericArrayType ) t ) . getGenericComponentType () ) ; }
midClass = ( Class < ? > ) midType ; } else { MST[rv.ROR2Mutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[BooleanFalseReturnValsMutator]MSP[] if ( t1 . length == t2 . length ) {
return null ; } if ( cls . isPrimitive () ) { if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; MST[rv.ROR3Mutator]MSP[] } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[NonVoidMethodCallMutator]MSP[] if ( typeArguments == null ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.CRCR2Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
return isAssignable ( type , ( Class < ? > ) toType ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR1Mutator]MSP[]
if ( toClass . equals ( cls ) ) { MST[ConstructorCallMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[NonVoidMethodCallMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toParameterizedType . equals ( type ) ) { return true ; MST[rv.CRCR6Mutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.ROR3Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.ABSMutator]MSP[] } return null ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[ReturnValsMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[rv.ROR3Mutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[rv.CRCR5Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR4Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[]
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[rv.ROR4Mutator]MSP[] } else {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI3Mutator]MSP[]
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[rv.ROR4Mutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR1Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
} if ( genericInterface != null ) { return genericInterface ; } } return cls . getGenericSuperclass () ; MST[NullReturnValsMutator]MSP[] } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[NonVoidMethodCallMutator]MSP[] final Type ... typeArguments ) {
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI4Mutator]MSP[]
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI1Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
Validate . notNull ( var , lr_21 ) ; final StringBuilder buf = new StringBuilder () ; final GenericDeclaration d = ( ( TypeVariable < ? > ) var ) . getGenericDeclaration () ; if ( d instanceof Class < ? > ) { MST[rv.CRCR5Mutator]MSP[]
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[NegateConditionalsMutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR6Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR3Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.CRCR5Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
final TypeVariable < ? > typeVar = entry . getKey () ; MST[NonVoidMethodCallMutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; MST[NonVoidMethodCallMutator]MSP[] typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] if ( fromTypeArg != null && ! toTypeArg . equals ( fromTypeArg )
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.ROR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[NonVoidMethodCallMutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[NonVoidMethodCallMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[rv.ROR4Mutator]MSP[] if ( midType instanceof Class < ? > ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR4Mutator]MSP[]
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[NonVoidMethodCallMutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR6Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR1Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR2Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; MST[rv.CRCR5Mutator]MSP[] c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.ROR5Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { return null ; MST[NonVoidMethodCallMutator]MSP[] }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( toClass . equals ( cls ) ) { MST[NegateConditionalsMutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.CRCR5Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( type instanceof Class < ? > ) { MST[rv.ROR2Mutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
if ( type instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.ROR3Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[NonVoidMethodCallMutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
return false ; } } for ( final Type toBound : toLowerBounds ) { MST[rv.CRCR1Mutator]MSP[] if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { return false ; } } return true ; }
final TypeVariable < ? > typeVar = entry . getKey () ; MST[rv.CRCR6Mutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR3Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[]
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[NegateConditionalsMutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
midClass = ( Class < ? > ) midType ; } else { MST[rv.ROR5Mutator]MSP[] throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
if ( containsTypeVariables ( arg ) ) { MST[rv.ROR2Mutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[BooleanTrueReturnValsMutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[InlineConstantMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
static Map < TypeVariable < ? > , Type > getTypeArguments ( final ParameterizedType type ) { MST[ReturnValsMutator]MSP[] return getTypeArguments ( type , getRawType ( type ) , null ) ; }
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; MST[ReturnValsMutator]MSP[] } if ( toType instanceof TypeVariable < ? > ) {
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[NegateConditionalsMutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( typeArguments == null ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.CRCR6Mutator]MSP[] if ( typeArguments == null ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[NonVoidMethodCallMutator]MSP[]
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[rv.ROR2Mutator]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[RemoveConditionalMutator_ORDER_IF]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR1Mutator]MSP[]
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } } return false ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( assigningType == null ) { return null ; }
parameterizedTypeArguments = new HashMap < TypeVariable < ? > , Type > ( typeArguments ) ; parameterizedTypeArguments . putAll ( TypeUtils . getTypeArguments ( p ) ) ; MST[rv.ROR5Mutator]MSP[] } final Type [] args = p . getActualTypeArguments () ;
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[rv.ROR2Mutator]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[rv.CRCR5Mutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( t1 instanceof WildcardType ) {
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR5Mutator]MSP[] return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.CRCR3Mutator]MSP[] if ( typeArguments == null ) {
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[InlineConstantMutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR1Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.CRCR3Mutator]MSP[] return false ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[ReturnValsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[rv.CRCR3Mutator]MSP[] toComponentType , typeVarAssigns ) ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[rv.ROR3Mutator]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[experimental.NakedReceiverMutator]MSP[]
private static StringBuilder appendAllTo ( final StringBuilder buf , final String sep , final Type ... types ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notEmpty ( Validate . noNullElements ( types ) ) ; if ( types . length > 0 ) {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; } } return true ; MST[rv.CRCR5Mutator]MSP[] } return false ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] buf . insert ( 0 , c . getName () ) ; break; }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR1Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[NegateConditionalsMutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ROR2Mutator]MSP[]
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; MST[rv.CRCR4Mutator]MSP[] if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
return parameterizeWithOwner ( p . getOwnerType () , ( Class < ? > ) p . getRawType () , args ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ;
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; MST[NonVoidMethodCallMutator]MSP[] final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.ABSMutator]MSP[] } else if ( midType instanceof Class < ? > ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
throw new IllegalStateException ( lr_12 + rawType ) ; } return ( Class < ? > ) rawType ; MST[rv.ROR5Mutator]MSP[] } public static Class < ? > getRawType ( final Type type , final Type assigningType ) { if ( type instanceof Class < ? > ) {
if ( lowerBounds . length > 1 || lowerBounds . length == 1 && lowerBounds [ 0 ] != null ) { appendAllTo ( buf . append ( lr_25 ) , lr_24 , lowerBounds ) ; MST[NonVoidMethodCallMutator]MSP[]
return new GenericArrayTypeImpl ( Validate . notNull ( componentType , lr_20 ) ) ; } @SuppressWarnings ( lr_1 ) MST[BooleanFalseReturnValsMutator]MSP[] public static boolean equals ( final Type t1 , final Type t2 ) { if ( ObjectUtils . equals ( t1 , t2 ) ) { return true ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; MST[NonVoidMethodCallMutator]MSP[] if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[rv.ROR2Mutator]MSP[] } } return true ; } return false ; }
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[rv.CRCR6Mutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; MST[rv.ROR3Mutator]MSP[] } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[rv.ROR1Mutator]MSP[] } else {
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[ReturnValsMutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR6Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.ROR3Mutator]MSP[] if ( t1 . length == t2 . length ) {
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[InlineConstantMutator]MSP[]
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI4Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
if ( cls . equals ( superClass ) ) { return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; MST[NullReturnValsMutator]MSP[] if ( midType instanceof Class < ? > ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[NonVoidMethodCallMutator]MSP[] } return null ; }
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[ConstructorCallMutator]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
return value == null ? ! ( type instanceof Class < ? > ) || ! ( ( Class < ? > ) type ) . isPrimitive () MST[RemoveConditionalMutator_EQUAL_IF]MSP[] : isAssignable ( value . getClass () , type , null ) ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( typeArguments == null ) {
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { MST[NegateConditionalsMutator]MSP[] return false ; } if ( toClass . equals ( type ) ) { return true ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR2Mutator]MSP[] } } return null ; }
useOwner = raw . getEnclosingClass () ; } else { MST[InlineConstantMutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[BooleanTrueReturnValsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } MST[NonVoidMethodCallMutator]MSP[] break; } while ( true ); return result ; }
} static boolean isArrayType ( final Type type ) { MST[NonVoidMethodCallMutator]MSP[] return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) {
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR1Mutator]MSP[] } while ( true ); return result ; }
if ( type instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI4Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
typeVarAssigns ) ) { MST[NonVoidMethodCallMutator]MSP[] return false ; } } } return true ; } private static Class < ? > getRawType ( final ParameterizedType parameterizedType ) { final Type rawType = parameterizedType . getRawType () ; if ( ! ( rawType instanceof Class < ? > ) ) {
public static String toString ( final Type type ) { MST[InlineConstantMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; MST[BooleanTrueReturnValsMutator]MSP[] } if ( toType instanceof TypeVariable < ? > ) {
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[InlineConstantMutator]MSP[] if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[NegateConditionalsMutator]MSP[] buf . append ( '>' ) ; }
return buf . toString () ; MST[rv.ABSMutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( type instanceof Class < ? > ) { MST[rv.ROR5Mutator]MSP[] return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
} if ( genericInterface != null ) { MST[NegateConditionalsMutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.CRCR6Mutator]MSP[] return false ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR3Mutator]MSP[] }
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[rv.CRCR3Mutator]MSP[] if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR5Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[experimental.NakedReceiverMutator]MSP[]
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[rv.ROR1Mutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return buf . toString () ; MST[rv.ROR1Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; MST[NonVoidMethodCallMutator]MSP[] }
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.ROR3Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[NonVoidMethodCallMutator]MSP[] final Type ... typeArguments ) {
buf . append ( '.' ) . append ( raw . getSimpleName () ) ; MST[experimental.NakedReceiverMutator]MSP[] } appendAllTo ( buf . append ( '<' ) , lr_22 , typeArguments ) . append ( '>' ) ; return buf . toString () ; }
if ( toWildcardType . equals ( type ) ) { return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; MST[rv.ROR3Mutator]MSP[] final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } } return null ; MST[rv.ROR5Mutator]MSP[] }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR2Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( toClass . equals ( cls ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[rv.ROR4Mutator]MSP[] } } return false ; }
useOwner = raw . getEnclosingClass () ; } else { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[rv.ROR4Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR4Mutator]MSP[]
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR2Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI1Mutator]MSP[] } return null ; }
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[rv.CRCR3Mutator]MSP[]
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI3Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
public static < T > Typed < T > wrap ( final Class < T > type ) { return TypeUtils . <T > wrap ( ( Type ) type ) ; } private static String classToString ( final Class < ? > c ) { MST[ReturnValsMutator]MSP[]
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , MST[NonVoidMethodCallMutator]MSP[] toComponentType , typeVarAssigns ) ; }
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; MST[rv.CRCR6Mutator]MSP[] for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) {
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[] return false ; } } return true ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
if ( containsTypeVariables ( arg ) ) { MST[ReturnValsMutator]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR2Mutator]MSP[]
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[NegateConditionalsMutator]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
} if ( genericInterface != null ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR1Mutator]MSP[]
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[rv.ROR5Mutator]MSP[]
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; MST[BooleanFalseReturnValsMutator]MSP[] } if ( toType instanceof TypeVariable < ? > ) {
if ( containsTypeVariables ( arg ) ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[ReturnValsMutator]MSP[] if ( t1 . length == t2 . length ) {
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR4Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final Class < ? > raw = ( Class < ? > ) p . getRawType () ; final Type [] typeArguments = p . getActualTypeArguments () ; if ( useOwner == null ) { buf . append ( raw . getName () ) ; } else { MST[ConstructorCallMutator]MSP[]
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , MST[NonVoidMethodCallMutator]MSP[] toClass , typeVarAssigns ) ;
return buf . toString () ; MST[rv.UOI2Mutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] && ! toTypeArg . equals ( fromTypeArg )
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR5Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[rv.CRCR1Mutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( type instanceof WildcardType ) { MST[ReturnValsMutator]MSP[] for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) {
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) { MST[rv.ROR2Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[InlineConstantMutator]MSP[] return false ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; MST[InlineConstantMutator]MSP[] break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[ConstructorCallMutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[NegateConditionalsMutator]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR4Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( typeArguments == null ) {
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[experimental.NakedReceiverMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; }
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.CRCR3Mutator]MSP[]
private static Map < TypeVariable < ? > , Type > getTypeArguments ( Class < ? > cls , final Class < ? > toClass , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) { if ( ! isAssignable ( cls , toClass ) ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.CRCR6Mutator]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR3Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR4Mutator]MSP[] }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[rv.ROR1Mutator]MSP[] return true ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( toGenericArrayType . equals ( type ) ) { MST[rv.ROR5Mutator]MSP[] return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR5Mutator]MSP[] final Type ... typeArguments ) {
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[rv.ROR5Mutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[rv.ROR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.ROR1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } private static boolean equals ( final ParameterizedType p , final Type t ) { if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
return types . toArray ( new Type [ types . size () ] ) ; MST[rv.UOI1Mutator]MSP[] } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR4Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[NegateConditionalsMutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI4Mutator]MSP[]
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) { MST[rv.UOI3Mutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } return getRawType ( typeArgument , assigningType ) ; MST[rv.ROR5Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[NonVoidMethodCallMutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[rv.ROR3Mutator]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
private static String wildcardTypeToString ( final WildcardType w ) { final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; MST[NonVoidMethodCallMutator]MSP[] final Type [] upperBounds = w . getUpperBounds () ;
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[NonVoidMethodCallMutator]MSP[] } else if ( owner == null ) {
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR6Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI1Mutator]MSP[] if ( t1 . length == t2 . length ) {
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { MST[rv.ROR1Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) {
buf . append ( c . getName () ) ; } if ( c . getTypeParameters () . length > 0 ) { buf . append ( '<' ) ; appendAllTo ( buf , lr_22 , c . getTypeParameters () ) ; MST[experimental.NakedReceiverMutator]MSP[] buf . append ( '>' ) ; }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > () MST[ArgumentPropagationMutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[rv.CRCR6Mutator]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ; MST[NonVoidMethodCallMutator]MSP[]
for ( int i = 0 ; i < args . length ; i ++ ) { final Type unrolled = unrollVariables ( parameterizedTypeArguments , args [ i ] ) ; if ( unrolled != null ) { args [ i ] = unrolled ; MST[NonVoidMethodCallMutator]MSP[] } }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR2Mutator]MSP[] final Type ... typeArguments ) {
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR1Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( toParameterizedType . equals ( type ) ) { return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ; MST[NonVoidMethodCallMutator]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] } public static String toLongString ( final TypeVariable < ? > var ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[VoidMethodCallMutator]MSP[] }
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[RemoveConditionalMutator_EQUAL_IF]MSP[] + type ) ; } return replacementType ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
result |= Arrays . hashCode ( lowerBounds ) ; return result ; } public static boolean isAssignable ( final Type type , final Type toType ) { return isAssignable ( type , toType , null ) ; MST[ReturnValsMutator]MSP[] }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( t1 . length == t2 . length ) {
if ( t1 instanceof ParameterizedType ) { MST[rv.ROR3Mutator]MSP[] return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.UOI1Mutator]MSP[] return false ; } } return true ; }
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; MST[rv.ROR5Mutator]MSP[] } if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[RemoveConditionalMutator_ORDER_ELSE]MSP[]
if ( toParameterizedType . equals ( type ) ) { MST[NonVoidMethodCallMutator]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return cls . isArray () MST[rv.ROR5Mutator]MSP[] && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { MST[rv.ROR5Mutator]MSP[] return false ; }
if ( cls . equals ( superClass ) ) { MST[NegateConditionalsMutator]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[InlineConstantMutator]MSP[] return false ; }
return ( ( GenericArrayType ) type ) . getGenericComponentType () ; } return null ; } public static Type unrollVariables ( Map < TypeVariable < ? > , Type > typeArguments , final Type type ) { MST[rv.UOI4Mutator]MSP[] if ( typeArguments == null ) {
if ( toParameterizedType . equals ( type ) ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] return true ; } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
return buf . toString () ; MST[NegateConditionalsMutator]MSP[] } private static String genericArrayTypeToString ( final GenericArrayType g ) { return String . format ( lr_26 , toString ( g . getGenericComponentType () ) ) ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR5Mutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[]
if ( cls . equals ( superClass ) ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return getTypeArguments ( superType , superClass , null ) ; } final Type midType = getClosestParentType ( cls , superClass ) ; if ( midType instanceof Class < ? > ) {
return null ; } if ( cls . isPrimitive () ) { MST[NonVoidMethodCallMutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[rv.ROR4Mutator]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[rv.ROR4Mutator]MSP[] } while ( true ); return result ; }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR1Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
result [ index ++ ] = mappings . get ( var ) ; } return result ; MST[rv.UOI1Mutator]MSP[] } public static WildcardTypeBuilder wildcardType () { return new WildcardTypeBuilder () ; } public static GenericArrayType genericArrayType ( final Type componentType ) {
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; MST[rv.ROR5Mutator]MSP[] } } return null ; }
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.ROR3Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
final Class < ? > cls = getRawType ( parameterizedType ) ; if ( ! isAssignable ( cls , toClass ) ) { return null ; } final Type ownerType = parameterizedType . getOwnerType () ; MST[NonVoidMethodCallMutator]MSP[] Map < TypeVariable < ? > , Type > typeVarAssigns ;
final TypeVariable < ? > typeVar = entry . getKey () ; MST[InlineConstantMutator]MSP[] final Type type = entry . getValue () ; for ( final Type bound : getImplicitBounds ( typeVar ) ) { if ( ! isAssignable ( type , substituteTypeVariables ( bound , typeVarAssigns ) ,
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR3Mutator]MSP[]
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { MST[rv.CRCR1Mutator]MSP[] toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) {
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[NonVoidMethodCallMutator]MSP[]
private static boolean equals ( final WildcardType w , final Type t ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
if ( type instanceof GenericArrayType ) { return genericArrayTypeToString ( ( GenericArrayType ) type ) ; MST[EmptyObjectReturnValsMutator]MSP[] } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[InlineConstantMutator]MSP[] final Type ... typeArguments ) {
public static String toString ( final Type type ) { MST[rv.CRCR1Mutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( toType instanceof GenericArrayType ) {
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR5Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
for ( int i = 0 ; i < t1 . length ; i ++ ) { if ( ! equals ( t1 [ i ] , t2 [ i ] ) ) { return false ; MST[rv.ROR5Mutator]MSP[] } } return true ; } return false ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[VoidMethodCallMutator]MSP[]
public static boolean containsTypeVariables ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.ROR5Mutator]MSP[]
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[rv.ROR2Mutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] for ( final Type bound : upperBounds ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR3Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[RemoveConditionalMutator_EQUAL_IF]MSP[] && ! toTypeArg . equals ( fromTypeArg )
private static String wildcardTypeToString ( final WildcardType w ) { MST[InlineConstantMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
return null ; } if ( cls . isPrimitive () ) { MST[rv.ROR5Mutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.UOI4Mutator]MSP[] if ( t1 . length == t2 . length ) {
if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR5Mutator]MSP[] for ( final Type bound : ( ( TypeVariable < ? > ) type ) . getBounds () ) { if ( isAssignable ( bound , toClass ) ) { return true ; } } return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( equals ( p . getRawType () , other . getRawType () ) && equals ( p . getOwnerType () , other . getOwnerType () ) ) { return equals ( p . getActualTypeArguments () , other . getActualTypeArguments () ) ; MST[NegateConditionalsMutator]MSP[] } } return false ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { return true ; MST[rv.CRCR2Mutator]MSP[] } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
public static boolean containsTypeVariables ( final Type type ) { MST[BooleanFalseReturnValsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR5Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 + type ) ; } return replacementType ; MST[rv.ROR5Mutator]MSP[] }
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR5Mutator]MSP[] }
for ( final TypeVariable < ? > var : toTypeVarAssigns . keySet () ) { final Type toTypeArg = unrollVariableAssignments ( var , toTypeVarAssigns ) ; final Type fromTypeArg = unrollVariableAssignments ( var , fromTypeVarAssigns ) ; if ( fromTypeArg != null MST[NegateConditionalsMutator]MSP[] && ! toTypeArg . equals ( fromTypeArg )
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; MST[rv.ROR2Mutator]MSP[] final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; } else {
final ParameterizedType superType ) { Validate . notNull ( cls , lr_4 ) ; Validate . notNull ( superType , lr_5 ) ; final Class < ? > superClass = getRawType ( superType ) ; if ( ! isAssignable ( cls , superClass ) ) { MST[rv.CRCR5Mutator]MSP[] return null ; }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[rv.ROR1Mutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; } MST[experimental.NakedReceiverMutator]MSP[]
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[rv.ROR4Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
: new HashMap < TypeVariable < ? > , Type > ( subtypeVarAssigns ) ; } final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[ConstructorCallMutator]MSP[] final TypeVariable < ? > [] typeParams = cls . getTypeParameters () ;
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; MST[BooleanFalseReturnValsMutator]MSP[] }
if ( type instanceof Class < ? > ) { final Class < ? > clazz = ( Class < ? > ) type ; return clazz . isArray () ? clazz . getComponentType () : null ; } if ( type instanceof GenericArrayType ) { MST[NegateConditionalsMutator]MSP[]
return ( ( Class < ? > ) type ) . getTypeParameters () . length > 0 ; } MST[InlineConstantMutator]MSP[] if ( type instanceof ParameterizedType ) { for ( final Type arg : ( ( ParameterizedType ) type ) . getActualTypeArguments () ) {
return types . toArray ( new Type [ types . size () ] ) ; } public static Type [] getImplicitBounds ( final TypeVariable < ? > typeVariable ) { MST[InlineConstantMutator]MSP[] Validate . notNull ( typeVariable , lr_9 ) ; final Type [] bounds = typeVariable . getBounds () ;
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR3Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[ArgumentPropagationMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ABSMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( result instanceof TypeVariable < ? > && ! result . equals ( var ) ) { var = ( TypeVariable < ? > ) result ; continue; } break; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } while ( true ); return result ; }
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[NonVoidMethodCallMutator]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; MST[ReturnValsMutator]MSP[] } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , typeVarAssigns ) ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.CRCR3Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[BooleanTrueReturnValsMutator]MSP[] if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } return false ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { MST[rv.ROR4Mutator]MSP[] return true ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { MST[rv.UOI3Mutator]MSP[] subtypeFound = true ; break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[rv.CRCR1Mutator]MSP[] final Type ... typeArguments ) {
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { MST[rv.UOI1Mutator]MSP[] return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
if ( ownerType instanceof ParameterizedType ) { final ParameterizedType parameterizedOwnerType = ( ParameterizedType ) ownerType ; typeVarAssigns = getTypeArguments ( parameterizedOwnerType , getRawType ( parameterizedOwnerType ) , subtypeVarAssigns ) ; MST[NegateConditionalsMutator]MSP[] } else { typeVarAssigns = subtypeVarAssigns == null ? new HashMap < TypeVariable < ? > , Type > ()
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR3Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR1Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
useOwner = raw . getEnclosingClass () ; } else { Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ; MST[rv.CRCR2Mutator]MSP[]
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; } if ( toClass == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return false ; } if ( toClass . equals ( type ) ) { return true ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.CRCR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
public static boolean containsTypeVariables ( final Type type ) { MST[NegateConditionalsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[NegateConditionalsMutator]MSP[] if ( assigningType == null ) { return null ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.CRCR1Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
final ParameterizedType parameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { final Type ownerType = parameterizedType . getOwnerType () ; if ( ownerType instanceof ParameterizedType ) { mapTypeVariablesToArguments ( cls , ( ParameterizedType ) ownerType , typeVarAssigns ) ; MST[NonVoidMethodCallMutator]MSP[] }
private static boolean isAssignable ( final Type type , final GenericArrayType toGenericArrayType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toGenericArrayType == null ) { MST[rv.ROR5Mutator]MSP[] return false ; }
if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[rv.ROR2Mutator]MSP[] } public static Map < TypeVariable < ? > , Type > determineTypeArguments ( final Class < ? > cls ,
return buf . toString () ; } private static String typeVariableToString ( final TypeVariable < ? > v ) { MST[RemoveConditionalMutator_ORDER_ELSE]MSP[] final StringBuilder buf = new StringBuilder ( v . getName () ) ; final Type [] bounds = v . getBounds () ;
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } if ( toParameterizedType == null ) { return false ; }
if ( toGenericArrayType . equals ( type ) ) { return true ; } final Type toComponentType = toGenericArrayType . getGenericComponentType () ; MST[rv.ROR3Mutator]MSP[] if ( type instanceof Class < ? > ) { final Class < ? > cls = ( Class < ? > ) type ;
&& ! ( toTypeArg instanceof WildcardType && isAssignable ( fromTypeArg , toTypeArg , typeVarAssigns ) ) ) { return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return true ; }
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; MST[BooleanTrueReturnValsMutator]MSP[] }
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { if ( t1 . length == t2 . length ) {
return wildcardType () . withUpperBounds ( unrollBounds ( typeArguments , wild . getUpperBounds () ) ) MST[ReturnValsMutator]MSP[] . withLowerBounds ( unrollBounds ( typeArguments , wild . getLowerBounds () ) ) . build () ; } } return type ; }
final Type [] typeArgs = parameterizedType . getActualTypeArguments () ; MST[NegateConditionalsMutator]MSP[] final TypeVariable < ? > [] typeVars = getRawType ( parameterizedType ) . getTypeParameters () ; final List < TypeVariable < Class < T > > > typeVarList = Arrays . asList ( cls . getTypeParameters () ) ;
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 MST[NonVoidMethodCallMutator]MSP[] + lr_7 + midType ) ; } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI4Mutator]MSP[]
if ( type instanceof Class < ? > ) { return ClassUtils . isAssignable ( ( Class < ? > ) type , toClass ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return isAssignable ( getRawType ( ( ParameterizedType ) type ) , toClass ) ; }
for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } MST[rv.UOI4Mutator]MSP[] } return null ; }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[NegateConditionalsMutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
private static String wildcardTypeToString ( final WildcardType w ) { MST[experimental.NakedReceiverMutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; } } MST[rv.UOI1Mutator]MSP[] return false ; }
if ( type1 != type2 && isAssignable ( type2 , type1 , null ) ) { subtypeFound = true ; MST[rv.CRCR1Mutator]MSP[] break; } } if ( ! subtypeFound ) { types . add ( type1 ) ; } }
Class < ? > c = ( Class < ? > ) d ; while ( true ) { if ( c . getEnclosingClass () == null ) { buf . insert ( 0 , c . getName () ) ; break; } MST[NegateConditionalsMutator]MSP[]
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[experimental.NakedReceiverMutator]MSP[]
} static boolean isArrayType ( final Type type ) { return type instanceof GenericArrayType || type instanceof Class < ? > && ( ( Class < ? > ) type ) . isArray () ; } public static Type getArrayComponentType ( final Type type ) { MST[rv.ROR4Mutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[NegateConditionalsMutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } else {
final Set < Type > types = new HashSet < Type > ( bounds . length ) ; for ( final Type type1 : bounds ) { boolean subtypeFound = false ; for ( final Type type2 : bounds ) { MST[ConstructorCallMutator]MSP[]
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[rv.CRCR3Mutator]MSP[] if ( t1 . length == t2 . length ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.CRCR6Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR4Mutator]MSP[] }
private static String wildcardTypeToString ( final WildcardType w ) { MST[rv.UOI4Mutator]MSP[] final StringBuilder buf = new StringBuilder () . append ( '?' ) ; final Type [] lowerBounds = w . getLowerBounds () ; final Type [] upperBounds = w . getUpperBounds () ;
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[rv.CRCR1Mutator]MSP[] }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.CRCR3Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg ) MST[rv.UOI3Mutator]MSP[]
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType ,
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR1Mutator]MSP[] return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
return getTypeArguments ( ( Class < ? > ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof ParameterizedType ) { return getTypeArguments ( ( ParameterizedType ) type , toClass , subtypeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { MST[rv.ROR5Mutator]MSP[]
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[NegateConditionalsMutator]MSP[] + type ) ; } return replacementType ; }
public static boolean containsTypeVariables ( final Type type ) { MST[ReturnValsMutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
public static boolean containsTypeVariables ( final Type type ) { MST[rv.ROR2Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { MST[NegateConditionalsMutator]MSP[] return false ; }
if ( type instanceof ParameterizedType ) { final ParameterizedType p = ( ParameterizedType ) type ; final Map < TypeVariable < ? > , Type > parameterizedTypeArguments ; if ( p . getOwnerType () == null ) { parameterizedTypeArguments = typeArguments ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } else {
if ( type instanceof GenericArrayType ) { MST[rv.ROR2Mutator]MSP[] return genericArrayTypeToString ( ( GenericArrayType ) type ) ; } throw new IllegalArgumentException ( ObjectUtils . identityToString ( type ) ) ; } public static String toLongString ( final TypeVariable < ? > var ) {
if ( type instanceof WildcardType ) { for ( final Type bound : getImplicitUpperBounds ( ( WildcardType ) type ) ) { if ( isAssignable ( bound , toGenericArrayType ) ) { return true ; MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] } } return false ; }
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[rv.ROR5Mutator]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( ! isAssignable ( toBound , bound , typeVarAssigns ) ) { return false ; } } } return true ; } for ( final Type toBound : toUpperBounds ) { if ( ! isAssignable ( type , substituteTypeVariables ( toBound , typeVarAssigns ) , MST[rv.CRCR2Mutator]MSP[] typeVarAssigns ) ) {
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR3Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return null ; } if ( cls . isPrimitive () ) { MST[rv.ROR2Mutator]MSP[] if ( toClass . isPrimitive () ) { return new HashMap < TypeVariable < ? > , Type > () ; } cls = ClassUtils . primitiveToWrapper ( cls ) ; }
if ( fromTypeVarAssigns == null ) { return false ; } if ( fromTypeVarAssigns . isEmpty () ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return true ; } final Map < TypeVariable < ? > , Type > toTypeVarAssigns = getTypeArguments ( toParameterizedType , toClass , typeVarAssigns ) ;
final Object genericDeclaration = ( ( TypeVariable < ? > ) type ) . getGenericDeclaration () ; if ( ! ( genericDeclaration instanceof Class < ? > ) ) { return null ; } final Map < TypeVariable < ? > , Type > typeVarAssigns = getTypeArguments ( assigningType , MST[rv.ROR3Mutator]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.CRCR5Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return isAssignable ( type , ( Class < ? > ) toType ) ; } if ( toType instanceof ParameterizedType ) { MST[rv.ROR5Mutator]MSP[] return isAssignable ( type , ( ParameterizedType ) toType , typeVarAssigns ) ; } if ( toType instanceof GenericArrayType ) {
for ( int i = 0 ; i < typeArgs . length ; i ++ ) { final TypeVariable < ? > typeVar = typeVars [ i ] ; MST[NonVoidMethodCallMutator]MSP[] final Type typeArg = typeArgs [ i ] ; if ( typeVarList . contains ( typeArg )
} if ( genericInterface != null ) { MST[rv.ROR4Mutator]MSP[] return genericInterface ; } } return cls . getGenericSuperclass () ; } public static boolean isInstance ( final Object value , final Type type ) { if ( type == null ) { return false ; }
return ( Class < ? > ) type ; } if ( type instanceof ParameterizedType ) { return getRawType ( ( ParameterizedType ) type ) ; } if ( type instanceof TypeVariable < ? > ) { MST[rv.ROR1Mutator]MSP[] if ( assigningType == null ) { return null ; }
if ( type instanceof TypeVariable < ? > ) { for ( final Type bound : getImplicitBounds ( ( TypeVariable < ? > ) type ) ) { MST[ReturnValsMutator]MSP[] if ( isAssignable ( bound , toClass ) ) { return getTypeArguments ( bound , toClass , subtypeVarAssigns ) ; } }
return parameterizedTypeToString ( ( ParameterizedType ) type ) ; } if ( type instanceof WildcardType ) { return wildcardTypeToString ( ( WildcardType ) type ) ; MST[NonVoidMethodCallMutator]MSP[] } if ( type instanceof TypeVariable < ? > ) { return typeVariableToString ( ( TypeVariable < ? > ) type ) ; }
parameterizedTypeArguments = new HashMap < TypeVariable < ? > , Type > ( typeArguments ) ; parameterizedTypeArguments . putAll ( TypeUtils . getTypeArguments ( p ) ) ; MST[NonVoidMethodCallMutator]MSP[] } final Type [] args = p . getActualTypeArguments () ;
return parameterizeWithOwner ( owner , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } private static Type [] extractTypeArgumentsFrom ( final Map < TypeVariable < ? > , Type > mappings , final TypeVariable < ? > [] variables ) { MST[NonVoidMethodCallMutator]MSP[]
public static String toString ( final Type type ) { Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[]
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.UOI2Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
if ( t1 instanceof ParameterizedType ) { return equals ( ( ParameterizedType ) t1 , t2 ) ; } if ( t1 instanceof GenericArrayType ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return equals ( ( GenericArrayType ) t1 , t2 ) ; } if ( t1 instanceof WildcardType ) {
&& equals ( getImplicitUpperBounds ( w ) , getImplicitUpperBounds ( other ) ) ; } return false ; } private static boolean equals ( final Type [] t1 , final Type [] t2 ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] if ( t1 . length == t2 . length ) {
midClass = ( Class < ? > ) midType ; } else { throw new IllegalStateException ( lr_6 + lr_7 + midType ) ; MST[rv.ROR4Mutator]MSP[] } if ( isAssignable ( midClass , superClass ) && isAssignable ( genericInterface , ( Type ) midClass ) ) { genericInterface = midType ; }
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[RemoveConditionalMutator_EQUAL_IF]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
buf . insert ( 0 , c . getSimpleName () ) . insert ( 0 , '.' ) ; c = c . getEnclosingClass () ; } } @Override public Type getType () { return type ; MST[ReturnValsMutator]MSP[] }
( Class < ? > ) genericDeclaration ) ; if ( typeVarAssigns == null ) { return null ; } final Type typeArgument = typeVarAssigns . get ( type ) ; if ( typeArgument == null ) { return null ; } MST[ArgumentPropagationMutator]MSP[] return getRawType ( typeArgument , assigningType ) ;
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; MST[rv.ROR1Mutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] )
return getTypeArguments ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toClass . isArray () ? toClass . getComponentType () : toClass , subtypeVarAssigns ) ; } if ( type instanceof WildcardType ) { MST[rv.ROR4Mutator]MSP[]
private static boolean isAssignable ( final Type type , final Type toType , final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( toType == null || toType instanceof Class < ? > ) { MST[rv.ROR5Mutator]MSP[]
final Type [] upperBounds = getImplicitUpperBounds ( wildcardType ) ; final Type [] lowerBounds = getImplicitLowerBounds ( wildcardType ) ; for ( Type toBound : toUpperBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : upperBounds ) { MST[rv.UOI1Mutator]MSP[]
return buf . toString () ; } private static String parameterizedTypeToString ( final ParameterizedType p ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] final StringBuilder buf = new StringBuilder () ; final Type useOwner = p . getOwnerType () ;
if ( containsTypeVariables ( arg ) ) { return true ; } } return false ; } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ; return containsTypeVariables ( TypeUtils . getImplicitLowerBounds ( wild ) [ 0 ] ) MST[rv.CRCR3Mutator]MSP[]
if ( type == null ) { return toClass == null || ! toClass . isPrimitive () ; MST[rv.ROR4Mutator]MSP[] } if ( toClass == null ) { return false ; } if ( toClass . equals ( type ) ) { return true ; }
&& typeVarAssigns . containsKey ( typeVar ) ) { MST[rv.ABSMutator]MSP[] typeVarAssigns . put ( ( TypeVariable < ? > ) typeArg , typeVarAssigns . get ( typeVar ) ) ; } } }
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
return equals ( ( WildcardType ) t1 , t2 ) ; } return false ; } private static boolean equals ( final ParameterizedType p , final Type t ) { MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] if ( t instanceof ParameterizedType ) { final ParameterizedType other = ( ParameterizedType ) t ;
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI4Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return parameterizeWithOwner ( p . getOwnerType () , ( Class < ? > ) p . getRawType () , args ) ; MST[NegateConditionalsMutator]MSP[] } if ( type instanceof WildcardType ) { final WildcardType wild = ( WildcardType ) type ;
return false ; } } for ( final Type toBound : toLowerBounds ) { if ( ! isAssignable ( substituteTypeVariables ( toBound , typeVarAssigns ) , type , typeVarAssigns ) ) { MST[rv.ABSMutator]MSP[] return false ; } } return true ; }
public static boolean containsTypeVariables ( final Type type ) { MST[rv.UOI1Mutator]MSP[] if ( type instanceof TypeVariable < ? > ) { return true ; } if ( type instanceof Class < ? > ) {
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[ArgumentPropagationMutator]MSP[] }
public static String toString ( final Type type ) { MST[ReturnValsMutator]MSP[] Validate . notNull ( type ) ; if ( type instanceof Class < ? > ) { return classToString ( ( Class < ? > ) type ) ; } if ( type instanceof ParameterizedType ) {
static boolean isAssignable ( final Type type , final WildcardType toWildcardType , MST[NegateConditionalsMutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toWildcardType == null ) { return false ; }
private static boolean equals ( final WildcardType w , final Type t ) { MST[rv.ROR4Mutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
private static Type getClosestParentType ( final Class < ? > cls , final Class < ? > superClass ) { MST[rv.ROR2Mutator]MSP[] if ( superClass . isInterface () ) { final Type [] interfaceTypes = cls . getGenericInterfaces () ; Type genericInterface = null ;
private static boolean equals ( final WildcardType w , final Type t ) { MST[NonVoidMethodCallMutator]MSP[] if ( t instanceof WildcardType ) { final WildcardType other = ( WildcardType ) t ; return equals ( getImplicitLowerBounds ( w ) , getImplicitLowerBounds ( other ) )
return null ; } static Map < TypeVariable < ? > , Type > getTypeArguments ( MST[rv.UOI2Mutator]MSP[] final ParameterizedType parameterizedType , final Class < ? > toClass , final Map < TypeVariable < ? > , Type > subtypeVarAssigns ) {
if ( toWildcardType . equals ( type ) ) { MST[rv.ROR5Mutator]MSP[] return true ; } final Type [] toUpperBounds = getImplicitUpperBounds ( toWildcardType ) ; final Type [] toLowerBounds = getImplicitLowerBounds ( toWildcardType ) ; if ( type instanceof WildcardType ) { final WildcardType wildcardType = ( WildcardType ) type ;
if ( ! isAssignable ( bound , toBound , typeVarAssigns ) ) { return false ; } } } for ( Type toBound : toLowerBounds ) { toBound = substituteTypeVariables ( toBound , typeVarAssigns ) ; for ( final Type bound : lowerBounds ) { MST[rv.UOI1Mutator]MSP[]
if ( type instanceof TypeVariable < ? > && typeVarAssigns != null ) { final Type replacementType = typeVarAssigns . get ( type ) ; if ( replacementType == null ) { throw new IllegalArgumentException ( lr_3 MST[RemoveConditionalMutator_EQUAL_ELSE]MSP[] + type ) ; } return replacementType ; }
public static Type [] normalizeUpperBounds ( final Type [] bounds ) { MST[rv.CRCR4Mutator]MSP[] Validate . notNull ( bounds , lr_8 ) ; if ( bounds . length < 2 ) { return bounds ; }
public static boolean typesSatisfyVariables ( final Map < TypeVariable < ? > , Type > typeVarAssigns ) { MST[rv.UOI3Mutator]MSP[] Validate . notNull ( typeVarAssigns , lr_11 ) ; for ( final Map . Entry < TypeVariable < ? > , Type > entry : typeVarAssigns . entrySet () ) {
return isAssignable ( type , ( GenericArrayType ) toType , typeVarAssigns ) ; } if ( toType instanceof WildcardType ) { MST[rv.ROR3Mutator]MSP[] return isAssignable ( type , ( WildcardType ) toType , typeVarAssigns ) ; } if ( toType instanceof TypeVariable < ? > ) {
private static boolean isAssignable ( final Type type , final ParameterizedType toParameterizedType , MST[rv.ROR4Mutator]MSP[] final Map < TypeVariable < ? > , Type > typeVarAssigns ) { if ( type == null ) { return true ; } if ( toParameterizedType == null ) { return false ; }
return cls . isArray () && isAssignable ( cls . getComponentType () , toComponentType , typeVarAssigns ) ; } if ( type instanceof GenericArrayType ) { return isAssignable ( ( ( GenericArrayType ) type ) . getGenericComponentType () , toComponentType , typeVarAssigns ) ; } MST[rv.ROR2Mutator]MSP[]
|| containsTypeVariables ( TypeUtils . getImplicitUpperBounds ( wild ) [ 0 ] ) ; } return false ; } public static final ParameterizedType parameterize ( final Class < ? > raw , final Type ... typeArguments ) { MST[RemoveConditionalMutator_EQUAL_IF]MSP[] return parameterizeWithOwner ( null , raw , typeArguments ) ; }
return determineTypeArguments ( ( Class < ? > ) midType , superType ) ; } final ParameterizedType midParameterizedType = ( ParameterizedType ) midType ; MST[rv.ROR5Mutator]MSP[] final Class < ? > midClass = getRawType ( midParameterizedType ) ;
return parameterizeWithOwner ( null , raw , extractTypeArgumentsFrom ( typeArgMappings , raw . getTypeParameters () ) ) ; } public static final ParameterizedType parameterizeWithOwner ( final Type owner , final Class < ? > raw , MST[InlineConstantMutator]MSP[] final Type ... typeArguments ) {
final Map < TypeVariable < ? > , Type > typeVarAssigns = determineTypeArguments ( midClass , superType ) ; mapTypeVariablesToArguments ( cls , midParameterizedType , typeVarAssigns ) ; return typeVarAssigns ; } private static < T > void mapTypeVariablesToArguments ( final Class < T > cls , MST[NonVoidMethodCallMutator]MSP[]
useOwner = raw . getEnclosingClass () ; } else { MST[rv.CRCR1Mutator]MSP[] Validate . isTrue ( TypeUtils . isAssignable ( owner , raw . getEnclosingClass () ) , lr_16 , owner , raw ) ; useOwner = owner ; } Validate . noNullElements ( typeArguments , lr_17 ) ;
Validate . isTrue ( raw . getTypeParameters () . length == typeArguments . length , lr_18 , raw . getTypeParameters () . length , typeArguments . length ) ; return new ParameterizedTypeImpl ( raw , useOwner , typeArguments ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
final StringBuilder buf = new StringBuilder () ; if ( c . getEnclosingClass () != null ) { buf . append ( classToString ( c . getEnclosingClass () ) ) . append ( '.' ) . append ( c . getSimpleName () ) ; } else { MST[NonVoidMethodCallMutator]MSP[]
. get ( typeArg ) : typeArg ) ; } if ( toClass . equals ( cls ) ) { return typeVarAssigns ; } return getTypeArguments ( getClosestParentType ( cls , toClass ) , toClass , typeVarAssigns ) ; MST[RemoveConditionalMutator_EQUAL_IF]MSP[] }
if ( toParameterizedType . equals ( type ) ) { return true ; MST[rv.CRCR3Mutator]MSP[] } final Class < ? > toClass = getRawType ( toParameterizedType ) ; final Map < TypeVariable < ? > , Type > fromTypeVarAssigns = getTypeArguments ( type , toClass , null ) ;
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI4Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
for ( final Type midType : interfaceTypes ) { Class < ? > midClass = null ; if ( midType instanceof ParameterizedType ) { midClass = getRawType ( ( ParameterizedType ) midType ) ; MST[rv.UOI3Mutator]MSP[] } else if ( midType instanceof Class < ? > ) {
Validate . notNull ( raw , lr_13 ) ; final Type useOwner ; if ( raw . getEnclosingClass () == null ) { Validate . isTrue ( owner == null , lr_15 , raw ) ; useOwner = null ; MST[rv.CRCR1Mutator]MSP[] } else if ( owner == null ) {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { this . upperBounds = bounds ; return this ; } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { MST[NullReturnValsMutator]MSP[] this . lowerBounds = bounds ; return this ; } @Override public WildcardType build () {
return new WildcardTypeImpl ( upperBounds , lowerBounds ) ; } MST[ConstructorCallMutator]MSP[] @Override public Type getGenericComponentType () { return componentType ; } @Override public String toString () { return TypeUtils . toString ( this ) ; } @Override public boolean equals ( final Object obj ) {
return new WildcardTypeImpl ( upperBounds , lowerBounds ) ; } MST[ReturnValsMutator]MSP[] @Override public Type getGenericComponentType () { return componentType ; } @Override public String toString () { return TypeUtils . toString ( this ) ; } @Override public boolean equals ( final Object obj ) {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { this . upperBounds = bounds ; return this ; } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { MST[ReturnValsMutator]MSP[] this . lowerBounds = bounds ; return this ; } @Override public WildcardType build () {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { this . upperBounds = bounds ; return this ; MST[experimental.MemberVariableMutator]MSP[] } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { this . lowerBounds = bounds ; return this ; } @Override public WildcardType build () {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { MST[NullReturnValsMutator]MSP[] this . upperBounds = bounds ; return this ; } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { this . lowerBounds = bounds ; return this ; } @Override public WildcardType build () {
return new WildcardTypeImpl ( upperBounds , lowerBounds ) ; } MST[NullReturnValsMutator]MSP[] @Override public Type getGenericComponentType () { return componentType ; } @Override public String toString () { return TypeUtils . toString ( this ) ; } @Override public boolean equals ( final Object obj ) {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { this . upperBounds = bounds ; return this ; } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { this . lowerBounds = bounds ; return this ; MST[experimental.MemberVariableMutator]MSP[] } @Override public WildcardType build () {
public WildcardTypeBuilder withUpperBounds ( final Type ... bounds ) { MST[ReturnValsMutator]MSP[] this . upperBounds = bounds ; return this ; } public WildcardTypeBuilder withLowerBounds ( final Type ... bounds ) { this . lowerBounds = bounds ; return this ; } @Override public WildcardType build () {
