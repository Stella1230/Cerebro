final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[experimental.SwitchMutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
@Override public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; MST[ConstructorCallMutator]MSP[] } if ( obj instanceof TimeZoneDisplayKey ) { final TimeZoneDisplayKey other = ( TimeZoneDisplayKey ) obj ; return mTimeZone . equals ( other . mTimeZone ) &&
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[rv.UOI1Mutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[rv.UOI3Mutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[VoidMethodCallMutator]MSP[] public int estimateLength () {
public void appendTo ( final Appendable buffer , final int value ) throws IOException { mRule . appendTo ( buffer , value ) ; } static String getTimeZoneDisplay ( final TimeZone tz , final boolean daylight , final int style , final Locale locale ) { MST[PrimitiveReturnsMutator]MSP[]
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[rv.ABSMutator]MSP[] public int estimateLength () {
public void appendTo ( final Appendable buffer , final int value ) throws IOException { mRule . appendTo ( buffer , value ) ; } static String getTimeZoneDisplay ( final TimeZone tz , final boolean daylight , final int style , final Locale locale ) { MST[ReturnValsMutator]MSP[]
public void appendTo ( final Appendable buffer , final int value ) throws IOException { mRule . appendTo ( buffer , value ) ; } static String getTimeZoneDisplay ( final TimeZone tz , final boolean daylight , final int style , final Locale locale ) { MST[NonVoidMethodCallMutator]MSP[]
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[rv.UOI2Mutator]MSP[] public int estimateLength () {
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[rv.UOI4Mutator]MSP[] public int estimateLength () {
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[rv.UOI3Mutator]MSP[] public int estimateLength () {
final String prior = cTimeZoneDisplayCache . putIfAbsent ( key , value ) ; if ( prior != null ) { value = prior ; } } return value ; } @Override MST[rv.UOI1Mutator]MSP[] public int estimateLength () {
final TimeZoneDisplayKey key = new TimeZoneDisplayKey ( tz , daylight , style , locale ) ; MST[experimental.MemberVariableMutator]MSP[] String value = cTimeZoneDisplayCache . get ( key ) ; if ( value == null ) { value = tz . getDisplayName ( daylight , style , locale ) ;
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[rv.UOI2Mutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[rv.UOI4Mutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[experimental.RemoveSwitchMutator_2]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[experimental.RemoveSwitchMutator_1]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[experimental.RemoveSwitchMutator_0]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
final int minutes = offset / ( 60 * 1000 ) - 60 * hours ; appendDigits ( buffer , minutes ) ; } @Override MST[rv.ABSMutator]MSP[] public int hashCode () { return ( mStyle * 31 + mLocale . hashCode () ) * 31 + mTimeZone . hashCode () ; }
