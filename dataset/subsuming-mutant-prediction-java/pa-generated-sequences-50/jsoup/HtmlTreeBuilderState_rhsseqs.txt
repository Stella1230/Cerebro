boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] switch ( t . type ) { case Character : Token . Character c = t . asCharacter () ; if ( c . getData () . equals ( nullString ) ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] switch ( t . type ) { case Character : Token . Character c = t . asCharacter () ; if ( c . getData () . equals ( nullString ) ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] switch ( t . type ) { case Character : Token . Character c = t . asCharacter () ; if ( c . getData () . equals ( nullString ) ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] switch ( t . type ) { case Character : Token . Character c = t . asCharacter () ; if ( c . getData () . equals ( nullString ) ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] switch ( t . type ) { case Character : Token . Character c = t . asCharacter () ; if ( c . getData () . equals ( nullString ) ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isEndTag () && t . asEndTag () . normalName () . equals ( lr_50 ) ) { Token . EndTag endTag = t . asEndTag () ; String name = endTag . normalName () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isEndTag () && t . asEndTag () . normalName () . equals ( lr_50 ) ) { Token . EndTag endTag = t . asEndTag () ; String name = endTag . normalName () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isEndTag () && t . asEndTag () . normalName () . equals ( lr_50 ) ) { Token . EndTag endTag = t . asEndTag () ; String name = endTag . normalName () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isEndTag () && t . asEndTag () . normalName () . equals ( lr_50 ) ) { Token . EndTag endTag = t . asEndTag () ; String name = endTag . normalName () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isEndTag () && t . asEndTag () . normalName () . equals ( lr_50 ) ) { Token . EndTag endTag = t . asEndTag () ; String name = endTag . normalName () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] switch ( t . type ) { case StartTag : Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] switch ( t . type ) { case StartTag : Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] switch ( t . type ) { case StartTag : Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] switch ( t . type ) { case StartTag : Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] switch ( t . type ) { case StartTag : Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isStartTag () ) { Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isStartTag () ) { Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isStartTag () ) { Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isStartTag () ) { Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isStartTag () ) { Token . StartTag startTag = t . asStartTag () ; String name = startTag . normalName () ; if ( name . equals ( lr_59 ) ) {
private boolean handleMissingTr ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( lr_58 ) ; if ( processed ) return tb . process ( t ) ; else return false ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N]
private boolean handleMissingTr ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( lr_58 ) ; if ( processed ) return tb . process ( t ) ; else return false ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N]
private boolean handleMissingTr ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( lr_58 ) ; if ( processed ) return tb . process ( t ) ; else return false ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N]
private boolean handleMissingTr ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( lr_58 ) ; if ( processed ) return tb . process ( t ) ; else return false ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N]
private boolean handleMissingTr ( Token t , TreeBuilder tb ) { boolean processed = tb . processEndTag ( lr_58 ) ; if ( processed ) return tb . process ( t ) ; else return false ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N]
if ( tb . inTableScope ( lr_56 ) ) tb . processEndTag ( lr_56 ) ; else tb . processEndTag ( lr_57 ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] switch ( t . type ) { case Character :
if ( tb . inTableScope ( lr_56 ) ) tb . processEndTag ( lr_56 ) ; else tb . processEndTag ( lr_57 ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] switch ( t . type ) { case Character :
if ( tb . inTableScope ( lr_56 ) ) tb . processEndTag ( lr_56 ) ; else tb . processEndTag ( lr_57 ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] switch ( t . type ) { case Character :
if ( tb . inTableScope ( lr_56 ) ) tb . processEndTag ( lr_56 ) ; else tb . processEndTag ( lr_57 ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] switch ( t . type ) { case Character :
if ( tb . inTableScope ( lr_56 ) ) tb . processEndTag ( lr_56 ) ; else tb . processEndTag ( lr_57 ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] switch ( t . type ) { case Character :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isStartTag () && StringUtil . in ( t . asStartTag () . normalName () , lr_50 , lr_27 , lr_53 , lr_54 , lr_55 , lr_58 , lr_56 , lr_57 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isStartTag () && StringUtil . in ( t . asStartTag () . normalName () , lr_50 , lr_27 , lr_53 , lr_54 , lr_55 , lr_58 , lr_56 , lr_57 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isStartTag () && StringUtil . in ( t . asStartTag () . normalName () , lr_50 , lr_27 , lr_53 , lr_54 , lr_55 , lr_58 , lr_56 , lr_57 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isStartTag () && StringUtil . in ( t . asStartTag () . normalName () , lr_50 , lr_27 , lr_53 , lr_54 , lr_55 , lr_58 , lr_56 , lr_57 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isStartTag () && StringUtil . in ( t . asStartTag () . normalName () , lr_50 , lr_27 , lr_53 , lr_54 , lr_55 , lr_58 , lr_56 , lr_57 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ; } else if ( t . isComment () ) { tb . insert ( t . asComment () ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ; } else if ( t . isComment () ) { tb . insert ( t . asComment () ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ; } else if ( t . isComment () ) { tb . insert ( t . asComment () ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ; } else if ( t . isComment () ) { tb . insert ( t . asComment () ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( isWhitespace ( t ) ) { return true ; } else if ( t . isComment () ) { tb . insert ( t . asComment () ) ;
} else { tb . transition ( BeforeHtml ) ; return tb . process ( t ) ; } return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ;
} else { tb . transition ( BeforeHtml ) ; return tb . process ( t ) ; } return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ;
} else { tb . transition ( BeforeHtml ) ; return tb . process ( t ) ; } return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ;
} else { tb . transition ( BeforeHtml ) ; return tb . process ( t ) ; } return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ;
} else { tb . transition ( BeforeHtml ) ; return tb . process ( t ) ; } return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ; } else if ( t . isStartTag () && t . asStartTag () . normalName () . equals ( lr_1 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ; } else if ( t . isStartTag () && t . asStartTag () . normalName () . equals ( lr_1 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ; } else if ( t . isStartTag () && t . asStartTag () . normalName () . equals ( lr_1 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ; } else if ( t . isStartTag () && t . asStartTag () . normalName () . equals ( lr_1 ) ) {
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isDoctype () ) { tb . error ( this ) ; } else if ( t . isStartTag () && t . asStartTag () . normalName () . equals ( lr_1 ) ) {
return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isComment () ) {
return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isComment () ) {
return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isComment () ) {
return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isComment () ) {
return true ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isComment () ) {
tb . insertStartTag ( lr_1 ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( isWhitespace ( t ) ) { return true ;
tb . insertStartTag ( lr_1 ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ;
tb . insertStartTag ( lr_1 ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ;
tb . insertStartTag ( lr_1 ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ;
tb . insertStartTag ( lr_1 ) ; tb . transition ( BeforeHead ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( isWhitespace ( t ) ) { return true ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( isWhitespace ( t ) ) { tb . insert ( t . asCharacter () ) ; return true ; } switch ( t . type ) { case Comment :
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isCharacter () ) { tb . newPendingTableCharacters () ; tb . markInsertionMode () ; tb . transition ( InTableText ) ; return tb . process ( t ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isCharacter () ) { tb . newPendingTableCharacters () ; tb . markInsertionMode () ; tb . transition ( InTableText ) ; return tb . process ( t ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isCharacter () ) { tb . newPendingTableCharacters () ; tb . markInsertionMode () ; tb . transition ( InTableText ) ; return tb . process ( t ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isCharacter () ) { tb . newPendingTableCharacters () ; tb . markInsertionMode () ; tb . transition ( InTableText ) ; return tb . process ( t ) ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isCharacter () ) { tb . newPendingTableCharacters () ; tb . markInsertionMode () ; tb . transition ( InTableText ) ; return tb . process ( t ) ;
tb . framesetOk ( true ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] switch ( t . type ) { case Character : { Token . Character c = t . asCharacter () ;
tb . framesetOk ( true ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] switch ( t . type ) { case Character : { Token . Character c = t . asCharacter () ;
tb . framesetOk ( true ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] switch ( t . type ) { case Character : { Token . Character c = t . asCharacter () ;
tb . framesetOk ( true ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] switch ( t . type ) { case Character : { Token . Character c = t . asCharacter () ;
tb . framesetOk ( true ) ; return tb . process ( t ) ; } boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] switch ( t . type ) { case Character : { Token . Character c = t . asCharacter () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.ABSMutator]MSP[N] if ( t . isCharacter () ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isEOF () ) { tb . error ( this ) ; tb . pop () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI1Mutator]MSP[N] if ( t . isCharacter () ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isEOF () ) { tb . error ( this ) ; tb . pop () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI3Mutator]MSP[N] if ( t . isCharacter () ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isEOF () ) { tb . error ( this ) ; tb . pop () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI4Mutator]MSP[N] if ( t . isCharacter () ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isEOF () ) { tb . error ( this ) ; tb . pop () ;
boolean process ( Token t , HtmlTreeBuilder tb ) { MST[rv.UOI2Mutator]MSP[N] if ( t . isCharacter () ) { tb . insert ( t . asCharacter () ) ; } else if ( t . isEOF () ) { tb . error ( this ) ; tb . pop () ;
